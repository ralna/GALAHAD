.TH "galahad_sbls.h" 3 "Tue May 2 2023" "C interfaces to GALAHAD SBLS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_sbls.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_sls\&.h'\fP
.br
\fC#include 'galahad_uls\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsbls_control_type\fP"
.br
.ti -1c
.RI "struct \fBsbls_time_type\fP"
.br
.ti -1c
.RI "struct \fBsbls_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsbls_initialize\fP (void **data, struct \fBsbls_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBsbls_read_specfile\fP (struct \fBsbls_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBsbls_import\fP (struct \fBsbls_control_type\fP *control, void **data, int *status, int n, int m, const char H_type[], int H_ne, const int H_row[], const int H_col[], const int H_ptr[], const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[], const char C_type[], int C_ne, const int C_row[], const int C_col[], const int C_ptr[])"
.br
.ti -1c
.RI "void \fBsbls_reset_control\fP (struct \fBsbls_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBsbls_factorize_matrix\fP (void **data, int *status, int n, int h_ne, const real_wp_ H_val[], int a_ne, const real_wp_ A_val[], int c_ne, const real_wp_ C_val[], const real_wp_ D[])"
.br
.ti -1c
.RI "void \fBsbls_solve_system\fP (void **data, int *status, int n, int m, real_wp_ sol[])"
.br
.ti -1c
.RI "void \fBsbls_information\fP (void **data, struct \fBsbls_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBsbls_terminate\fP (void **data, struct \fBsbls_control_type\fP *control, struct \fBsbls_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
Given a \fBblock, symmetric matrix\fP \[K_H = \mat{cc}{ H & A^T \\ A & - C },\]  
  \n
  K_H = ( H  A^T )
        ( A  - C )
  \n
 this package constructs a variety of \fBpreconditioners\fP of the form \[K_{G} = \mat{cc}{ G & A^T \\ A & - C }.\]  
  \n
  K_G = ( G  A^T ).
        ( A  - C )
  \n
 Here, the leading-block matrix G is a suitably-chosen approximation to H; it may either be prescribed \fBexplicitly\fP, in which case a symmetric indefinite factorization of K_G will be formed using the GALAHAD symmetric matrix factorization package SLS, or \fBimplicitly\fP, by requiring certain sub-blocks of G be zero\&. In the latter case, a factorization of K_G will be obtained implicitly (and more efficiently) without recourse to SLS\&. In particular, for implicit preconditioners, a reordering \[K_G = P \mat{ccc}{ G_{11}^{} & G_{21}^T & A_1^T \\ G_{21}^{} & G_{22}^{} & A_2^T \\ A_{1}^{} & A_{2}^{} & - C} P^T \]  
  \n
          ( G_11  G_21^T  A_1^T )
  K_G = P ( G_21   G_22   A_2^T ) P^T
          (  A_1   A_2     - C  )
  \n
 involving a suitable permutation P will be found, for some invertible sub-block (``basis'') A_1 of the columns of A; the selection and factorization of A_1 uses the GALAHAD unsymmetric matrix factorization package ULS\&. Once the preconditioner has been constructed, solutions to the preconditioning system \[\mat{cc}{ G & A^T \\ A & - C } \vect{ x \\ y } = \vect{a \\ b} \]  
\n
  ( G  A^T ) ( x ) = ( a )
  ( A  - C ) ( y )   ( b )
\n
 may be obtained by the package\&. Full advantage is taken of any zero coefficients in the matrices H, A and C\&.
.SS "Authors"
H\&. S\&. Dollar and N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique Montr√©al\&.
.SS "Originally released"
April 2006, C interface November 2021\&.
.SS "Method"
The method used depends on whether an explicit or implicit factorization is required\&. In the explicit case, the package is really little more than a wrapper for the GALAHAD symmetric, indefinite linear solver SLS in which the system matrix K_G is assembled from its constituents A, C and whichever G is requested by the user\&. Implicit-factorization preconditioners are more involved, and there is a large variety of different possibilities\&. The essential ideas are described in detail in
.PP
H\&. S\&. Dollar, N\&. I\&. M\&. Gould and A\&. J\&. Wathen\&. ``On implicit-factorization constraint preconditioners''\&. In Large Scale Nonlinear Optimization (G\&. Di Pillo and M\&. Roma, eds\&.) Springer Series on Nonconvex Optimization and Its Applications, Vol\&. 83, Springer Verlag (2006) 61--82
.PP
and
.PP
H\&. S\&. Dollar, N\&. I\&. M\&. Gould, W\&. H\&. A\&. Schilders and A\&. J\&. Wathen ``On iterative methods and implicit-factorization preconditioners for regularized saddle-point systems''\&. SIAM Journal on Matrix Analysis and Applications, 28(1) (2006) 170--189\&.
.PP
The range-space factorization is based upon the decomposition \[K_{G} = \mat{cc}{ G & 0 \\ A & I} \mat{cc}{ G^{-1} & 0 \\ 0 & - S} \mat{cc}{ G & A^T \\ 0 & I}, \]  
  \n
  K_G = ( G  0 ) ( G^{-1} 0 ) ( G A^T )
        ( A  I ) (   0   -S ) ( 0  I  )
  \n
 where the ``Schur complement'' S = C + A G^{-1} A^T\&. Such a method requires that S is easily invertible\&. This is often the case when G is a diagonal matrix, in which case S is frequently sparse, or when m \\ll n in which case S is small and a dense Cholesky factorization may be used\&.
.PP
When C = 0, the null-space factorization is based upon the decomposition \[K_{G} = P \mat{ccc}{ G_{11}^{} & 0 & I \\ G_{21}^{} & I & A_{2}^{T} A_{1}^{-T} \\ A_{1}^{} & 0 & 0 } \mat{ccc}{0 & 0 & I \\ \;\;\; 0 \;\; & \;\; R \;\; & 0 \\ I & 0 & - G_{11}^{}} \mat{ccc}{ G_{11}^{} & G_{21}^T & A_{1}^T \\ 0 & I & 0 \\ I & A_{1}^{-1} A_{2}^{} & 0} P^T, \]  
  \n
          ( G_11  0      I          ) ( 0  0   I   )
  K_G = P ( G_21  I  A_2^T A_1^{-T} ) ( 0  R   0   )
          ( A_1   0      0          ) ( I  0 -G_11 )

            ( G_11   G_21^T   A_1^T )
          . (  0        I        0  ) P^T,
            (  I    A_1^{-1} A_2  0 )
  \n
 where the ``reduced Hessian'' \[R = ( - A_{2}^{T} A_1^{-T} \;\; I ) \mat{cc}{G_{11}^{} & G_{21}^{T} \\ G_{21}^{} & G_{22}^{}} \vect{ - A_1^{-1} A_2^{} \\ I} \]  
  \n
   R = ( -A_2^T A_1^{-T}  I )( G_11  G_21^T ) ( -A_1^{-1} A_2 )
                             ( G_21   G_22  ) (       I       )
  \n
 and P is a suitably-chosen permutation for which A_1 is invertible\&. The method is most useful when m \\approx n as then the dimension of R is small and a dense Cholesky factorization may be used\&.
.SS "Call order"
To solve a given problem, functions from the sbls package must be called in the following order:
.PP
.IP "\(bu" 2
\fBsbls_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBsbls_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBsbls_import\fP - set up matrix data structures
.IP "\(bu" 2
\fBsbls_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
\fBsbls_factorize_matrix\fP - form and factorize the block matrix from its components
.IP "\(bu" 2
\fBsbls_solve_system\fP - solve the block linear system of equations
.IP "\(bu" 2
\fBsbls_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBsbls_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Unsymmetric matrix storage formats"
The unsymmetric m by n constraint matrix A may be presented and stored in a variety of convenient input formats\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. In this case, component n * i + j of the storage array A_val will hold the value A_{ij} for 0 <= i <= m-1, 0 <= j <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= i <= m-1, 0 <= j <= n-1, are stored as the l-th components of the integer arrays A_row and A_col and real array A_val, respectively, while the number of nonzeros is recorded as A_ne = ne\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array A_ptr holds the position of the first entry in this row, while A_ptr(m) holds the total number of entries\&. The column indices j, 0 <= j <= n-1, and values A_{ij} of the nonzero entries in the i-th row are stored in components l = A_ptr(i), \&.\&.\&., A_ptr(i+1)-1, 0 <= i <= m-1, of the integer array A_col, and real array A_val, respectively\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Symmetric matrix storage formats"
Likewise, the symmetric n by n matrix H, as well as the m by m matrix C, may be presented and stored in a variety of formats\&. But crucially symmetry is exploited by only storing values from the lower triangular part (i\&.e, those entries that lie on or below the leading diagonal)\&. We focus on H, but everything we say applies equally to C\&.
.SS "Dense storage format"
The matrix H is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. Since H is symmetric, only the lower triangular part (that is the part h_{ij} for 0 <= j <= i <= n-1) need be held\&. In this case the lower triangle should be stored by rows, that is component i * i / 2 + j of the storage array H_val will hold the value h_{ij} (and, by symmetry, h_{ji}) for 0 <= j <= i <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of H, its row index i, column index j and value h_{ij}, 0 <= j <= i <= n-1, are stored as the l-th components of the integer arrays H_row and H_col and real array H_val, respectively, while the number of nonzeros is recorded as H_ne = ne\&. Note that only the entries in the lower triangle should be stored\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of H the i-th component of the integer array H_ptr holds the position of the first entry in this row, while H_ptr(n) holds the total number of entries\&. The column indices j, 0 <= j <= i, and values h_{ij} of the entries in the i-th row are stored in components l = H_ptr(i), \&.\&.\&., H_ptr(i+1)-1 of the integer array H_col, and real array H_val, respectively\&. Note that as before only the entries in the lower triangle should be stored\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Diagonal storage format"
If H is diagonal (i\&.e\&., H_{ij} = 0 for all 0 <= i /= j <= n-1) only the diagonals entries H_{ii}, 0 <= i <= n-1 need be stored, and the first n components of the array H_val may be used for the purpose\&.
.SS "Multiples of the identity storage format"
If H is a multiple of the identity matrix, (i\&.e\&., H = alpha I where I is the n by n identity matrix and alpha is a scalar), it suffices to store alpha as the first component of H_val\&.
.SS "The identity matrix format"
If H is the identity matrix, no values need be stored\&.
.SS "The zero matrix format"
The same is true if H is the zero matrix\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct sbls_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit for error messages 
.br
.PP
int \fIout\fP unit for monitor output 
.br
.PP
int \fIprint_level\fP controls level of diagnostic output 
.br
.PP
int \fIindmin\fP initial estimate of integer workspace for SLS (obsolete) 
.br
.PP
int \fIvalmin\fP initial estimate of real workspace for SLS (obsolete) 
.br
.PP
int \fIlen_ulsmin\fP initial estimate of workspace for ULS (obsolete) 
.br
.PP
int \fIitref_max\fP maximum number of iterative refinements with preconditioner allowed 
.br
.PP
int \fImaxit_pcg\fP maximum number of projected CG iterations allowed 
.br
.PP
int \fInew_a\fP how much has A changed since last factorization: 0 = not changed, 1 = values changed, 2 = structure changed 
.br
.PP
int \fInew_h\fP how much has H changed since last factorization: 0 = not changed, 1 = values changed, 2 = structure changed 
.br
.PP
int \fInew_c\fP how much has C changed since last factorization: 0 = not changed, 1 = values changed, 2 = structure changed 
.br
.PP
int \fIpreconditioner\fP which preconditioner to use: 
.PD 0

.IP "\(bu" 2
0 selected automatically 
.IP "\(bu" 2
1 explicit with G = I 
.IP "\(bu" 2
2 explicit with G = H 
.IP "\(bu" 2
3 explicit with G = diag(max(H,min_diag)) 
.IP "\(bu" 2
4 explicit with G = band(H) 
.IP "\(bu" 2
5 explicit with G = (optional, diagonal) D 
.IP "\(bu" 2
11 explicit with G_{11} = 0, G_{21} = 0, G_{22} = H_{22} 
.IP "\(bu" 2
12 explicit with G_{11} = 0, G_{21} = H_{21}, G_{22} = H_{22} 
.IP "\(bu" 2
-1 implicit with G_{11} = 0, G_{21} = 0, G_{22} = I 
.IP "\(bu" 2
-2 implicit with G_{11} = 0, G_{21} = 0, G_{22} = H_{22} 
.PP

.br
.PP
int \fIsemi_bandwidth\fP the semi-bandwidth for band(H) 
.br
.PP
int \fIfactorization\fP the explicit factorization used: 
.PD 0

.IP "\(bu" 2
0 selected automatically 
.IP "\(bu" 2
1 Schur-complement if G is diagonal and successful otherwise augmented system 
.IP "\(bu" 2
2 augmented system 
.IP "\(bu" 2
3 null-space 
.IP "\(bu" 2
4 Schur-complement if G is diagonal and successful otherwise failure 
.IP "\(bu" 2
5 Schur-complement with pivoting if G is diagonal and successful otherwise failure 
.PP

.br
.PP
int \fImax_col\fP maximum number of nonzeros in a column of A for Schur-complement factorization 
.br
.PP
int \fIscaling\fP not used at present 
.br
.PP
int \fIordering\fP see scaling 
.br
.PP
real_wp_ \fIpivot_tol\fP the relative pivot tolerance used by ULS (obsolete) 
.br
.PP
real_wp_ \fIpivot_tol_for_basis\fP the relative pivot tolerance used by ULS when determining the basis matrix 
.br
.PP
real_wp_ \fIzero_pivot\fP the absolute pivot tolerance used by ULS (obsolete) 
.br
.PP
real_wp_ \fIstatic_tolerance\fP not used at present 
.br
.PP
real_wp_ \fIstatic_level\fP see static_tolerance 
.br
.PP
real_wp_ \fImin_diagonal\fP the minimum permitted diagonal in diag(max(H,min_diag)) 
.br
.PP
real_wp_ \fIstop_absolute\fP the required absolute and relative accuracies 
.br
.PP
real_wp_ \fIstop_relative\fP see stop_absolute 
.br
.PP
bool \fIremove_dependencies\fP preprocess equality constraints to remove linear dependencies 
.br
.PP
bool \fIfind_basis_by_transpose\fP determine implicit factorization preconditioners using a basis of A found by examining A's transpose 
.br
.PP
bool \fIaffine\fP can the right-hand side c be assumed to be zero? 
.br
.PP
bool \fIallow_singular\fP do we tolerate 'singular' preconditioners? 
.br
.PP
bool \fIperturb_to_make_definite\fP if the initial attempt at finding a preconditioner is unsuccessful, should the diagonal be perturbed so that a second attempt succeeds? 
.br
.PP
bool \fIget_norm_residual\fP compute the residual when applying the preconditioner? 
.br
.PP
bool \fIcheck_basis\fP if an implicit or null-space preconditioner is used, assess and correct for ill conditioned basis matrices 
.br
.PP
bool \fIspace_critical\fP if space is critical, ensure allocated arrays are no bigger than needed 
.br
.PP
bool \fIdeallocate_error_fatal\fP exit if any deallocation fails 
.br
.PP
char \fIsymmetric_linear_solver[31]\fP indefinite linear equation solver 
.br
.PP
char \fIdefinite_linear_solver[31]\fP definite linear equation solver 
.br
.PP
char \fIunsymmetric_linear_solver[31]\fP unsymmetric linear equation solver 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct sls_control_type \fIsls_control\fP control parameters for SLS 
.br
.PP
struct uls_control_type \fIuls_control\fP control parameters for ULS 
.br
.PP
.RE
.PP
.SH "struct sbls_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_wp_ \fItotal\fP total cpu time spent in the package 
.br
.PP
real_wp_ \fIform\fP cpu time spent forming the preconditioner K_G 
.br
.PP
real_wp_ \fIfactorize\fP cpu time spent factorizing K_G 
.br
.PP
real_wp_ \fIapply\fP cpu time spent solving linear systems inolving K_G 
.br
.PP
real_wp_ \fIclock_total\fP total clock time spent in the package 
.br
.PP
real_wp_ \fIclock_form\fP clock time spent forming the preconditioner K_G 
.br
.PP
real_wp_ \fIclock_factorize\fP clock time spent factorizing K_G 
.br
.PP
real_wp_ \fIclock_apply\fP clock time spent solving linear systems inolving K_G 
.br
.PP
.RE
.PP
.SH "struct sbls_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP return status\&. See SBLS_form_and_factorize for details 
.br
.PP
int \fIalloc_status\fP the status of the last attempted allocation/deallocation 
.br
.PP
char \fIbad_alloc[81]\fP the name of the array for which an allocation/deallocation error occurred 
.br
.PP
int \fIsort_status\fP the return status from the sorting routines 
.br
.PP
int64_t \fIfactorization_integer\fP the total integer workspace required for the factorization 
.br
.PP
int64_t \fIfactorization_real\fP the total real workspace required for the factorization 
.br
.PP
int \fIpreconditioner\fP the preconditioner used 
.br
.PP
int \fIfactorization\fP the factorization used 
.br
.PP
int \fId_plus\fP how many of the diagonals in the factorization are positive 
.br
.PP
int \fIrank\fP the computed rank of A 
.br
.PP
bool \fIrank_def\fP is the matrix A rank defficient? 
.br
.PP
bool \fIperturbed\fP has the used preconditioner been perturbed to guarantee correct inertia? 
.br
.PP
int \fIiter_pcg\fP the total number of projected CG iterations required 
.br
.PP
real_wp_ \fInorm_residual\fP the norm of the residual 
.br
.PP
bool \fIalternative\fP has an 'alternative' y: K y = 0 and y^T c > 0 been found when trying to solve K y = c for generic K? 
.br
.PP
struct \fBsbls_time_type\fP \fItime\fP timings (see above) 
.br
.PP
struct sls_inform_type \fIsls_inform\fP inform parameters from the GALAHAD package SLS used 
.br
.PP
struct uls_inform_type \fIuls_inform\fP inform parameters from the GALAHAD package ULS used 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void sbls_initialize (void ** data, struct \fBsbls_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBsbls_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void sbls_read_specfile (struct \fBsbls_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNSBLS\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/sbls\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBsbls_control_type\fP) 
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void sbls_import (struct \fBsbls_control_type\fP * control, void ** data, int * status, int n, int m, const char H_type[], int H_ne, const int H_row[], const int H_col[], const int H_ptr[], const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[], const char C_type[], int C_ne, const int C_row[], const int C_col[], const int C_ptr[])"
Import structural matrix data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBsbls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 or m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of rows in the symmetric matrix H\&.
.br
\fIm\fP is a scalar variable of type int, that holds the number of rows in the symmetric matrix C\&.
.br
\fIH_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the matrix H\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none', the latter pair if H=0; lower or upper case variants are allowed\&.
.br
\fIH_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIH_row\fP is a one-dimensional array of size H_ne and type int, that holds the row indices of the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIH_col\fP is a one-dimensional array of size H_ne and type int, that holds the column indices of the lower triangular part of H in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense, diagonal or (scaled) identity storage schemes are used, and in this case can be NULL\&.
.br
\fIH_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of H, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&.
.br
\fIA_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the matrix A\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense' or 'absent', the latter if access to the Jacobian is via matrix-vector products; lower or upper case variants are allowed\&.
.br
\fIA_ne\fP is a scalar variable of type int, that holds the number of entries in A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIA_row\fP is a one-dimensional array of size A_ne and type int, that holds the row indices of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes, and in this case can be NULL\&.
.br
\fIA_col\fP is a one-dimensional array of size A_ne and type int, that holds the column indices of A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense or diagonal storage schemes are used, and in this case can be NULL\&.
.br
\fIA_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&.
.br
\fIC_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the matrix C\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none', the latter pair if C=0; lower or upper case variants are allowed\&.
.br
\fIC_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of C in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIC_row\fP is a one-dimensional array of size C_ne and type int, that holds the row indices of the lower triangular part of C in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIC_col\fP is a one-dimensional array of size C_ne and type int, that holds the column indices of the lower triangular part of C in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense, diagonal or (scaled) identity storage schemes are used, and in this case can be NULL\&.
.br
\fIC_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of C, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void sbls_reset_control (struct \fBsbls_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBsbls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void sbls_factorize_matrix (void ** data, int * status, int n, int h_ne, const real_wp_ H_val[], int a_ne, const real_wp_ A_val[], int c_ne, const real_wp_ C_val[], const real_wp_ D[])"
Form and factorize the block matrix \[K_{G} = \mat{cc}{ G & A^T \\ A & - C }\]  
  \n
  K_G = ( G  A^T )
        ( A  - C )
  \n
 for some appropriate matrix G\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The factors were generated succesfully\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 and m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&.
.PP
.PD 0
.IP "\(bu" 2
-9\&. An error was reported by SLS analyse\&. The return status from SLS analyse is given in inform\&.sls_inform\&.status\&. See the documentation for the GALAHAD package SLS for further details\&.
.PP
.PD 0
.IP "\(bu" 2
-10\&. An error was reported by SLS_factorize\&. The return status from SLS factorize is given in inform\&.sls_inform\&.status\&. See the documentation for the GALAHAD package SLS for further details\&.
.PP
.PD 0
.IP "\(bu" 2
-13\&. An error was reported by ULS_factorize\&. The return status from ULS_factorize is given in inform\&.uls_factorize_status\&. See the documentation for the GALAHAD package ULS for further details\&.
.PP
.PD 0
.IP "\(bu" 2
-15\&. The computed preconditioner K_G is singular and is thus unsuitable\&.
.PP
.PD 0
.IP "\(bu" 2
-20\&. The computed preconditioner K_G has the wrong inertia and is thus unsuitable\&.
.PP
.PD 0
.IP "\(bu" 2
-24\&. An error was reported by the GALAHAD package SORT_reorder_by_rows\&. The return status from SORT_reorder_by_rows is given in inform\&.sort_status\&. See the documentation for the GALAHAD package SORT for further details\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of rows in the symmetric matrix H\&.
.br
\fIh_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the symmetric matrix H\&.
.br
\fIH_val\fP is a one-dimensional array of size h_ne and type double, that holds the values of the entries of the lower triangular part of the symmetric matrix H in any of the available storage schemes
.br
\fIa_ne\fP is a scalar variable of type int, that holds the number of entries in the unsymmetric matrix A\&.
.br
\fIA_val\fP is a one-dimensional array of size a_ne and type double, that holds the values of the entries of the unsymmetric matrix A in any of the available storage schemes\&.
.br
\fIc_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the symmetric matrix C\&.
.br
\fIC_val\fP is a one-dimensional array of size c_ne and type double, that holds the values of the entries of the lower triangular part of the symmetric matrix C in any of the available storage schemes
.br
\fID\fP is a one-dimensional array of size n and type double, that holds the values of the entries of the diagonal matrix D that is required if the user has specified control\&.preconditioner = 5\&. It need not be set otherwise\&. 
.RE
.PP

.SS "void sbls_solve_system (void ** data, int * status, int n, int m, real_wp_ sol[])"
Solve the block linear system \[\mat{cc}{ G & A^T \\ A & - C } \vect{ x \\ y } = \vect{a \\ b}. \]  
\n
  ( G  A^T ) ( x ) = ( a ).
  ( A  - C ) ( y )   ( b )
\n

.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The required solution was obtained\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&.
.PP
.PD 0
.IP "\(bu" 2
-11\&. An error was reported by SLS_solve\&. The return status from SLS solve is given in inform\&.sls_inform\&.status\&. See the documentation for the GALAHAD package SLS for further details\&.
.PP
.PD 0
.IP "\(bu" 2
-14\&. An error was reported by ULS_solve\&. The return status from ULS_solve is given in inform\&.uls_solve_status\&. See the documentation for the GALAHAD package ULS for further details\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of entries in the vector a\&.
.br
\fIm\fP is a scalar variable of type int, that holds the number of entries in the vector b\&.
.br
\fIsol\fP is a one-dimensional array of size n + m and type double\&. on entry, its first n entries must hold the vector a, and the following entries must hold the vector b\&. On a successful exit, its first n entries contain the solution components x, and the following entries contain the components y\&. 
.RE
.PP

.SS "void sbls_information (void ** data, struct \fBsbls_inform_type\fP * inform, int * status)"
Provides output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBsbls_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void sbls_terminate (void ** data, struct \fBsbls_control_type\fP * control, struct \fBsbls_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBsbls_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBsbls_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD SBLS from the source code\&.
