.TH "galahad_ir.h" 3 "Tue May 2 2023" "C interfaces to GALAHAD IR" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_ir.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBir_control_type\fP"
.br
.ti -1c
.RI "struct \fBir_inform_type\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
Given a sparse symmetric n \\times n matrix A = a_{ij} and the factorization of A found by the GALAHAD package SLS, this package \fB solves the system of linear equations A x = b using iterative refinement\&.\fP
.PP
Currently, only the control and inform parameters are exposed; these are provided and used by other GALAHAD packages with C interfaces\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique MontrÃ©al\&.
.SS "Originally released"
October 2008, C interface January 2022 
.SH "Data Structure Documentation"
.PP 
.SH "struct ir_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit for error messages 
.br
.PP
int \fIout\fP unit for monitor output 
.br
.PP
int \fIprint_level\fP controls level of diagnostic output 
.br
.PP
int \fIitref_max\fP maximum number of iterative refinements allowed 
.br
.PP
real_wp_ \fIacceptable_residual_relative\fP refinement will cease as soon as the residual ||Ax-b|| falls below max( acceptable_residual_relative * ||b||, acceptable_residual_absolute ) 
.br
.PP
real_wp_ \fIacceptable_residual_absolute\fP see acceptable_residual_relative 
.br
.PP
real_wp_ \fIrequired_residual_relative\fP refinement will be judged to have failed if the residual ||Ax-b|| >= required_residual_relative * ||b||\&. No checking if required_residual_relative < 0 
.br
.PP
bool \fIrecord_residuals\fP record the initial and final residual 
.br
.PP
bool \fIspace_critical\fP if space is critical, ensure allocated arrays are no bigger than needed 
.br
.PP
bool \fIdeallocate_error_fatal\fP exit if any deallocation fails 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
.RE
.PP
.SH "struct ir_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP the return status\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0 the solution has been found\&. 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-11\&. Iterative refinement has not reduced the relative residual by more than control\&.required_relative_residual\&. 
.PP

.br
.PP
int \fIalloc_status\fP the status of the last attempted allocation/deallocation\&. 
.br
.PP
char \fIbad_alloc[81]\fP the name of the array for which an allocation/deallocation error occurred\&. 
.br
.PP
real_wp_ \fInorm_initial_residual\fP the infinity norm of the initial residual 
.br
.PP
real_wp_ \fInorm_final_residual\fP the infinity norm of the final residual 
.br
.PP
.RE
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD IR from the source code\&.
