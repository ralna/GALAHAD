.TH "galahad_llst.h" 3 "Fri Jun 2 2023" "C interfaces to GALAHAD LLST" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_llst.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_sbls\&.h'\fP
.br
\fC#include 'galahad_sls\&.h'\fP
.br
\fC#include 'galahad_ir\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBllst_control_type\fP"
.br
.ti -1c
.RI "struct \fBllst_time_type\fP"
.br
.ti -1c
.RI "struct \fBllst_history_type\fP"
.br
.ti -1c
.RI "struct \fBllst_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBllst_initialize\fP (void **data, struct \fBllst_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBllst_read_specfile\fP (struct \fBllst_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBllst_import\fP (struct \fBllst_control_type\fP *control, void **data, int *status, int m, int n, const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
.br
.ti -1c
.RI "void \fBllst_import_scaling\fP (struct \fBllst_control_type\fP *control, void **data, int *status, int n, const char S_type[], int S_ne, const int S_row[], const int S_col[], const int S_ptr[])"
.br
.ti -1c
.RI "void \fBllst_reset_control\fP (struct \fBllst_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBllst_solve_problem\fP (void **data, int *status, int m, int n, const real_wp_ radius, int A_ne, const real_wp_ A_val[], const real_wp_ b[], real_wp_ x[], int S_ne, const real_wp_ S_val[])"
.br
.ti -1c
.RI "void \fBllst_information\fP (void **data, struct \fBllst_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBllst_terminate\fP (void **data, struct \fBllst_control_type\fP *control, struct \fBllst_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
Given a real m by n matrix A, a real n by n symmetric diagonally dominant matrix S a real m vector b and a scalar Delta>0, this package finds a \fB minimizer of the linear least-squares objective function || A x - b ||_2, where the vector x is required to satisfy the constraint ||x||_S <= Delta,\fP where the S-norm of x is ||x||_S = sqrt{x^T S x}\&. This problem commonly occurs as a trust-region subproblem in nonlinear least-squares calculations\&. The package may also be used to solve the related problem in which x is instead required to satisfy the \fBequality constraint ||x||_{S} = Delta\fP\&. The matrix S need not be provided in the commonly-occurring l_2-trust-region case for which S = I, the n by n identity matrix\&.
.PP
Factorization of matrices of the form \[\mbox{(1)}\;\;\; K(lambda) = \mat{cc}{ lambda S & A^T \\ A & - I}\]  
\n
    (1)     K(lambda) = ( lambda S   A^T )
                        (      A     - I )
\n
 of scalars lambda will be required, so this package is most suited for the case where such a factorization may be found efficiently\&. If this is not the case, the GALAHAD package \fCLSTR\fP may be preferred\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.SS "Originally released"
October 2008, C interface May 2023\&.
.SS "Terminology"
The required solution x_* necessarily satisfies the optimality condition A^T A x_* + lambda_* S x_* = A^T b, where lambda_* >= 0 is a Lagrange multiplier corresponding to the constraint ||x||_S <= Delta; for the equality-constrained problem ||x||_S = Delta and the multiplier is unconstrained\&.
.SS "Method"
The method is iterative, and proceeds in two phases\&. Firstly, lower and upper bounds, lambda_L and lambda_U, on lambda_* are computed using Gershgorin's theorems and other eigenvalue bounds, including those that may involve the Cholesky factorization of S\&. The first phase of the computation proceeds by progressively shrinking the bound interval [lambda_L,lambda_U] until a value lambda for which ||x(lambda)||_M >= Delta is found\&. Here x(lambda) and its companion y(lambda) are defined to be a solution of  
  \f[\mbox{(2)}\;\;\; 
  (A^T A  + lambda S)x(lambda) = A^T b;\f]
\n
   (2)    (A^T A  + lambda S)x(lambda) = A^T b;
\n
 along the way the possibility that ||x(0)||_M <= Delta is examined, and if this transpires the process is terminated with x_* = x(0)\&. Once the terminating lambda from the first phase has been discovered, the second phase consists of applying Newton or higher-order iterations to the nonlinear ``secular'' equation ||x(lambda)||_M = Delta with the knowledge that such iterations are both globally and ultimately rapidly convergent\&.
.PP
The dominant cost is the requirement that we solve a sequence of linear systems (2)\&. This may be rewritten as \[\mbox{(3)}\;\;\; \mat{cc}{ lambda S & A^T \\ A & - I} \vect{x(lambda) \\ y(lambda)} = \vect{ A^T b \\ 0}\]  
\n
    (3)     ( lambda S   A^T ) ( x(lambda) ) = ( A^T b )
            (      A     - I ) ( y(lambda) )   (   0   )
\n
 for some auxiliary vector y(lambda)\&. In general a sparse symmetric, indefinite factorization of the coefficient matrix K(lambda) of (3) is often preferred to a Cholesky factorization of that of (2)\&.
.SS "Reference"
The method is the obvious adaptation to the linear least-squares problem of that described in detail in
.PP
H\&. S\&. Dollar, N\&. I\&. M\&. Gould and D\&. P\&. Robinson\&. On solving trust-region and other regularised subproblems in optimization\&. Mathematical Programming Computation \fB2(1)\fP (2010) 21--57\&.
.SS "Call order"
To solve a given problem, functions from the llst package must be called in the following order:
.PP
.IP "\(bu" 2
\fBllst_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBllst_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBllst_import\fP - set up problem data structures and fixed values
.IP "\(bu" 2
\fBllst_import_scaling\fP (optional) - set up problem data structures for S if required
.IP "\(bu" 2
\fBllst_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
\fBllst_solve_problem\fP - solve the trust-region problem
.IP "\(bu" 2
\fBllst_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBllst_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Unsymmetric matrix storage formats"
The unsymmetric m by n constraint matrix A may be presented and stored in a variety of convenient input formats\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. In this case, component n * i + j of the storage array A_val will hold the value A_{ij} for 0 <= i <= m-1, 0 <= j <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= i <= m-1, 0 <= j <= n-1, are stored as the l-th components of the integer arrays A_row and A_col and real array A_val, respectively, while the number of nonzeros is recorded as A_ne = ne\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array A_ptr holds the position of the first entry in this row, while A_ptr(m) holds the total number of entries\&. The column indices j, 0 <= j <= n-1, and values A_{ij} of the nonzero entries in the i-th row are stored in components l = A_ptr(i), \&.\&.\&., A_ptr(i+1)-1, 0 <= i <= m-1, of the integer array A_col, and real array A_val, respectively\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Symmetric matrix storage formats"
Likewise, the non-trivial symmetric n by n scaling matrix S may be presented and stored in a variety of formats\&. But crucially symmetry is exploited by only storing values from the lower triangular part (i\&.e, those entries that lie on or below the leading diagonal)\&.
.SS "Dense storage format"
The matrix S is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. Since S is symmetric, only the lower triangular part (that is the part s_{ij} for 0 <= j <= i <= n-1) need be held\&. In this case the lower triangle should be stored by rows, that is component i * i / 2 + j of the storage array S_val will hold the value s_{ij} (and, by symmetry, s_{ji}) for 0 <= j <= i <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of S, its row index i, column index j and value s_{ij}, 0 <= j <= i <= n-1, are stored as the l-th components of the integer arrays S_row and S_col and real array S_val, respectively, while the number of nonzeros is recorded as S_ne = ne\&. Note that only the entries in the lower triangle should be stored\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of S the i-th component of the integer array S_ptr holds the position of the first entry in this row, while S_ptr(n) holds the total number of entries\&. The column indices j, 0 <= j <= i, and values s_{ij} of the entries in the i-th row are stored in components l = S_ptr(i), \&.\&.\&., S_ptr(i+1)-1 of the integer array S_col, and real array S_val, respectively\&. Note that as before only the entries in the lower triangle should be stored\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Diagonal storage format"
If S is diagonal (i\&.e\&., s_{ij} = 0 for all 0 <= i /= j <= n-1) only the diagonals entries s_{ii}, 0 <= i <= n-1 need be stored, and the first n components of the array S_val may be used for the purpose\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct llst_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit for error messages 
.br
.PP
int \fIout\fP unit for monitor output 
.br
.PP
int \fIprint_level\fP controls level of diagnostic output 
.br
.PP
int \fInew_a\fP how much of A has changed since the previous call\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 unchanged 
.IP "\(bu" 2
1 values but not indices have changed 
.IP "\(bu" 2
2 values and indices have changed 
.PP

.br
.PP
int \fInew_s\fP how much of S has changed since the previous call\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 unchanged 
.IP "\(bu" 2
1 values but not indices have changed 
.IP "\(bu" 2
2 values and indices have changed 
.PP

.br
.PP
int \fImax_factorizations\fP the maximum number of factorizations (=iterations) allowed\&. -ve implies no limit 
.br
.PP
int \fItaylor_max_degree\fP maximum degree of Taylor approximant allowed (<= 3) 
.br
.PP
real_wp_ \fIinitial_multiplier\fP initial estimate of the Lagrange multipler 
.br
.PP
real_wp_ \fIlower\fP lower and upper bounds on the multiplier, if known 
.br
.PP
real_wp_ \fIupper\fP see lower 
.br
.PP
real_wp_ \fIstop_normal\fP stop when | ||x|| - radius | <= max( stop_normal * max( 1, radius ) 
.br
.PP
bool \fIequality_problem\fP is the solution is <b<required to lie on the boundary (i\&.e\&., is the constraint an equality)? 
.br
.PP
bool \fIuse_initial_multiplier\fP ignore initial_multiplier? 
.br
.PP
bool \fIspace_critical\fP if space is critical, ensure allocated arrays are no bigger than needed 
.br
.PP
bool \fIdeallocate_error_fatal\fP exit if any deallocation fails 
.br
.PP
char \fIdefinite_linear_solver[31]\fP definite linear equation solver 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct sbls_control_type \fIsbls_control\fP control parameters for the symmetric factorization and related linear solves (see sbls_c documentation) 
.br
.PP
struct sls_control_type \fIsls_control\fP control parameters for the factorization of S and related linear solves (see sls_c documentation) 
.br
.PP
struct ir_control_type \fIir_control\fP control parameters for iterative refinement for definite system solves (see ir_c documentation) 
.br
.PP
.RE
.PP
.SH "struct llst_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_wp_ \fItotal\fP total CPU time spent in the package 
.br
.PP
real_wp_ \fIassemble\fP CPU time assembling K(lambda) in (1) 
.br
.PP
real_wp_ \fIanalyse\fP CPU time spent analysing K(lambda) 
.br
.PP
real_wp_ \fIfactorize\fP CPU time spent factorizing K(lambda) 
.br
.PP
real_wp_ \fIsolve\fP CPU time spent solving linear systems inolving K(lambda) 
.br
.PP
real_wp_ \fIclock_total\fP total clock time spent in the package 
.br
.PP
real_wp_ \fIclock_assemble\fP clock time assembling K(lambda) 
.br
.PP
real_wp_ \fIclock_analyse\fP clock time spent analysing K(lambda) 
.br
.PP
real_wp_ \fIclock_factorize\fP clock time spent factorizing K(lambda) 
.br
.PP
real_wp_ \fIclock_solve\fP clock time spent solving linear systems inolving K(lambda) 
.br
.PP
.RE
.PP
.SH "struct llst_history_type"
.PP 
history derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_wp_ \fIlambda\fP the value of lambda 
.br
.PP
real_wp_ \fIx_norm\fP the corresponding value of ||x(lambda)||_M 
.br
.PP
real_wp_ \fIr_norm\fP the corresponding value of ||A x(lambda) - b||_2 
.br
.PP
.RE
.PP
.SH "struct llst_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP reported return status: 
.PD 0

.IP "\(bu" 2
0 the solution has been found 
.IP "\(bu" 2
-1 an array allocation has failed 
.IP "\(bu" 2
-2 an array deallocation has failed 
.IP "\(bu" 2
-3 n and/or Delta is not positive 
.IP "\(bu" 2
-10 the factorization of K(lambda) failed 
.IP "\(bu" 2
-15 S does not appear to be strictly diagonally dominant 
.IP "\(bu" 2
-16 ill-conditioning has prevented furthr progress 
.PP

.br
.PP
int \fIalloc_status\fP STAT value after allocate failure\&. 
.br
.PP
int \fIfactorizations\fP the number of factorizations performed 
.br
.PP
int \fIlen_history\fP the number of (||x||_S,lambda) pairs in the history 
.br
.PP
real_wp_ \fIr_norm\fP corresponding value of the two-norm of the residual, ||A x(lambda) - b|| 
.br
.PP
real_wp_ \fIx_norm\fP the S-norm of x, ||x||_S 
.br
.PP
real_wp_ \fImultiplier\fP the Lagrange multiplier corresponding to the trust-region constraint 
.br
.PP
char \fIbad_alloc[81]\fP name of array which provoked an allocate failure 
.br
.PP
struct \fBllst_time_type\fP \fItime\fP time information 
.br
.PP
struct \fBllst_history_type\fP \fIhistory[100]\fP history information 
.br
.PP
struct sbls_inform_type \fIsbls_inform\fP information from the symmetric factorization and related linear solves (see sbls_c documentation) 
.br
.PP
struct sls_inform_type \fIsls_inform\fP information from the factorization of S and related linear solves (see sls_c documentation) 
.br
.PP
struct ir_inform_type \fIir_inform\fP information from the iterative refinement for definite system solves (see ir_c documentation) 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void llst_initialize (void ** data, struct \fBllst_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBllst_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void llst_read_specfile (struct \fBllst_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBllst_control_type\fP) 
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void llst_import (struct \fBllst_control_type\fP * control, void ** data, int * status, int m, int n, const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
Import problem data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBllst_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal' or 'absent' has been violated\&.
.PP
.br
\fIm\fP is a scalar variable of type int, that holds the number of residuals, i\&.e\&., the number of rows of A\&. m must be positive\&.
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables, i\&.e\&., the number of columns of A\&. n must be positive\&.
.br
\fIA_type\fP is a one-dimensional array of type char that specifies the \fBunsymmetric storage scheme \fP used for the constraint Jacobian, A if any\&. It should be one of 'coordinate', 'sparse_by_rows' or 'dense'; lower or upper case variants are allowed\&.
.br
\fIA_ne\fP is a scalar variable of type int, that holds the number of entries in A, if used, in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIA_row\fP is a one-dimensional array of size A_ne and type int, that holds the row indices of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes, and in this case can be NULL\&.
.br
\fIA_col\fP is a one-dimensional array of size A_ne and type int, that holds the column indices of A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense or diagonal storage schemes are used, and in this case can be NULL\&.
.br
\fIA_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void llst_import_scaling (struct \fBllst_control_type\fP * control, void ** data, int * status, int n, const char S_type[], int S_ne, const int S_row[], const int S_col[], const int S_ptr[])"
Import the scaling matrix S into internal storage prior to solution\&. Thus must have been preceeded by a call to llst_import\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBllst_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables, i\&.e\&., the number of rows and columns of S\&. n must be positive\&.
.br
\fIS_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the matrix S\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense' or 'diagonal'; lower or upper case variants are allowed\&.
.br
\fIS_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of S in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIS_row\fP is a one-dimensional array of size S_ne and type int, that holds the row indices of the lower triangular part of S in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIS_col\fP is a one-dimensional array of size S_ne and type int, that holds the column indices of the lower triangular part of S in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense, diagonal or (scaled) identity storage schemes are used, and in this case can be NULL\&.
.br
\fIS_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of S, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void llst_reset_control (struct \fBllst_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBllst_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.PP
.RE
.PP

.SS "void llst_solve_problem (void ** data, int * status, int m, int n, const real_wp_ radius, int A_ne, const real_wp_ A_val[], const real_wp_ b[], real_wp_ x[], int S_ne, const real_wp_ S_val[])"
Solve the trust-region problem\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the entry and exit status from the package\&. 
.br
 Possible exit are: 
.PD 0

.IP "\(bu" 2
0\&. The run was succesful\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 and m > 0 or requirement that A_type or A_type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&. 
.IP "\(bu" 2
-9\&. The analysis phase of the factorization failed; the return status from the factorization package is given in the component inform\&.factor_status 
.IP "\(bu" 2
-10\&. The factorization failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-11\&. The solution of a set of linear equations using factors from the factorization package failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-15\&. The matrix S does not appear to be strictly diagonally dominant\&. 
.IP "\(bu" 2
-16\&. The problem is so ill-conditioned that further progress is impossible\&. 
.IP "\(bu" 2
-17\&. The step is too small to make further impact\&.
.PP
.br
\fIm\fP is a scalar variable of type int, that holds the number of residuals
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables
.br
\fIradius\fP is a scalar of type double, that holds the trust-region radius, Delta, used\&. radius must be strictly positive
.br
\fIA_ne\fP is a scalar variable of type int, that holds the number of entries in the observation matrix A\&.
.br
\fIA_val\fP is a one-dimensional array of size A_ne and type double, that holds the values of the entries of the observation matrix A in any of the available storage schemes\&.
.br
\fIb\fP is a one-dimensional array of size m and type double, that holds the values b of observations\&. The i-th component of b, i = 0, \&.\&.\&. , m-1, contains b_i\&.
.br
\fIx\fP is a one-dimensional array of size n and type double, that holds the values x of the optimization variables\&. The j-th component of x, j = 0, \&.\&.\&. , n-1, contains x_j\&.
.br
\fIS_ne\fP is a scalar variable of type int, that holds the number of entries in the scaling matrix S if it not the identity matrix\&.
.br
\fIS_val\fP is a one-dimensional array of size S_ne and type double, that holds the values of the entries of the scaling matrix S in any of the available storage schemes\&. If S_val is NULL, S will be taken to be the identity matrix\&. 
.RE
.PP

.SS "void llst_information (void ** data, struct \fBllst_inform_type\fP * inform, int * status)"
Provides output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBllst_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void llst_terminate (void ** data, struct \fBllst_control_type\fP * control, struct \fBllst_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBllst_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBllst_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD LLST from the source code\&.
