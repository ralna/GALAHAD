.TH "galahad_roots.h" 3 "Wed May 3 2023" "C interfaces to GALAHAD ROOTS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_roots.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBroots_control_type\fP"
.br
.ti -1c
.RI "struct \fBroots_inform_type\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
Use classical formulae together with Newton’s method to find all the real roots of a real polynomial\&.
.PP
Currently, only the control and inform parameters are exposed; these are provided and used by other GALAHAD packages with C interfaces\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique Montréal\&.
.SS "Originally released"
April 2005, C interface January 2022\&.
.SS "Method"
Littlewood and Ferrari's algorithms are used to find estimates of the real roots of cubic and quartic polynomials, respectively; a stabilized version of the well-known formula is used in the quadratic case\&. Newton's method is used to further refine the computed roots if necessary\&. Madsen and Reid's method is used for polynomials whose degree exceeds four\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct roots_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP error and warning diagnostics occur on stream error 
.br
.PP
int \fIout\fP general output occurs on stream out 
.br
.PP
int \fIprint_level\fP the level of output required is specified by print_level 
.br
.PP
real_wp_ \fItol\fP the required accuracy of the roots 
.br
.PP
real_wp_ \fIzero_coef\fP any coefficient smaller in absolute value than zero_coef will be regarde to be zero 
.br
.PP
real_wp_ \fIzero_f\fP any value of the polynomial smaller in absolute value than zero_f will be regarded as giving a root 
.br
.PP
bool \fIspace_critical\fP if \&.space_critical true, every effort will be made to use as little space as possible\&. This may result in longer computation time 
.br
.PP
bool \fIdeallocate_error_fatal\fP if \&.deallocate_error_fatal is true, any array/pointer deallocation error will terminate execution\&. Otherwise, computation will continue 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by \&.prefix(2:LEN(TRIM(\&.prefix))-1) where \&.prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
.RE
.PP
.SH "struct roots_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP return status\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0 the call was successful\&. 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. Either the specified degree of the polynomial in degree is less than 0, or the declared dimension of the array roots is smaller than the specified degree\&. 
.PP

.br
.PP
int \fIalloc_status\fP the status of the last attempted allocation/deallocation 
.br
.PP
char \fIbad_alloc[81]\fP the name of the array for which an allocation/deallocation error occurred 
.br
.PP
.RE
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD ROOTS from the source code\&.
