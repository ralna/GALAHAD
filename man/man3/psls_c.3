.TH "galahad_psls.h" 3 "Sun Apr 2 2023" "C interfaces to GALAHAD PSLS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_psls.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_sls\&.h'\fP
.br
\fC#include 'hsl_mi28\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBpsls_control_type\fP"
.br
.ti -1c
.RI "struct \fBpsls_time_type\fP"
.br
.ti -1c
.RI "struct \fBpsls_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBpsls_initialize\fP (void **data, struct \fBpsls_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBpsls_read_specfile\fP (struct \fBpsls_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBpsls_import\fP (struct \fBpsls_control_type\fP *control, void **data, int *status, int n, const char type[], int ne, const int row[], const int col[], const int ptr[])"
.br
.ti -1c
.RI "void \fBpsls_reset_control\fP (struct \fBpsls_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBpsls_form_preconditioner\fP (void **data, int *status, int ne, const real_wp_ val[])"
.br
.ti -1c
.RI "void \fBpsls_form_subset_preconditioner\fP (void **data, int *status, int ne, const real_wp_ val[], int n_sub, const int sub[])"
.br
.ti -1c
.RI "void \fBpsls_update_preconditioner\fP (void **data, int *status, int ne, const real_wp_ val[], int n_del, const int del[])"
.br
.ti -1c
.RI "void \fBpsls_apply_preconditioner\fP (void **data, int *status, int n, real_wp_ sol[])"
.br
.ti -1c
.RI "void \fBpsls_information\fP (void **data, struct \fBpsls_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBpsls_terminate\fP (void **data, struct \fBpsls_control_type\fP *control, struct \fBpsls_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
Given an n by n sparse symmetric matrix A =a_{ij}, this package \fBbuilds a suitable symmetric, positive definite (or diagonally dominant)-preconditioner P of A or a symmetric sub-matrix thereof\fP\&. The matrix A need not be definite\&. Facilities are provided to apply the preconditioner to a given vector, and to remove rows and columns (symmetrically) from the initial preconditioner without a full re-factorization\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique Montr√©al\&.
.SS "Originally released"
April 2008, C interface January 2022\&.
.SS "Method and references"
The basic preconditioners are described in detail in
.PP
A\&. R\&. Conn, N\&. I\&. M\&. Gould and Ph\&. L\&. Toint (1992)\&. LANCELOT\&. A fortran package for large-scale nonlinear optimization (release A)\&. Springer Verlag Series in Computational Mathematics 17, Berlin, Section 3\&.3\&.10,
.PP
along with the more modern versions implements in ICFS due to
.PP
C\&.-J\&. Lin and J\&. J\&. More' (1999)\&. Incomplete Cholesky factorizations with limited memory\&. SIAM Journal on Scientific Computing \fB21\fP 21-45,
.PP
and in HSL_MI28 described by
.PP
J\&. A\&. Scott and M\&. Tuma (2013)\&. HSL MI28: an efficient and robust limited-memory incomplete Cholesky factorization code\&. ACM Transactions on Mathematical Software \fB40(4)\fP (2014), Article 24\&.
.PP
The factorization methods used by the GALAHAD package SLS in conjunction with some preconditioners are described in the documentation to that package\&. The key features of the external solvers supported by SLS are given in the following table\&.
.PP
 
(ignore next paragraph - doxygen bug!)
.PP
External solver characteristicssolver factorization indefinite A out-of-core parallelised \fCSILS/MA27\fP multifrontal yes no no \fCHSL_MA57\fP multifrontal yes no no \fCHSL_MA77\fP multifrontal yes yes OpenMP core \fCHSL_MA86\fP left-looking yes no OpenMP fully \fCHSL_MA87\fP left-looking no no OpenMP fully \fCHSL_MA97\fP multifrontal yes no OpenMP core \fCSSIDS\fP multifrontal yes no CUDA core \fCMUMPS\fP multifrontal yes optionally MPI \fCPARDISO\fP left-right-looking yes no OpenMP fully \fCMKL_PARDISO\fP left-right-looking yes optionally OpenMP fully \fCPaStix\fP left-right-looking yes no OpenMP fully \fCWSMP\fP left-right-looking yes no OpenMP fully \fCPOTR\fP dense no no with parallel LAPACK \fCSYTR\fP dense yes no with parallel LAPACK \fCPBTR\fP dense band no no with parallel LAPACK 
.PP
 
External solver characteristics (ooc = out-of-core factorization)

 solver     factorization indefinite A  ooc    parallelised
 SILS/MA27   multifrontal          yes   no    no
 HSL_MA57    multifrontal          yes   no    no
 HSL_MA77    multifrontal          yes  yes    OpenMP core
 HSL_MA86    left-looking          yes   no    OpenMP fully
 HSL_MA87    left-looking           no   no    OpenMP fully
 HSL_MA97    multifrontal          yes   no    OpenMP core
 SSIDS       multifrontal          yes   no    CUDA core
 MUMPS       multifrontal          yes  optionally  MPI
 PARDISO     left-right-looking    yes   no    OpenMP fully
 MKL_PARDISO left-right-looking    yes  optionally  OpenMP fully
 PaStix      left-right-looking    yes   no    OpenMP fully
 WSMP        left-right-looking    yes   no    OpenMP fully
 POTR        dense                  no   no    with parallel LAPACK
 SYTR        dense                 yes   no    with parallel LAPACK
 PBTR        dense band             no   no    with parallel LAPACK
.PP
Note that \fB the solvers themselves do not form part of this package and must be obtained separately\&.\fP Dummy instances are provided for solvers that are unavailable\&.
.PP
Orderings to reduce the bandwidth, as implemented in HSL's MC61, are due to
.PP
J\&. K\&. Reid and J\&. A\&. Scott (1999) Ordering symmetric sparse matrices for small profile and wavefront International Journal for Numerical Methods in Engineering \fB45\fP 1737-1755\&.
.PP
If a subset of the rows and columns are specified, the remaining rows/columns are removed before processing\&. Any subsequent removal of rows and columns is achieved using the GALAHAD Schur-complement updating package SCU unless a complete re-factorization is likely more efficient\&.
.SS "Call order"
To solve a given problem, functions from the psls package must be called in the following order:
.PP
.IP "\(bu" 2
\fBpsls_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBpsls_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBpsls_import\fP - set up matrix data structures for A prior to solution
.IP "\(bu" 2
\fBpsls_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
one of
.IP "  \(bu" 4
\fBpsls_form_preconditioner\fP - form and factorize a preconditioner P of the matrix A
.IP "  \(bu" 4
\fBpsls_form_subset_preconditioner\fP - form and factorize a preconditioner P of a symmetric submatrix of the matrix A
.PP

.IP "\(bu" 2
\fBpsls_update_preconditioner\fP (optional) - update the preconditioner P when rows (amd columns) are removed
.IP "\(bu" 2
\fBpsls_apply_preconditioner\fP - solve the linear system of equations Px=b
.IP "\(bu" 2
\fBpsls_information\fP (optional) - recover information about the preconditioner and solution process
.IP "\(bu" 2
\fBpsls_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Symmetric matrix storage formats"
The symmetric n by n coefficient matrix A may be presented and stored in a variety of convenient input formats\&. Crucially symmetry is exploited by only storing values from the lower triangular part (i\&.e, those entries that lie on or below the leading diagonal)\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. Since A is symmetric, only the lower triangular part (that is the part A_{ij} for 0 <= j <= i <= n-1) need be held\&. In this case the lower triangle should be stored by rows, that is component i * i / 2 + j of the storage array val will hold the value A_{ij} (and, by symmetry, A_{ji}) for 0 <= j <= i <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= j <= i <= n-1, are stored as the l-th components of the integer arrays row and col and real array val, respectively, while the number of nonzeros is recorded as ne = ne\&. Note that only the entries in the lower triangle should be stored\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array ptr holds the position of the first entry in this row, while ptr(n) holds the total number of entries\&. The column indices j, 0 <= j <= i, and values A_{ij} of the entries in the i-th row are stored in components l = ptr(i), \&.\&.\&., ptr(i+1)-1 of the integer array col, and real array val, respectively\&. Note that as before only the entries in the lower triangle should be stored\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct psls_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit for error messages 
.br
.PP
int \fIout\fP unit for monitor output 
.br
.PP
int \fIprint_level\fP controls level of diagnostic output 
.br
.PP
int \fIpreconditioner\fP which preconditioner to use: 
.PD 0

.IP "\(bu" 2
<0 no preconditioning occurs, P = I 
.IP "\(bu" 2
0 the preconditioner is chosen automatically (forthcoming, and currently defaults to 1)\&. 
.IP "\(bu" 2
1 A is replaced by the diagonal, P = diag( max( A, \&.min_diagonal ) )\&. 
.IP "\(bu" 2
2 A is replaced by the band P = band( A ) with semi-bandwidth \&.semi_bandwidth\&. 
.IP "\(bu" 2
3 A is replaced by the reordered band P = band( order( A ) ) with semi-bandwidth \&.semi_bandwidth, where order is chosen by the HSL package MC61 to move entries closer to the diagonal\&. 
.IP "\(bu" 2
4 P is a full factorization of A using Schnabel-Eskow modifications, in which small or negative diagonals are made sensibly positive during the factorization\&. 
.IP "\(bu" 2
5 P is a full factorization of A due to Gill, Murray, Ponceleon and Saunders, in which an indefinite factorization is altered to give a positive definite one\&. 
.IP "\(bu" 2
6 P is an incomplete Cholesky factorization of A using the package ICFS due to Lin and More'\&. 
.IP "\(bu" 2
7 P is an incomplete factorization of A implemented as HSL_MI28 from HSL\&. 
.IP "\(bu" 2
8 P is an incomplete factorization of A due to Munskgaard (forthcoming)\&. 
.IP "\(bu" 2
>8 treated as 0\&.
.PP
\fBN\&.B\&.\fP Options 3-8 may require additional external software that is not part of the package, and that must be obtained separately\&. 
.br
.PP
int \fIsemi_bandwidth\fP the semi-bandwidth for band(H) when \&.preconditioner = 2,3 
.br
.PP
int \fIscaling\fP not used at present 
.br
.PP
int \fIordering\fP see scaling 
.br
.PP
int \fImax_col\fP maximum number of nonzeros in a column of A for Schur-complement factorization to accommodate newly deleted rpws and columns 
.br
.PP
int \fIicfs_vectors\fP number of extra vectors of length n required by the Lin-More' incomplete Cholesky preconditioner when \&.preconditioner = 6 
.br
.PP
int \fImi28_lsize\fP the maximum number of fill entries within each column of the incomplete factor L computed by HSL_MI28 when \&.preconditioner = 7\&. In general, increasing mi28_lsize improve the quality of the preconditioner but increases the time to compute and then apply the preconditioner\&. Values less than 0 are treated as 0 
.br
.PP
int \fImi28_rsize\fP the maximum number of entries within each column of the strictly lower triangular matrix R used in the computation of the preconditioner by HSL_MI28 when \&.preconditioner = 7\&. Rank-1 arrays of size \&.mi28_rsize * n are allocated internally to hold R\&. Thus the amount of memory used, as well as the amount of work involved in computing the preconditioner, depends on mi28_rsize\&. Setting mi28_rsize > 0 generally leads to a higher quality preconditioner than using mi28_rsize = 0, and choosing mi28_rsize >= mi28_lsize is generally recommended 
.br
.PP
real_wp_ \fImin_diagonal\fP the minimum permitted diagonal in diag(max(H,\&.min_diagonal)) 
.br
.PP
bool \fInew_structure\fP set new_structure true if the storage structure for the input matrix has changed, and false if only the values have changed 
.br
.PP
bool \fIget_semi_bandwidth\fP set get_semi_bandwidth true if the semi-bandwidth of the submatrix is to be calculated 
.br
.PP
bool \fIget_norm_residual\fP set get_norm_residual true if the residual when applying the preconditioner are to be calculated 
.br
.PP
bool \fIspace_critical\fP if space is critical, ensure allocated arrays are no bigger than needed 
.br
.PP
bool \fIdeallocate_error_fatal\fP exit if any deallocation fails 
.br
.PP
char \fIdefinite_linear_solver[31]\fP the definite linear equation solver used when \&.preconditioner = 3,4\&. Possible choices are currently: sils, ma27, ma57, ma77, ma86, ma87, ma97, ssids, mumps, pardiso, mkl_pardiso,pastix, wsmp, potr and pbtr, although only sils, potr, pbtr and, for OMP 4\&.0-compliant compilers, ssids are installed by default\&. 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct sls_control_type \fIsls_control\fP control parameters for SLS 
.br
.PP
struct mi28_control \fImi28_control\fP control parameters for HSL_MI28 
.br
.PP
.RE
.PP
.SH "struct psls_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_sp_ \fItotal\fP total time 
.br
.PP
real_sp_ \fIassemble\fP time to assemble the preconditioner prior to factorization 
.br
.PP
real_sp_ \fIanalyse\fP time for the analysis phase 
.br
.PP
real_sp_ \fIfactorize\fP time for the factorization phase 
.br
.PP
real_sp_ \fIsolve\fP time for the linear solution phase 
.br
.PP
real_sp_ \fIupdate\fP time to update the factorization 
.br
.PP
real_wp_ \fIclock_total\fP total clock time spent in the package 
.br
.PP
real_wp_ \fIclock_assemble\fP clock time to assemble the preconditioner prior to factorization 
.br
.PP
real_wp_ \fIclock_analyse\fP clock time for the analysis phase 
.br
.PP
real_wp_ \fIclock_factorize\fP clock time for the factorization phase 
.br
.PP
real_wp_ \fIclock_solve\fP clock time for the linear solution phase 
.br
.PP
real_wp_ \fIclock_update\fP clock time to update the factorization 
.br
.PP
.RE
.PP
.SH "struct psls_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP reported return status: 
.PD 0

.IP "\(bu" 2
0 success 
.IP "\(bu" 2
-1 allocation error 
.IP "\(bu" 2
-2 deallocation error 
.IP "\(bu" 2
-3 matrix data faulty (\&.n < 1, \&.ne < 0) 
.PP

.br
.PP
int \fIalloc_status\fP STAT value after allocate failure\&. 
.br
.PP
int \fIanalyse_status\fP status return from factorization 
.br
.PP
int \fIfactorize_status\fP status return from factorization 
.br
.PP
int \fIsolve_status\fP status return from solution phase 
.br
.PP
int64_t \fIfactorization_integer\fP number of integer words to hold factors 
.br
.PP
int64_t \fIfactorization_real\fP number of real words to hold factors 
.br
.PP
int \fIpreconditioner\fP code for the actual preconditioner used (see control\&.preconditioner) 
.br
.PP
int \fIsemi_bandwidth\fP the actual semi-bandwidth 
.br
.PP
int \fIreordered_semi_bandwidth\fP the semi-bandwidth following reordering (if any) 
.br
.PP
int \fIout_of_range\fP number of indices out-of-range 
.br
.PP
int \fIduplicates\fP number of duplicates 
.br
.PP
int \fIupper\fP number of entries from the strict upper triangle 
.br
.PP
int \fImissing_diagonals\fP number of missing diagonal entries for an allegedly-definite matrix 
.br
.PP
int \fIsemi_bandwidth_used\fP the semi-bandwidth used 
.br
.PP
int \fIneg1\fP number of 1 by 1 pivots in the factorization 
.br
.PP
int \fIneg2\fP number of 2 by 2 pivots in the factorization 
.br
.PP
bool \fIperturbed\fP has the preconditioner been perturbed during the fctorization? 
.br
.PP
real_wp_ \fIfill_in_ratio\fP ratio of fill in to original nonzeros 
.br
.PP
real_wp_ \fInorm_residual\fP the norm of the solution residual 
.br
.PP
char \fIbad_alloc[81]\fP name of array which provoked an allocate failure 
.br
.PP
int \fImc61_info[10]\fP the integer and real output arrays from mc61 
.br
.PP
real_wp_ \fImc61_rinfo[15]\fP see mc61_info 
.br
.PP
struct \fBpsls_time_type\fP \fItime\fP times for various stages 
.br
.PP
struct sls_inform_type \fIsls_inform\fP inform values from SLS 
.br
.PP
struct mi28_info \fImi28_info\fP the output structure from mi28 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void psls_initialize (void ** data, struct \fBpsls_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBpsls_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void psls_read_specfile (struct \fBpsls_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNPSLS\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/psls\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBpsls_control_type\fP) 
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void psls_import (struct \fBpsls_control_type\fP * control, void ** data, int * status, int n, const char type[], int ne, const int row[], const int col[], const int ptr[])"
Import structural matrix data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBpsls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of rows in the symmetric matrix A\&.
.br
\fItype\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the matrix A\&. It should be one of 'coordinate', 'sparse_by_rows' or 'dense'; lower or upper case variants are allowed\&.
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIrow\fP is a one-dimensional array of size ne and type int, that holds the row indices of the lower triangular part of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIcol\fP is a one-dimensional array of size ne and type int, that holds the column indices of the lower triangular part of A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense storage scheme is used, and in this case can be NULL\&.
.br
\fIptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void psls_reset_control (struct \fBpsls_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBpsls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.PP
.RE
.PP

.SS "void psls_form_preconditioner (void ** data, int * status, int ne, const real_wp_ val[])"
Form and factorize a preconditioner P of the matrix A\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The factors were generated succesfully\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-26\&. The requested solver is not available\&. 
.IP "\(bu" 2
-29\&. This option is not available with this solver\&.
.PP
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the symmetric matrix A\&.
.br
\fIval\fP is a one-dimensional array of size ne and type double, that holds the values of the entries of the lower triangular part of the symmetric matrix A in any of the supported storage schemes\&. 
.RE
.PP

.SS "void psls_form_subset_preconditioner (void ** data, int * status, int ne, const real_wp_ val[], int n_sub, const int sub[])"
Form and factorize a P preconditioner of a symmetric submatrix of the matrix A\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The factors were generated succesfully\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-26\&. The requested solver is not available\&. 
.IP "\(bu" 2
-29\&. This option is not available with this solver\&.
.PP
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the symmetric matrix A\&.
.br
\fIval\fP is a one-dimensional array of size ne and type double, that holds the values of the entries of the lower triangular part of the symmetric matrix A in any of the supported storage schemes\&.
.br
\fIn_sub\fP is a scalar variable of type int, that holds the number of rows (and columns) of the required submatrix of A\&.
.br
\fIsub\fP is a one-dimensional array of size n_sub and type int, that holds the indices of the rows of required submatrix\&. 
.RE
.PP

.SS "void psls_update_preconditioner (void ** data, int * status, int ne, const real_wp_ val[], int n_del, const int del[])"
Update the preconditioner P when rows (amd columns) are removed\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The factors were generated succesfully\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-26\&. The requested solver is not available\&. 
.IP "\(bu" 2
-29\&. This option is not available with this solver\&.
.PP
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the symmetric matrix A\&.
.br
\fIval\fP is a one-dimensional array of size ne and type double, that holds the values of the entries of the lower triangular part of the symmetric matrix A in any of the supported storage schemes\&.
.br
\fIn_del\fP is a scalar variable of type int, that holds the number of rows (and columns) of (sub) matrix that are to be deleted\&.
.br
\fIdel\fP is a one-dimensional array of size n_fix and type int, that holds the indices of the rows that are to be deleted\&. 
.RE
.PP

.SS "void psls_apply_preconditioner (void ** data, int * status, int n, real_wp_ sol[])"
Solve the linear system Px=b\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The required solution was obtained\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of entries in the vectors b and x\&.
.br
\fIsol\fP is a one-dimensional array of size n and type double\&. On entry, it must hold the vector b\&. On a successful exit, its contains the solution x\&. Any component corresponding to rows/columns not in the initial subset recorded by psls_form_subset_preconditioner, or in those subsequently deleted by psls_update_preconditioner, will not be altered\&. 
.RE
.PP

.SS "void psls_information (void ** data, struct \fBpsls_inform_type\fP * inform, int * status)"
Provide output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBpsls_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void psls_terminate (void ** data, struct \fBpsls_control_type\fP * control, struct \fBpsls_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBpsls_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBpsls_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD PSLS from the source code\&.
