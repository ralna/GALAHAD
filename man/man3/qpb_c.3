.TH "galahad_qpb.h" 3 "Sun Apr 16 2023" "C interfaces to GALAHAD QPB" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_qpb.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_lsqp\&.h'\fP
.br
\fC#include 'galahad_fdc\&.h'\fP
.br
\fC#include 'galahad_sbls\&.h'\fP
.br
\fC#include 'galahad_gltr\&.h'\fP
.br
\fC#include 'galahad_fit\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBqpb_control_type\fP"
.br
.ti -1c
.RI "struct \fBqpb_time_type\fP"
.br
.ti -1c
.RI "struct \fBqpb_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBqpb_initialize\fP (void **data, struct \fBqpb_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBqpb_read_specfile\fP (struct \fBqpb_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBqpb_import\fP (struct \fBqpb_control_type\fP *control, void **data, int *status, int n, int m, const char H_type[], int H_ne, const int H_row[], const int H_col[], const int H_ptr[], const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
.br
.ti -1c
.RI "void \fBqpb_reset_control\fP (struct \fBqpb_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBqpb_solve_qp\fP (void **data, int *status, int n, int m, int h_ne, const real_wp_ H_val[], const real_wp_ g[], const real_wp_ f, int a_ne, const real_wp_ A_val[], const real_wp_ c_l[], const real_wp_ c_u[], const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ c[], real_wp_ y[], real_wp_ z[], int x_stat[], int c_stat[])"
.br
.ti -1c
.RI "void \fBqpb_information\fP (void **data, struct \fBqpb_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBqpb_terminate\fP (void **data, struct \fBqpb_control_type\fP *control, struct \fBqpb_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
This package uses a primal-dual interior-point trust-region method to solve the \fBquadratic programming problem\fP \[\mbox{minimize}\;\; q(x) = 1/2 x^T H x + g^T x + f \]  
  \n
  minimize q(x) := 1/2 x^T H x + g^T x + f
  \n
 subject to the general linear constraints \[c_i^l <= a_i^Tx <= c_i^u, \;\;\; i = 1, ... , m,\]  
  \n
   c_i^l \[<=] a_i^Tx \[<=] c_i^u, i = 1, ... , m,
  \n
 and the simple bound constraints \[x_j^l <= x_j <= x_j^u, \;\;\; j = 1, ... , n,\]  
  \n
   x_j^l \[<=] x_j \[<=] x_j^u, j = 1, ... , n,
  \n
 where the n by n symmetric matrix H, the vectors g, a_i, c^l, c^u, x^l, x^u and the scalar f are given\&. Any of the constraint bounds c_i^l, c_i^u, x_j^l and x_j^u may be infinite\&. Full advantage is taken of any zero coefficients in the matrix H or the matrix A of vectors a_i\&.
.PP
If the matrix H is positive semi-definite, a global solution is found\&. However, if H is indefinite, the procedure may find a (weak second-order) critical point that is not the global solution to the given problem\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England, and Philippe L\&. Toint, University of Namur, Belgium\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique MontrÃ©al\&.
.SS "Originally released"
December 1999, C interface January 2022\&.
.SS "Terminology"
The required solution x necessarily satisfies the primal optimality conditions \[\mbox{(1a) $\hspace{66mm} A x = c\hspace{66mm}$}\]  
  \n
  (1a) A x = c
  \n
 and \[\mbox{(1b) $\hspace{52mm} c^l <= c <= c^u, \;\; x^l <= x <= x^u,\hspace{52mm}$} \]  
  \n
  (1b) c^l \[<=] c \[<=] c^u, x^l \[<=] x \[<=] x^u,
  \n
 the dual optimality conditions \[\mbox{(2a) $\hspace{58mm} H x + g = A^T y + z\hspace{58mm}$}\]  
  \n
  (2a) H x + g = A^T y + z
  \n
 where \[\mbox{(2b) $\hspace{24mm} y = y^l + y^u, \;\; z = z^l + z^u, \,\, y^l >= 0 , \;\; y^u <= 0 , \;\; z^l >= 0 \;\; \mbox{and} \;\; z^u <= 0,\hspace{24mm}$} \]  
  \n
   (2b) y = y^l + y^u, z = z^l + z^u, y^l \[>=] 0, y^u \[<=] 0,
        z^l \[>=] 0 and z^u \[<=] 0,
  \n
 and the complementary slackness conditions \[\mbox{(3) $\hspace{12mm} ( A x - c^l )^T y^l = 0 ,\;\; ( A x - c^u )^T y^u = 0 ,\;\; (x -x^l )^T z^l = 0 \;\; \mbox{and} \;\; (x -x^u )^T z^u = 0,\hspace{12mm} $}\]  
  \n
  (3) (A x - c^l)^T y^l = 0, (A x - c^u)^T y^u = 0,
      (x -x^l)^T z^l = 0 and (x -x^u)^T z^u = 0,
  \n
 where the vectors y and z are known as the Lagrange multipliers for2 the general linear constraints, and the dual variables for the bounds, respectively, and where the vector inequalities hold component-wise\&.
.SS "Method"
Primal-dual interior point methods iterate towards a point that satisfies these conditions by ultimately aiming to satisfy (1a), (2a) and (3), while ensuring that (1b) and (2b) are satisfied as strict inequalities at each stage\&. Appropriate norms of the amounts by which (1a), (2a) and (3) fail to be satisfied are known as the primal and dual infeasibility, and the violation of complementary slackness, respectively\&. The fact that (1b) and (2b) are satisfied as strict inequalities gives such methods their other title, namely interior-point methods\&.
.PP
The problem is solved in two phases\&. The goal of the first 'initial
  feasible point' phase is to find a strictly interior point which is primal feasible, that is that {1a} is satisfied\&. The GALAHAD package LSQP is used for this purpose, and offers the options of either accepting the first strictly feasible point found, or preferably of aiming for the so-called 'analytic center' of the feasible region\&. Having found such a suitable initial feasible point, the second 'optimality' phase ensures that \\req{4\&.1a} remains satisfied while iterating to satisfy dual feasibility (2a) and complementary slackness (3)\&. The optimality phase proceeds by approximately minimizing a sequence of barrier functions    
  \n
                  1/2 x^T H x + g^T x + f -
   mu [ sum_{i=1}^m log (c_i-c_i^l)  + sum_{i=1}^m log (c_i^u-c_i ) +
        sum_{j=1}^n log (x_j-x_j^l ) + sum_{j=1}^n log (x_j^u-x_j ) ]
  \n
 for an approriate sequence of positive barrier parameters \\mu converging to zero while ensuring that (1a) remain satisfied and that x and c are strictly interior points for (1b)\&. Note that terms in the above sumations corresponding to infinite bounds are ignored, and that equality constraints are treated specially\&.
.PP
Each of the barrier subproblems is solved using a trust-region method\&. Such a method generates a trial correction step Delta (x, c) to the current iterate (x, c) by replacing the nonlinear barrier function locally by a suitable quadratic model, and approximately minimizing this model in the intersection of \\req{4\&.1a} and a trust region ||Delta (x, c)|| <= Delta for some appropriate strictly positive trust-region radius Delta and norm || * ||\&. The step is accepted/rejected and the radius adjusted on the basis of how accurately the model reproduces the value of barrier function at the trial step\&. If the step proves to be unacceptable, a linesearch is performed along the step to obtain an acceptable new iterate\&. In practice, the natural primal 'Newton' model of the barrier function is frequently less successful than an alternative primal-dual model, and consequently the primal-dual model is usually to be preferred\&.
.PP
Once a barrier subproblem has been solved, extrapolation based on values and derivatives encountered on the central path is optionally used to determine a good starting point for the next subproblem\&. Traditional Taylor-series extrapolation has been superceded by more accurate Puiseux-series methods as these are particularly suited to deal with degeneracy\&.
.PP
The trust-region subproblem is approximately solved using the combined conjugate-gradient/Lanczos method implemented in the GALAHAD package GLTR\&. Such a method requires a suitable preconditioner, and in our case, the only flexibility we have is in approximating the model of the Hessian\&. Although using a fixed form of preconditioning is sometimes effective, we have provided the option of an automatic choice, that aims to balance the cost of applying the preconditioner against the needs for an accurate solution of the trust-region subproblem\&. The preconditioner is applied using the GALAHAD matrix factorization package SBLS, but options at this stage are to factorize the preconditioner as a whole (the so-called 'augmented system' approach), or to perform a block elimination first (the 'Schur-complement' approach)\&. The latter is usually to be prefered when a (non-singular) diagonal preconditioner is used, but may be inefficient if any of the columns of A is too dense\&.
.PP
In order to make the solution as efficient as possible, the variables and constraints are reordered internally by the GALAHAD package QPP prior to solution\&. In particular, fixed variables, and free (unbounded on both sides) constraints are temporarily removed\&.
.SS "Reference"
The basic algorithm is a generalisation of those of
.PP
Y\&. Zhang (1994), On the convergence of a class of infeasible interior-point methods for the horizontal linear complementarity problem, SIAM J\&. Optimization 4(1) 208-227,
.PP
with a number of enhancements described by
.PP
A\&. R\&. Conn, N\&. I\&. M\&. Gould, D\&. Orban and Ph\&. L\&. Toint (1999)\&. A primal-dual trust-region algorithm for minimizing a non-convex function subject to general inequality and linear equality constraints\&. Mathematical Programming \fB87\fP 215-249\&.
.SS "Call order"
To solve a given problem, functions from the qpb package must be called in the following order:
.PP
.IP "\(bu" 2
\fBqpb_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBqpb_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBqpb_import\fP - set up problem data structures and fixed values
.IP "\(bu" 2
\fBqpb_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
\fBqpb_solve_qp\fP - solve the quadratic program
.IP "\(bu" 2
\fBqpb_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBqpb_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Unsymmetric matrix storage formats"
The unsymmetric m by n constraint matrix A may be presented and stored in a variety of convenient input formats\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. In this case, component n * i + j of the storage array A_val will hold the value A_{ij} for 0 <= i <= m-1, 0 <= j <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= i <= m-1, 0 <= j <= n-1, are stored as the l-th components of the integer arrays A_row and A_col and real array A_val, respectively, while the number of nonzeros is recorded as A_ne = ne\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array A_ptr holds the position of the first entry in this row, while A_ptr(m) holds the total number of entries\&. The column indices j, 0 <= j <= n-1, and values A_{ij} of the nonzero entries in the i-th row are stored in components l = A_ptr(i), \&.\&.\&., A_ptr(i+1)-1, 0 <= i <= m-1, of the integer array A_col, and real array A_val, respectively\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Symmetric matrix storage formats"
Likewise, the symmetric n by n objective Hessian matrix H may be presented and stored in a variety of formats\&. But crucially symmetry is exploited by only storing values from the lower triangular part (i\&.e, those entries that lie on or below the leading diagonal)\&.
.SS "Dense storage format"
The matrix H is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. Since H is symmetric, only the lower triangular part (that is the part h_{ij} for 0 <= j <= i <= n-1) need be held\&. In this case the lower triangle should be stored by rows, that is component i * i / 2 + j of the storage array H_val will hold the value h_{ij} (and, by symmetry, h_{ji}) for 0 <= j <= i <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of H, its row index i, column index j and value h_{ij}, 0 <= j <= i <= n-1, are stored as the l-th components of the integer arrays H_row and H_col and real array H_val, respectively, while the number of nonzeros is recorded as H_ne = ne\&. Note that only the entries in the lower triangle should be stored\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of H the i-th component of the integer array H_ptr holds the position of the first entry in this row, while H_ptr(n) holds the total number of entries\&. The column indices j, 0 <= j <= i, and values h_{ij} of the entries in the i-th row are stored in components l = H_ptr(i), \&.\&.\&., H_ptr(i+1)-1 of the integer array H_col, and real array H_val, respectively\&. Note that as before only the entries in the lower triangle should be stored\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Diagonal storage format"
If H is diagonal (i\&.e\&., H_{ij} = 0 for all 0 <= i /= j <= n-1) only the diagonals entries H_{ii}, 0 <= i <= n-1 need be stored, and the first n components of the array H_val may be used for the purpose\&.
.SS "Multiples of the identity storage format"
If H is a multiple of the identity matrix, (i\&.e\&., H = alpha I where I is the n by n identity matrix and alpha is a scalar), it suffices to store alpha as the first component of H_val\&.
.SS "The identity matrix format"
If H is the identity matrix, no values need be stored\&.
.SS "The zero matrix format"
The same is true if H is the zero matrix\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct qpb_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP error and warning diagnostics occur on stream error 
.br
.PP
int \fIout\fP general output occurs on stream out 
.br
.PP
int \fIprint_level\fP the level of output required is specified by print_level 
.br
.PP
int \fIstart_print\fP any printing will start on this iteration 
.br
.PP
int \fIstop_print\fP any printing will stop on this iteration 
.br
.PP
int \fImaxit\fP at most maxit inner iterations are allowed 
.br
.PP
int \fIitref_max\fP the maximum number of iterative refinements allowed 
.br
.PP
int \fIcg_maxit\fP the maximum number of CG iterations allowed\&. If cg_maxit < 0, this number will be reset to the dimension of the system + 1 
.br
.PP
int \fIindicator_type\fP specifies the type of indicator function used\&. Pssible values are 
.PD 0

.IP "\(bu" 2
1 primal indicator: constraint active <=> distance to nearest bound <= \&.indicator_p_tol 
.IP "\(bu" 2
2 primal-dual indicator: constraint active <=> distance to nearest bound <= \&.indicator_tol_pd * size of corresponding multiplier 
.IP "\(bu" 2
3 primal-dual indicator: constraint active <=> distance to nearest bound <= \&.indicator_tol_tapia * distance to same bound at previous iteration 
.PP

.br
.PP
int \fIrestore_problem\fP indicate whether and how much of the input problem should be restored on output\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 nothing restored 
.IP "\(bu" 2
1 scalar and vector parameters 
.IP "\(bu" 2
2 all parameters 
.PP

.br
.PP
int \fIextrapolate\fP should extrapolation be used to track the central path? Possible values 
.PD 0

.IP "\(bu" 2
0 never 
.IP "\(bu" 2
1 after the final major iteration 
.IP "\(bu" 2
2 at each major iteration 
.PP

.br
.PP
int \fIpath_history\fP the maximum number of previous path points to use when fitting the data 
.br
.PP
int \fIfactor\fP the factorization to be used\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 automatic 
.IP "\(bu" 2
1 Schur-complement factorization 
.IP "\(bu" 2
2 augmented-system factorization 
.PP

.br
.PP
int \fImax_col\fP the maximum number of nonzeros in a column of A which is permitted with the Schur-complement factorization 
.br
.PP
int \fIindmin\fP an initial guess as to the integer workspace required by SBLS 
.br
.PP
int \fIvalmin\fP an initial guess as to the real workspace required by SBLS 
.br
.PP
int \fIinfeas_max\fP the number of iterations for which the overall infeasibility of the problem is not reduced by at least a factor \&.reduce_infeas before the problem is flagged as infeasible (see reduce_infeas) 
.br
.PP
int \fIprecon\fP the preconditioner to be used for the CG is defined by precon\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 automatic 
.IP "\(bu" 2
1 no preconditioner, i\&.e, the identity within full factorization 
.IP "\(bu" 2
2 full factorization 
.IP "\(bu" 2
3 band within full factorization 
.IP "\(bu" 2
4 diagonal using the barrier terms within full factorization 
.PP

.br
.PP
int \fInsemib\fP the semi-bandwidth of a band preconditioner, if appropriate 
.br
.PP
int \fIpath_derivatives\fP the maximum order of path derivative to use 
.br
.PP
int \fIfit_order\fP the order of (Puiseux) series to fit to the path data: <=0 to fit all data 
.br
.PP
int \fIsif_file_device\fP specifies the unit number to write generated SIF file describing the current problem 
.br
.PP
real_wp_ \fIinfinity\fP any bound larger than infinity in modulus will be regarded as infinite 
.br
.PP
real_wp_ \fIstop_p\fP the required accuracy for the primal infeasibility 
.br
.PP
real_wp_ \fIstop_d\fP the required accuracy for the dual infeasibility 
.br
.PP
real_wp_ \fIstop_c\fP the required accuracy for the complementarity 
.br
.PP
real_wp_ \fItheta_d\fP tolerances used to terminate the inner iteration (for given mu): dual feasibility <= MAX( theta_d * mu ** beta, 0\&.99 * stop_d ) complementarity <= MAX( theta_c * mu ** beta, 0\&.99 * stop_d ) 
.br
.PP
real_wp_ \fItheta_c\fP see theta_d 
.br
.PP
real_wp_ \fIbeta\fP see theta_d 
.br
.PP
real_wp_ \fIprfeas\fP initial primal variables will not be closer than prfeas from their bound 
.br
.PP
real_wp_ \fIdufeas\fP initial dual variables will not be closer than dufeas from their bounds 
.br
.PP
real_wp_ \fImuzero\fP the initial value of the barrier parameter\&. If muzero is not positive, it will be reset to an appropriate value 
.br
.PP
real_wp_ \fIreduce_infeas\fP if the overall infeasibility of the problem is not reduced by at least a factor reduce_infeas over \&.infeas_max iterations, the problem is flagged as infeasible (see infeas_max) 
.br
.PP
real_wp_ \fIobj_unbounded\fP if the objective function value is smaller than obj_unbounded, it will be flagged as unbounded from below\&. 
.br
.PP
real_wp_ \fIpivot_tol\fP the threshold pivot used by the matrix factorization\&. See the documentation for SBLS for details 
.br
.PP
real_wp_ \fIpivot_tol_for_dependencies\fP the threshold pivot used by the matrix factorization when attempting to detect linearly dependent constraints\&. See the documentation for FDC for details 
.br
.PP
real_wp_ \fIzero_pivot\fP any pivots smaller than zero_pivot in absolute value will be regarded to zero when attempting to detect linearly dependent constraints 
.br
.PP
real_wp_ \fIidentical_bounds_tol\fP any pair of constraint bounds (c_l,c_u) or (x_l,x_u) that are closer than identical_bounds_tol will be reset to the average of their values 
.br
.PP
real_wp_ \fIinner_stop_relative\fP the search direction is considered as an acceptable approximation to the minimizer of the model if the gradient of the model in the preconditioning(inverse) norm is less than max( inner_stop_relative * initial preconditioning(inverse) gradient norm, inner_stop_absolute ) 
.br
.PP
real_wp_ \fIinner_stop_absolute\fP see inner_stop_relative 
.br
.PP
real_wp_ \fIinitial_radius\fP the initial trust-region radius 
.br
.PP
real_wp_ \fImu_min\fP start terminal extrapolation when mu reaches mu_min 
.br
.PP
real_wp_ \fIinner_fraction_opt\fP a search direction which gives at least inner_fraction_opt times the optimal model decrease will be found 
.br
.PP
real_wp_ \fIindicator_tol_p\fP if \&.indicator_type = 1, a constraint/bound will be deemed to be active <=> distance to nearest bound <= \&.indicator_p_tol 
.br
.PP
real_wp_ \fIindicator_tol_pd\fP if \&.indicator_type = 2, a constraint/bound will be deemed to be active <=> distance to nearest bound <= \&.indicator_tol_pd * size of corresponding multiplier 
.br
.PP
real_wp_ \fIindicator_tol_tapia\fP if \&.indicator_type = 3, a constraint/bound will be deemed to be active <=> distance to nearest bound <= \&.indicator_tol_tapia * distance to same bound at previous iteration 
.br
.PP
real_wp_ \fIcpu_time_limit\fP the maximum CPU time allowed (-ve means infinite) 
.br
.PP
real_wp_ \fIclock_time_limit\fP the maximum elapsed clock time allowed (-ve means infinite) 
.br
.PP
bool \fIremove_dependencies\fP the equality constraints will be preprocessed to remove any linear dependencies if true 
.br
.PP
bool \fItreat_zero_bounds_as_general\fP any problem bound with the value zero will be treated as if it were a general value if true 
.br
.PP
bool \fIcenter\fP if \&.center is true, the algorithm will use the analytic center of the feasible set as its initial feasible point\&. Otherwise, a feasible point as close as possible to the initial point will be used\&. We recommend using the analytic center 
.br
.PP
bool \fIprimal\fP if \&.primal, is true, a primal barrier method will be used in place of t primal-dual method 
.br
.PP
bool \fIpuiseux\fP If extrapolation is to be used, decide between Puiseux and Taylor series\&. 
.br
.PP
bool \fIfeasol\fP if \&.feasol is true, the final solution obtained will be perturbed so that variables close to their bounds are moved onto these bounds 
.br
.PP
bool \fIarray_syntax_worse_than_do_loop\fP if \&.array_syntax_worse_than_do_loop is true, f77-style do loops will be used rather than f90-style array syntax for vector operations 
.br
.PP
bool \fIspace_critical\fP if \&.space_critical true, every effort will be made to use as little space as possible\&. This may result in longer computation time 
.br
.PP
bool \fIdeallocate_error_fatal\fP if \&.deallocate_error_fatal is true, any array/pointer deallocation error will terminate execution\&. Otherwise, computation will continue 
.br
.PP
bool \fIgenerate_sif_file\fP if \&.generate_sif_file is \&.true\&. if a SIF file describing the current problem is to be generated 
.br
.PP
char \fIsif_file_name[31]\fP name of generated SIF file containing input problem 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by \&.prefix(2:LEN(TRIM(\&.prefix))-1) where \&.prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct lsqp_control_type \fIlsqp_control\fP control parameters for LSQP 
.br
.PP
struct fdc_control_type \fIfdc_control\fP control parameters for FDC 
.br
.PP
struct sbls_control_type \fIsbls_control\fP control parameters for SBLS 
.br
.PP
struct gltr_control_type \fIgltr_control\fP control parameters for GLTR 
.br
.PP
struct fit_control_type \fIfit_control\fP control parameters for FIT 
.br
.PP
.RE
.PP
.SH "struct qpb_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_wp_ \fItotal\fP the total CPU time spent in the package 
.br
.PP
real_wp_ \fIpreprocess\fP the CPU time spent preprocessing the problem 
.br
.PP
real_wp_ \fIfind_dependent\fP the CPU time spent detecting linear dependencies 
.br
.PP
real_wp_ \fIanalyse\fP the CPU time spent analysing the required matrices prior to factorizatio 
.br
.PP
real_wp_ \fIfactorize\fP the CPU time spent factorizing the required matrices 
.br
.PP
real_wp_ \fIsolve\fP the CPU time spent computing the search direction 
.br
.PP
real_wp_ \fIphase1_total\fP the total CPU time spent in the initial-point phase of the package 
.br
.PP
real_wp_ \fIphase1_analyse\fP the CPU time spent analysing the required matrices prior to factorizatio in the inital-point phase 
.br
.PP
real_wp_ \fIphase1_factorize\fP the CPU time spent factorizing the required matrices in the inital-point phase 
.br
.PP
real_wp_ \fIphase1_solve\fP the CPU time spent computing the search direction in the inital-point ph 
.br
.PP
real_wp_ \fIclock_total\fP the total clock time spent in the package 
.br
.PP
real_wp_ \fIclock_preprocess\fP the clock time spent preprocessing the problem 
.br
.PP
real_wp_ \fIclock_find_dependent\fP the clock time spent detecting linear dependencies 
.br
.PP
real_wp_ \fIclock_analyse\fP the clock time spent analysing the required matrices prior to factorizat 
.br
.PP
real_wp_ \fIclock_factorize\fP the clock time spent factorizing the required matrices 
.br
.PP
real_wp_ \fIclock_solve\fP the clock time spent computing the search direction 
.br
.PP
real_wp_ \fIclock_phase1_total\fP the total clock time spent in the initial-point phase of the package 
.br
.PP
real_wp_ \fIclock_phase1_analyse\fP the clock time spent analysing the required matrices prior to factorizat in the inital-point phase 
.br
.PP
real_wp_ \fIclock_phase1_factorize\fP the clock time spent factorizing the required matrices in the inital-poi phase 
.br
.PP
real_wp_ \fIclock_phase1_solve\fP the clock time spent computing the search direction in the inital-point 
.br
.PP
.RE
.PP
.SH "struct qpb_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP return status\&. See QPB_solve for details 
.br
.PP
int \fIalloc_status\fP the status of the last attempted allocation/deallocation 
.br
.PP
char \fIbad_alloc[81]\fP the name of the array for which an allocation/deallocation error ocurred 
.br
.PP
int \fIiter\fP the total number of iterations required 
.br
.PP
int \fIcg_iter\fP the total number of conjugate gradient iterations required 
.br
.PP
int \fIfactorization_status\fP the return status from the factorization 
.br
.PP
int64_t \fIfactorization_integer\fP the total integer workspace required for the factorization 
.br
.PP
int64_t \fIfactorization_real\fP the total real workspace required for the factorization 
.br
.PP
int \fInfacts\fP the total number of factorizations performed 
.br
.PP
int \fInbacts\fP the total number of 'wasted' function evaluations during the linesearch 
.br
.PP
int \fInmods\fP the total number of factorizations which were modified to ensure that th matrix was an appropriate preconditioner 
.br
.PP
real_wp_ \fIobj\fP the value of the objective function at the best estimate of the solution determined by QPB_solve 
.br
.PP
real_wp_ \fInon_negligible_pivot\fP the smallest pivot which was not judged to be zero when detecting linear dependent constraints 
.br
.PP
bool \fIfeasible\fP is the returned 'solution' feasible? 
.br
.PP
struct \fBqpb_time_type\fP \fItime\fP timings (see above) 
.br
.PP
struct lsqp_inform_type \fIlsqp_inform\fP inform parameters for LSQP 
.br
.PP
struct fdc_inform_type \fIfdc_inform\fP inform parameters for FDC 
.br
.PP
struct sbls_inform_type \fIsbls_inform\fP inform parameters for SBLS 
.br
.PP
struct gltr_inform_type \fIgltr_inform\fP return information from GLTR 
.br
.PP
struct fit_inform_type \fIfit_inform\fP return information from FIT 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void qpb_initialize (void ** data, struct \fBqpb_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBqpb_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void qpb_read_specfile (struct \fBqpb_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNQPB\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/qpb\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBqpb_control_type\fP)
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void qpb_import (struct \fBqpb_control_type\fP * control, void ** data, int * status, int n, int m, const char H_type[], int H_ne, const int H_row[], const int H_col[], const int H_ptr[], const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
Import problem data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBqpb_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 or m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&. 
.IP "\(bu" 2
-23\&. An entry from the strict upper triangle of H has been specified\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables\&.
.br
\fIm\fP is a scalar variable of type int, that holds the number of general linear constraints\&.
.br
\fIH_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the Hessian, H\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none', the latter pair if H=0; lower or upper case variants are allowed\&.
.br
\fIH_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIH_row\fP is a one-dimensional array of size H_ne and type int, that holds the row indices of the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIH_col\fP is a one-dimensional array of size H_ne and type int, that holds the column indices of the lower triangular part of H in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense, diagonal or (scaled) identity storage schemes are used, and in this case can be NULL\&.
.br
\fIH_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of H, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&.
.br
\fIA_type\fP is a one-dimensional array of type char that specifies the \fBunsymmetric storage scheme \fP used for the constraint Jacobian, A\&. It should be one of 'coordinate', 'sparse_by_rows' or 'dense; lower or upper case variants are allowed\&.
.br
\fIA_ne\fP is a scalar variable of type int, that holds the number of entries in A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIA_row\fP is a one-dimensional array of size A_ne and type int, that holds the row indices of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes, and in this case can be NULL\&.
.br
\fIA_col\fP is a one-dimensional array of size A_ne and type int, that holds the column indices of A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense or diagonal storage schemes are used, and in this case can be NULL\&.
.br
\fIA_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void qpb_reset_control (struct \fBqpb_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBqpb_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void qpb_solve_qp (void ** data, int * status, int n, int m, int h_ne, const real_wp_ H_val[], const real_wp_ g[], const real_wp_ f, int a_ne, const real_wp_ A_val[], const real_wp_ c_l[], const real_wp_ c_u[], const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ c[], real_wp_ y[], real_wp_ z[], int x_stat[], int c_stat[])"
Solve the quadratic program when the Hessian H is available\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the entry and exit status from the package\&. 
.br
 Possible exit are: 
.PD 0

.IP "\(bu" 2
0\&. The run was succesful\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 and m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&. 
.IP "\(bu" 2
-5\&. The simple-bound constraints are inconsistent\&. 
.IP "\(bu" 2
-7\&. The constraints appear to have no feasible point\&. 
.IP "\(bu" 2
-9\&. The analysis phase of the factorization failed; the return status from the factorization package is given in the component inform\&.factor_status 
.IP "\(bu" 2
-10\&. The factorization failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-11\&. The solution of a set of linear equations using factors from the factorization package failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-16\&. The problem is so ill-conditioned that further progress is impossible\&. 
.IP "\(bu" 2
-17\&. The step is too small to make further impact\&. 
.IP "\(bu" 2
-18\&. Too many iterations have been performed\&. This may happen if control\&.maxit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-19\&. The CPU time limit has been reached\&. This may happen if control\&.cpu_time_limit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-23\&. An entry from the strict upper triangle of H has been specified\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables
.br
\fIm\fP is a scalar variable of type int, that holds the number of general linear constraints\&.
.br
\fIh_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the Hessian matrix H\&.
.br
\fIH_val\fP is a one-dimensional array of size h_ne and type double, that holds the values of the entries of the lower triangular part of the Hessian matrix H in any of the available storage schemes\&.
.br
\fIg\fP is a one-dimensional array of size n and type double, that holds the linear term g of the objective function\&. The j-th component of g, j = 0, \&.\&.\&. , n-1, contains g_j \&.
.br
\fIf\fP is a scalar of type double, that holds the constant term f of the objective function\&.
.br
\fIa_ne\fP is a scalar variable of type int, that holds the number of entries in the constraint Jacobian matrix A\&.
.br
\fIA_val\fP is a one-dimensional array of size a_ne and type double, that holds the values of the entries of the constraint Jacobian matrix A in any of the available storage schemes\&.
.br
\fIc_l\fP is a one-dimensional array of size m and type double, that holds the lower bounds c^l on the constraints A x\&. The i-th component of c_l, i = 0, \&.\&.\&. , m-1, contains c^l_i\&.
.br
\fIc_u\fP is a one-dimensional array of size m and type double, that holds the upper bounds c^l on the constraints A x\&. The i-th component of c_u, i = 0, \&.\&.\&. , m-1, contains c^u_i\&.
.br
\fIx_l\fP is a one-dimensional array of size n and type double, that holds the lower bounds x^l on the variables x\&. The j-th component of x_l, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx_u\fP is a one-dimensional array of size n and type double, that holds the upper bounds x^l on the variables x\&. The j-th component of x_u, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx\fP is a one-dimensional array of size n and type double, that holds the values x of the optimization variables\&. The j-th component of x, j = 0, \&.\&.\&. , n-1, contains x_j\&.
.br
\fIc\fP is a one-dimensional array of size m and type double, that holds the residual c(x)\&. The i-th component of c, j = 0, \&.\&.\&. , n-1, contains c_j(x) \&.
.br
\fIy\fP is a one-dimensional array of size n and type double, that holds the values y of the Lagrange multipliers for the general linear constraints\&. The j-th component of y, j = 0, \&.\&.\&. , n-1, contains y_j\&.
.br
\fIz\fP is a one-dimensional array of size n and type double, that holds the values z of the dual variables\&. The j-th component of z, j = 0, \&.\&.\&. , n-1, contains z_j\&.
.br
\fIx_stat\fP is a one-dimensional array of size n and type int, that gives the optimal status of the problem variables\&. If x_stat(j) is negative, the variable x_j most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&.
.br
\fIc_stat\fP is a one-dimensional array of size m and type int, that gives the optimal status of the general linear constraints\&. If c_stat(i) is negative, the constraint value a_i^Tx most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&. 
.RE
.PP

.SS "void qpb_information (void ** data, struct \fBqpb_inform_type\fP * inform, int * status)"
Provides output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBqpb_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void qpb_terminate (void ** data, struct \fBqpb_control_type\fP * control, struct \fBqpb_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBqpb_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBqpb_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD QPB from the source code\&.
