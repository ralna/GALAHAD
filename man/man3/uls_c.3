.TH "galahad_uls.h" 3 "Tue May 2 2023" "C interfaces to GALAHAD ULS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_uls.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_gls\&.h'\fP
.br
\fC#include 'hsl_ma48\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBuls_control_type\fP"
.br
.ti -1c
.RI "struct \fBuls_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBuls_initialize\fP (const char solver[], void **data, struct \fBuls_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBuls_read_specfile\fP (struct \fBuls_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBuls_factorize_matrix\fP (struct \fBuls_control_type\fP *control, void **data, int *status, int m, int n, const char type[], int ne, const real_wp_ val[], const int row[], const int col[], const int ptr[])"
.br
.ti -1c
.RI "void \fBuls_reset_control\fP (struct \fBuls_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBuls_solve_system\fP (void **data, int *status, int m, int n, real_wp_ sol[], bool trans)"
.br
.ti -1c
.RI "void \fBuls_information\fP (void **data, struct \fBuls_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBuls_terminate\fP (void **data, struct \fBuls_control_type\fP *control, struct \fBuls_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
This package \fB solves dense or sparse unsymmetric systems of linear equations\fP using variants of Gaussian elimination\&. Given a sparse symmetric m \\times n matrix A = a_{ij}, and an m-vector b, this subroutine solves the system A x = b\&. If b is an n-vector, the package may solve instead the system A^T x = b\&. Both square (m=n) and rectangular (m /= n) matrices are handled; one of an infinite class of solutions for consistent systems will be returned whenever A is not of full rank\&.
.PP
The method provides a common interface to a variety of well-known solvers from HSL and elsewhere\&. Currently supported solvers include \fCMA28/GLS\fP and \fCHSL_MA48\fP from HSL, as well as \fCGETR\fP from LAPACK\&. Note that, with the exception of he Netlib reference LAPACK code, \fB the solvers themselves do not form part of this package and must be obtained separately\&.\fP Dummy instances are provided for solvers that are unavailable\&. Also note that additional flexibility may be obtained by calling the solvers directly rather that via this package\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique Montr√©al\&.
.SS "Originally released"
August 2009, C interface December 2021\&.
.SS "Terminology"
The solvers used each produce an P_R L U P_C factorization of A, where L and U are lower and upper triangular matrices, and P_R and P_C are row and column permutation matrices respectively\&.
.SS "Method"
Variants of sparse Gaussian elimination are used\&.
.PP
The solver \fCGLS\fP is available as part of GALAHAD and relies on the HSL Archive packages \fCMA33\fP\&. To obtain HSL Archive packages, see
.PP
http://hsl.rl.ac.uk/archive/ \&.
.PP
The solver \fCHSL_MA48\fP is part of HSL 2007\&. To obtain HSL 2007 packages, see
.PP
http://hsl.rl.ac.uk/hsl2007/ \&.
.SS "Reference"
The methods used are described in the user-documentation for
.PP
HSL 2007, A collection of {F}ortran codes for large-scale scientific computation (2007)\&. 
.br
 http://www.cse.clrc.ac.uk/nag/hsl
.PP
The solver \fCGETR\fP is available as \fCS/DGETRF/S\fP as part of LAPACK\&. Reference versions are provided by GALAHAD, but for good performance machined-tuned versions should be used\&.
.SS "Call order"
To solve a given problem, functions from the uls package must be called in the following order:
.PP
.IP "\(bu" 2
\fBuls_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBuls_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBuls_factorize_matrix\fP - set up matrix data structures, analyse the structure to choose a suitable order for factorization, and then factorize the matrix A
.IP "\(bu" 2
\fBuls_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
\fBuls_solve_system\fP - solve the linear system of equations Ax=b or A^Tx=b
.IP "\(bu" 2
\fBuls_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBuls_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Unsymmetric matrix storage formats"
The unsymmetric m by n matrix A may be presented and stored in a variety of convenient input formats\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. In this case, component n * i + j of the storage array A_val will hold the value A_{ij} for 0 <= i <= m-1, 0 <= j <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= i <= m-1, 0 <= j <= n-1, are stored as the l-th components of the integer arrays A_row and A_col and real array A_val, respectively, while the number of nonzeros is recorded as A_ne = ne\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array A_ptr holds the position of the first entry in this row, while A_ptr(m) holds the total number of entries\&. The column indices j, 0 <= j <= n-1, and values A_{ij} of the nonzero entries in the i-th row are stored in components l = A_ptr(i), \&.\&.\&., A_ptr(i+1)-1, 0 <= i <= m-1, of the integer array A_col, and real array A_val, respectively\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct uls_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit for error messages 
.br
.PP
int \fIwarning\fP unit for warning messages 
.br
.PP
int \fIout\fP unit for monitor output 
.br
.PP
int \fIprint_level\fP controls level of diagnostic output 
.br
.PP
int \fIprint_level_solver\fP controls level of diagnostic output from external solver 
.br
.PP
int \fIinitial_fill_in_factor\fP prediction of factor by which the fill-in will exceed the initial number of nonzeros in A 
.br
.PP
int \fImin_real_factor_size\fP initial size for real array for the factors and other data 
.br
.PP
int \fImin_integer_factor_size\fP initial size for integer array for the factors and other data 
.br
.PP
int64_t \fImax_factor_size\fP maximum size for real array for the factors and other data 
.br
.PP
int \fIblas_block_size_factorize\fP level 3 blocking in factorize 
.br
.PP
int \fIblas_block_size_solve\fP level 2 and 3 blocking in solve 
.br
.PP
int \fIpivot_control\fP pivot control: 
.PD 0

.IP "\(bu" 2
1 Threshold Partial Pivoting is desired 
.IP "\(bu" 2
2 Threshold Rook Pivoting is desired 
.IP "\(bu" 2
3 Threshold Complete Pivoting is desired 
.IP "\(bu" 2
4 Threshold Symmetric Pivoting is desired 
.IP "\(bu" 2
5 Threshold Diagonal Pivoting is desired 
.PP

.br
.PP
int \fIpivot_search_limit\fP number of rows/columns pivot selection restricted to (0 = no restriction) 
.br
.PP
int \fIminimum_size_for_btf\fP the minimum permitted size of blocks within the block-triangular form 
.br
.PP
int \fImax_iterative_refinements\fP maximum number of iterative refinements allowed 
.br
.PP
bool \fIstop_if_singular\fP stop if the matrix is found to be structurally singular 
.br
.PP
real_wp_ \fIarray_increase_factor\fP factor by which arrays sizes are to be increased if they are too small 
.br
.PP
real_wp_ \fIswitch_to_full_code_density\fP switch to full code when the density exceeds this factor 
.br
.PP
real_wp_ \fIarray_decrease_factor\fP if previously allocated internal workspace arrays are greater than array_decrease_factor times the currently required sizes, they are reset to current requirements 
.br
.PP
real_wp_ \fIrelative_pivot_tolerance\fP pivot threshold 
.br
.PP
real_wp_ \fIabsolute_pivot_tolerance\fP any pivot small than this is considered zero 
.br
.PP
real_wp_ \fIzero_tolerance\fP any entry smaller than this in modulus is reset to zero 
.br
.PP
real_wp_ \fIacceptable_residual_relative\fP refinement will cease as soon as the residual ||Ax-b|| falls below max( acceptable_residual_relative * ||b||, acceptable_residual_absolute ) 
.br
.PP
real_wp_ \fIacceptable_residual_absolute\fP see acceptable_residual_relative 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
.RE
.PP
.SH "struct uls_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP reported return status: 
.PD 0

.IP "\(bu" 2
0 success 
.IP "\(bu" 2
-1 allocation error 
.IP "\(bu" 2
-2 deallocation error 
.IP "\(bu" 2
-3 matrix data faulty (m < 1, n < 1, ne < 0) 
.IP "\(bu" 2
-26 unknown solver 
.IP "\(bu" 2
-29 unavailable option 
.IP "\(bu" 2
-31 input order is not a permutation or is faulty in some other way 
.IP "\(bu" 2
-32 error with integer workspace 
.IP "\(bu" 2
-33 error with real workspace 
.IP "\(bu" 2
-50 solver-specific error; see the solver's info parameter 
.PP

.br
.PP
int \fIalloc_status\fP STAT value after allocate failure\&. 
.br
.PP
char \fIbad_alloc[81]\fP name of array which provoked an allocate failure 
.br
.PP
int \fImore_info\fP further information on failure 
.br
.PP
int64_t \fIout_of_range\fP number of indices out-of-range 
.br
.PP
int64_t \fIduplicates\fP number of duplicates 
.br
.PP
int64_t \fIentries_dropped\fP number of entries dropped during the factorization 
.br
.PP
int64_t \fIworkspace_factors\fP predicted or actual number of reals and integers to hold factors 
.br
.PP
int \fIcompresses\fP number of compresses of data required 
.br
.PP
int64_t \fIentries_in_factors\fP number of entries in factors 
.br
.PP
int \fIrank\fP estimated rank of the matrix 
.br
.PP
int \fIstructural_rank\fP structural rank of the matrix 
.br
.PP
int \fIpivot_control\fP pivot control: 
.PD 0

.IP "\(bu" 2
1 Threshold Partial Pivoting has been used 
.IP "\(bu" 2
2 Threshold Rook Pivoting has been used 
.IP "\(bu" 2
3 Threshold Complete Pivoting has been desired 
.IP "\(bu" 2
4 Threshold Symmetric Pivoting has been desired 
.IP "\(bu" 2
5 Threshold Diagonal Pivoting has been desired 
.PP

.br
.PP
int \fIiterative_refinements\fP number of iterative refinements performed 
.br
.PP
bool \fIalternative\fP has an 'alternative' y: A^T y = 0 and yT b > 0 been found when trying to solve A x = b ? 
.br
.PP
char \fIsolver[21]\fP name of external solver used to factorize and solve 
.br
.PP
struct gls_ainfo \fIgls_ainfo\fP the output arrays from GLS 
.br
.PP
struct gls_finfo \fIgls_finfo\fP see gls_ainfo 
.br
.PP
struct gls_sinfo \fIgls_sinfo\fP see gls_ainfo 
.br
.PP
struct ma48_ainfo \fIma48_ainfo\fP the output arrays from MA48 
.br
.PP
struct ma48_finfo \fIma48_finfo\fP see ma48_ainfo 
.br
.PP
struct ma48_sinfo \fIma48_sinfo\fP see ma48_ainfo 
.br
.PP
int \fIlapack_error\fP the LAPACK error return code 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void uls_initialize (const char solver[], void ** data, struct \fBuls_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
Select solver, set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIsolver\fP is a one-dimensional array of type char that specifies the \fBsolver package \fP that should be used to factorize the matrix A\&. It should be one of 'gls', 'ma28', 'ma48 or 'getr'; lower or upper case variants are allowed\&.
.br
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBuls_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.IP "\(bu" 2
-26\&. The requested solver is not available\&. 
.PP
.RE
.PP

.SS "void uls_read_specfile (struct \fBuls_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNULS\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/uls\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBuls_control_type\fP) 
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void uls_factorize_matrix (struct \fBuls_control_type\fP * control, void ** data, int * status, int m, int n, const char type[], int ne, const real_wp_ val[], const int row[], const int col[], const int ptr[])"
Import matrix data into internal storage prior to solution, analyse the sparsity patern, and subsequently factorize the matrix
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBuls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import, analysis and factorization were conducted succesfully\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 and m> 0 or requirement that the matrix type must contain the relevant string 'dense', 'coordinate' or 'sparse_by_rows has been violated\&. 
.IP "\(bu" 2
-26\&. The requested solver is not available\&. 
.IP "\(bu" 2
-29\&. This option is not available with this solver\&. 
.IP "\(bu" 2
-32\&. More than control\&.max integer factor size words of internal integer storage are required for in-core factorization\&. 
.IP "\(bu" 2
-50\&. A solver-specific error occurred; check the solver-specific information component of inform along with the solver‚Äôs documentation for more details\&.
.PP
.br
\fIm\fP is a scalar variable of type int, that holds the number of rows in the unsymmetric matrix A\&.
.br
\fIn\fP is a scalar variable of type int, that holds the number of columns in the unsymmetric matrix A\&.
.br
\fItype\fP is a one-dimensional array of type char that specifies the \fBunsymmetric storage scheme \fP used for the matrix A\&. It should be one of 'coordinate', 'sparse_by_rows' or 'dense'; lower or upper case variants are allowed\&.
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIval\fP is a one-dimensional array of size ne and type double, that holds the values of the entries of the matrix A in any of the supported storage schemes\&.
.br
\fIrow\fP is a one-dimensional array of size ne and type int, that holds the row indices of the matrix A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL\&.
.br
\fIcol\fP is a one-dimensional array of size ne and type int, that holds the column indices of the matrix A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense storage schemes is used, and in this case can be NULL\&.
.br
\fIptr\fP is a one-dimensional array of size m+1 and type int, that holds the starting position of each row of the matrix A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void uls_reset_control (struct \fBuls_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBuls_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void uls_solve_system (void ** data, int * status, int m, int n, real_wp_ sol[], bool trans)"
Solve the linear system Ax=b or A^Tx=b\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. 
.br
 Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The required solution was obtained\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-34\&. The package PARDISO failed; check the solver-specific information components inform\&.pardiso iparm and inform\&.pardiso_dparm along with PARDISO‚Äôs documentation for more details\&. 
.IP "\(bu" 2
-35\&. The package WSMP failed; check the solver-specific information components inform\&.wsmp_iparm and inform\&.wsmp dparm along with WSMP‚Äôs documentation for more details\&.
.PP
.br
\fIm\fP is a scalar variable of type int, that holds the number of rows in the unsymmetric matrix A\&.
.br
\fIn\fP is a scalar variable of type int, that holds the number of columns in the unsymmetric matrix A\&.
.br
\fIsol\fP is a one-dimensional array of size n and type double\&. On entry, it must hold the vector b\&. On a successful exit, its contains the solution x\&.
.br
\fItrans\fP is a scalar variable of type bool, that specifies whether to solve the equation A^Tx=b (trans=true) or Ax=b (trans=false)\&. 
.RE
.PP

.SS "void uls_information (void ** data, struct \fBuls_inform_type\fP * inform, int * status)"
Provides output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBuls_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void uls_terminate (void ** data, struct \fBuls_control_type\fP * control, struct \fBuls_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBuls_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBuls_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD ULS from the source code\&.
