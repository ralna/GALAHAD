.TH "galahad_bqp.h" 3 "Mon May 1 2023" "C interfaces to GALAHAD BQP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_bqp.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_sbls\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbqp_control_type\fP"
.br
.ti -1c
.RI "struct \fBbqp_time_type\fP"
.br
.ti -1c
.RI "struct \fBbqp_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBbqp_initialize\fP (void **data, struct \fBbqp_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBbqp_read_specfile\fP (struct \fBbqp_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBbqp_import\fP (struct \fBbqp_control_type\fP *control, void **data, int *status, int n, const char H_type[], int ne, const int H_row[], const int H_col[], const int H_ptr[])"
.br
.ti -1c
.RI "void \fBbqp_import_without_h\fP (struct \fBbqp_control_type\fP *control, void **data, int *status, int n)"
.br
.ti -1c
.RI "void \fBbqp_reset_control\fP (struct \fBbqp_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBbqp_solve_given_h\fP (void **data, int *status, int n, int h_ne, const real_wp_ H_val[], const real_wp_ g[], const real_wp_ f, const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ z[], int x_stat[])"
.br
.ti -1c
.RI "void \fBbqp_solve_reverse_h_prod\fP (void **data, int *status, int n, const real_wp_ g[], const real_wp_ f, const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ z[], int x_stat[], real_wp_ v[], const real_wp_ prod[], int nz_v[], int *nz_v_start, int *nz_v_end, const int nz_prod[], int nz_prod_end)"
.br
.ti -1c
.RI "void \fBbqp_information\fP (void **data, struct \fBbqp_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBbqp_terminate\fP (void **data, struct \fBbqp_control_type\fP *control, struct \fBbqp_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
This package uses a preconditioned, projected-gradient method to solve the \fBconvex bound-constrained quadratic programming problem\fP \[\mbox{minimize}\;\; q(x) = 1/2 x^T H x + g^T x + f \]  
  \n
  minimize q(x) := 1/2 x^T H x + g^T x + f
  \n
 subject to the simple bound constraints \[x_j^l <= x_j <= x_j^u, \;\;\; j = 1, ... , n,\]  
  \n
   x_j^l \[<=] x_j \[<=] x_j^u, j = 1, ... , n,
  \n
 where the n by n symmetric postive semi-definite matrix H, the vectors g, x^l, x^u and the scalar f are given\&. Any of the constraint bounds x_j^l and x_j^u may be infinite\&. Full advantage is taken of any zero coefficients in the matrix H; the matrix need not be provided as there are options to obtain matrix-vector products involving H by reverse communication\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique MontrÃ©al\&.
.SS "Originally released"
November 2009, C interface February 2022\&.
.SS "Terminology"
The required solution x necessarily satisfies the primal optimality conditions \[x^l <= x <= x^u,\]  
  \n
   x^l \[<=] x \[<=] x^u,
  \n
 the dual optimality conditions \[H x + g = z\]  
  \n
   H x + g = z
  \n
 where \[ z = z^l + z^u, \,\, z^l >= 0 \;\; \mbox{and} \;\; z^u <= 0,\]  
  \n
   z = z^l + z^u, z^l \[>=] 0 and z^u \[<=] 0,
  \n
 and the complementary slackness conditions \[(x -x^l )^{T} z^l = 0 \;\; \mbox{and} \;\; (x -x^u )^{T} z^u = 0,\hspace{12mm} \]  
  \n
  (x -x^l)^T z^l = 0 and (x -x^u)^T z^u = 0,
  \n
 where the vector z is known as the dual variables for the bounds, respectively, and where the vector inequalities hold component-wise\&.
.SS "Method"
The method is iterative\&. Each iteration proceeds in two stages\&. Firstly, the so-called generalized Cauchy point for the quadratic objective is found\&. (The purpose of this point is to ensure that the algorithm converges and that the set of bounds which are satisfied as equations at the solution is rapidly identified\&.) Thereafter an improvement to the objective is sought using either a direct-matrix or truncated conjugate-gradient algorithm\&.
.SS "Reference"
This is a specialised version of the method presented in
.PP
A\&. R\&. Conn, N\&. I\&. M\&. Gould and Ph\&. L\&. Toint (1988)\&. Global convergence of a class of trust region algorithms for optimization with simple bounds\&. SIAM Journal on Numerical Analysis \fB25\fP 433-460,
.SS "Call order"
To solve a given problem, functions from the bqp package must be called in the following order:
.PP
.IP "\(bu" 2
\fBbqp_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBbqp_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
set up problem data structures and fixed values by caling one of
.IP "  \(bu" 4
\fBbqp_import\fP - in the case that H is explicitly available
.IP "  \(bu" 4
\fBbqp_import_without_h\fP - in the case that only the effect of applying H to a vector is possible
.PP

.IP "\(bu" 2
\fBbqp_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
solve the problem by calling one of
.IP "  \(bu" 4
\fBbqp_solve_given_h\fP - solve the problem using values of H
.IP "  \(bu" 4
\fBbqp_solve_reverse_h_prod\fP - solve the problem by returning to the caller for products of H with specified vectors
.PP

.IP "\(bu" 2
\fBbqp_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBbqp_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Symmetric matrix storage formats"
If it is explicitly available, the symmetric n by n objective Hessian matrix H may be presented and stored in a variety of formats\&. But crucially symmetry is exploited by only storing values from the lower triangular part (i\&.e, those entries that lie on or below the leading diagonal)\&.
.SS "Dense storage format"
The matrix H is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. Since H is symmetric, only the lower triangular part (that is the part h_{ij} for 0 <= j <= i <= n-1) need be held\&. In this case the lower triangle should be stored by rows, that is component i * i / 2 + j of the storage array H_val will hold the value h_{ij} (and, by symmetry, h_{ji}) for 0 <= j <= i <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of H, its row index i, column index j and value h_{ij}, 0 <= j <= i <= n-1, are stored as the l-th components of the integer arrays H_row and H_col and real array H_val, respectively, while the number of nonzeros is recorded as H_ne = ne\&. Note that only the entries in the lower triangle should be stored\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of H the i-th component of the integer array H_ptr holds the position of the first entry in this row, while H_ptr(n) holds the total number of entries\&. The column indices j, 0 <= j <= i, and values h_{ij} of the entries in the i-th row are stored in components l = H_ptr(i), \&.\&.\&., H_ptr(i+1)-1 of the integer array H_col, and real array H_val, respectively\&. Note that as before only the entries in the lower triangle should be stored\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&.
.SS "Diagonal storage format"
If H is diagonal (i\&.e\&., H_{ij} = 0 for all 0 <= i /= j <= n-1) only the diagonals entries H_{ii}, 0 <= i <= n-1 need be stored, and the first n components of the array H_val may be used for the purpose\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct bqp_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP unit number for error and warning diagnostics 
.br
.PP
int \fIout\fP general output unit number 
.br
.PP
int \fIprint_level\fP the level of output required 
.br
.PP
int \fIstart_print\fP on which iteration to start printing 
.br
.PP
int \fIstop_print\fP on which iteration to stop printing 
.br
.PP
int \fIprint_gap\fP how many iterations between printing 
.br
.PP
int \fImaxit\fP how many iterations to perform (-ve reverts to HUGE(1)-1) 
.br
.PP
int \fIcold_start\fP cold_start should be set to 0 if a warm start is required (with variable assigned according to B_stat, see below), and to any other value if the values given in prob\&.X suffice 
.br
.PP
int \fIratio_cg_vs_sd\fP the ratio of how many iterations use CG rather steepest descent 
.br
.PP
int \fIchange_max\fP the maximum number of per-iteration changes in the working set permitted when allowing CG rather than steepest descent 
.br
.PP
int \fIcg_maxit\fP how many CG iterations to perform per BQP iteration (-ve reverts to n+1) 
.br
.PP
int \fIsif_file_device\fP the unit number to write generated SIF file describing the current problem 
.br
.PP
real_wp_ \fIinfinity\fP any bound larger than infinity in modulus will be regarded as infinite 
.br
.PP
real_wp_ \fIstop_p\fP the required accuracy for the primal infeasibility 
.br
.PP
real_wp_ \fIstop_d\fP the required accuracy for the dual infeasibility 
.br
.PP
real_wp_ \fIstop_c\fP the required accuracy for the complementary slackness 
.br
.PP
real_wp_ \fIidentical_bounds_tol\fP any pair of constraint bounds (x_l,x_u) that are closer than i dentical_bounds_tol will be reset to the average of their values 
.br
.PP
real_wp_ \fIstop_cg_relative\fP the CG iteration will be stopped as soon as the current norm of the preconditioned gradient is smaller than max( stop_cg_relative * initial preconditioned gradient, stop_cg_absolute) 
.br
.PP
real_wp_ \fIstop_cg_absolute\fP see stop_cg_relative 
.br
.PP
real_wp_ \fIzero_curvature\fP threshold below which curvature is regarded as zero 
.br
.PP
real_wp_ \fIcpu_time_limit\fP the maximum CPU time allowed (-ve = no limit) 
.br
.PP
bool \fIexact_arcsearch\fP exact_arcsearch is true if an exact arcsearch is required, and false if approximation suffices 
.br
.PP
bool \fIspace_critical\fP if space_critical is true, every effort will be made to use as little space as possible\&. This may result in longer computation times 
.br
.PP
bool \fIdeallocate_error_fatal\fP if deallocate_error_fatal is true, any array/pointer deallocation error will terminate execution\&. Otherwise, computation will continue 
.br
.PP
bool \fIgenerate_sif_file\fP if generate_sif_file is true, a SIF file describing the current problem will be generated 
.br
.PP
char \fIsif_file_name[31]\fP name (max 30 characters) of generated SIF file containing input problem 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by a string (max 30 characters) prefix(2:LEN(TRIM(\&.prefix))-1) where prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct sbls_control_type \fIsbls_control\fP control parameters for SBLS 
.br
.PP
.RE
.PP
.SH "struct bqp_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_sp_ \fItotal\fP total time 
.br
.PP
real_sp_ \fIanalyse\fP time for the analysis phase 
.br
.PP
real_sp_ \fIfactorize\fP time for the factorization phase 
.br
.PP
real_sp_ \fIsolve\fP time for the linear solution phase 
.br
.PP
.RE
.PP
.SH "struct bqp_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP reported return status: 
.PD 0

.IP "\(bu" 2
0 success 
.IP "\(bu" 2
-1 allocation error 
.IP "\(bu" 2
-2 deallocation error 
.IP "\(bu" 2
-3 matrix data faulty (\&.n < 1, \&.ne < 0) 
.IP "\(bu" 2
-20 alegedly +ve definite matrix is not 
.PP

.br
.PP
int \fIalloc_status\fP Fortran STAT value after allocate failure\&. 
.br
.PP
int \fIfactorization_status\fP status return from factorization 
.br
.PP
int \fIiter\fP number of iterations required 
.br
.PP
int \fIcg_iter\fP number of CG iterations required 
.br
.PP
real_wp_ \fIobj\fP current value of the objective function 
.br
.PP
real_wp_ \fInorm_pg\fP current value of the projected gradient 
.br
.PP
char \fIbad_alloc[81]\fP name of array which provoked an allocate failure 
.br
.PP
struct \fBbqp_time_type\fP \fItime\fP times for various stages 
.br
.PP
struct sbls_inform_type \fIsbls_inform\fP inform values from SBLS 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void bqp_initialize (void ** data, struct \fBbqp_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBbqp_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void bqp_read_specfile (struct \fBbqp_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNBQP\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/bqp\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBbqp_control_type\fP) 
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void bqp_import (struct \fBbqp_control_type\fP * control, void ** data, int * status, int n, const char H_type[], int ne, const int H_row[], const int H_col[], const int H_ptr[])"
Import problem data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBbqp_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables\&.
.br
\fIH_type\fP is a one-dimensional array of type char that specifies the \fBsymmetric storage scheme \fP used for the Hessian\&. It should be one of 'coordinate', 'sparse_by_rows', 'dense', 'diagonal' or 'absent', the latter if access to the Hessian is via matrix-vector products; lower or upper case variants are allowed\&.
.br
\fIne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes\&.
.br
\fIH_row\fP is a one-dimensional array of size ne and type int, that holds the row indices of the lower triangular part of H in the sparse co-ordinate storage scheme\&. It need not be set for any of the other three schemes, and in this case can be NULL
.br
\fIH_col\fP is a one-dimensional array of size ne and type int, that holds the column indices of the lower triangular part of H in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense or diagonal storage schemes are used, and in this case can be NULL
.br
\fIH_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of the lower triangular part of H, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL 
.RE
.PP

.SS "void bqp_import_without_h (struct \fBbqp_control_type\fP * control, void ** data, int * status, int n)"
Import problem data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBbqp_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables\&. 
.RE
.PP

.SS "void bqp_reset_control (struct \fBbqp_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBbqp_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
1\&. The import was succesful, and the package is ready for the solve phase 
.PP
.RE
.PP

.SS "void bqp_solve_given_h (void ** data, int * status, int n, int h_ne, const real_wp_ H_val[], const real_wp_ g[], const real_wp_ f, const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ z[], int x_stat[])"
Solve the bound-constrained quadratic program when the Hessian H is available\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the entry and exit status from the package\&. 
.br
 On initial entry, status must be set to 1\&. 
.br
 Possible exit are: 
.PD 0

.IP "\(bu" 2
0\&. The run was succesful\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&. 
.IP "\(bu" 2
-4\&. The simple-bound constraints are inconsistent\&. 
.IP "\(bu" 2
-9\&. The analysis phase of the factorization failed; the return status from the factorization package is given in the component inform\&.factor_status 
.IP "\(bu" 2
-10\&. The factorization failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-11\&. The solution of a set of linear equations using factors from the factorization package failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-16\&. The problem is so ill-conditioned that further progress is impossible\&. 
.IP "\(bu" 2
-17\&. The step is too small to make further impact\&. 
.IP "\(bu" 2
-18\&. Too many iterations have been performed\&. This may happen if control\&.maxit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-19\&. The CPU time limit has been reached\&. This may happen if control\&.cpu_time_limit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-20\&. The Hessian matrix H appears to be indefinite\&. specified\&. 
.IP "\(bu" 2
-23\&. An entry from the strict upper triangle of H has been
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables
.br
\fIh_ne\fP is a scalar variable of type int, that holds the number of entries in the lower triangular part of the Hessian matrix H\&.
.br
\fIH_val\fP is a one-dimensional array of size h_ne and type double, that holds the values of the entries of the lower triangular part of the Hessian matrix H in any of the available storage schemes\&.
.br
\fIg\fP is a one-dimensional array of size n and type double, that holds the linear term g of the objective function\&. The j-th component of g, j = 0, \&.\&.\&. , n-1, contains g_j \&.
.br
\fIf\fP is a scalar of type double, that holds the constant term f of the objective function\&.
.br
\fIx_l\fP is a one-dimensional array of size n and type double, that holds the lower bounds x^l on the variables x\&. The j-th component of x_l, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx_u\fP is a one-dimensional array of size n and type double, that holds the upper bounds x^l on the variables x\&. The j-th component of x_u, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx\fP is a one-dimensional array of size n and type double, that holds the values x of the optimization variables\&. The j-th component of x, j = 0, \&.\&.\&. , n-1, contains x_j\&.
.br
\fIz\fP is a one-dimensional array of size n and type double, that holds the values z of the dual variables\&. The j-th component of z, j = 0, \&.\&.\&. , n-1, contains z_j\&.
.br
\fIx_stat\fP is a one-dimensional array of size n and type int, that gives the optimal status of the problem variables\&. If x_stat(j) is negative, the variable x_j most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&. 
.RE
.PP

.SS "void bqp_solve_reverse_h_prod (void ** data, int * status, int n, const real_wp_ g[], const real_wp_ f, const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ z[], int x_stat[], real_wp_ v[], const real_wp_ prod[], int nz_v[], int * nz_v_start, int * nz_v_end, const int nz_prod[], int nz_prod_end)"
Solve the bound-constrained quadratic program when the products of the Hessian H with specified vectors may be computed by the calling program\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the entry and exit status from the package\&. 
.br
 Possible exit are: 
.PD 0

.IP "\(bu" 2
0\&. The run was succesful\&.
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restriction n > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows' or 'diagonal' has been violated\&. 
.IP "\(bu" 2
-4\&. The simple-bound constraints are inconsistent\&. 
.IP "\(bu" 2
-9\&. The analysis phase of the factorization failed; the return status from the factorization package is given in the component inform\&.factor_status 
.IP "\(bu" 2
-10\&. The factorization failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-11\&. The solution of a set of linear equations using factors from the factorization package failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-16\&. The problem is so ill-conditioned that further progress is impossible\&. 
.IP "\(bu" 2
-17\&. The step is too small to make further impact\&. 
.IP "\(bu" 2
-18\&. Too many iterations have been performed\&. This may happen if control\&.maxit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-19\&. The CPU time limit has been reached\&. This may happen if control\&.cpu_time_limit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-20\&. The Hessian matrix H appears to be indefinite\&. specified\&. 
.IP "\(bu" 2
-23\&. An entry from the strict upper triangle of H has been specified\&.
.PP
.br
\fIstatus\fP (continued) 
.PD 0

.IP "\(bu" 2
2\&. The product Hv of the Hessian H with a given output vector v is required from the user\&. The vector v will be stored in v and the product Hv must be returned in prod, and bqp_solve_reverse_h_prod re-entered with all other arguments unchanged\&. 
.IP "\(bu" 2
3\&. The product Hv of the Hessian H with a given output vector v is required from the user\&. Only components nz_v[nz_v_start-1:nz_v_end-1] of the vector v stored in v are nonzero\&. The resulting product Hv must be placed in prod, and bqp_solve_reverse_h_prod re-entered with all other arguments unchanged\&. 
.IP "\(bu" 2
4\&. The product Hv of the Hessian H with a given output vector v is required from the user\&. Only components nz_v[nz_v_start-1:nz_v_end-1] of the vector v stored in v are nonzero\&. The resulting \fBnonzeros\fP in the product Hv must be placed in their appropriate comnponents of prod, while a list of indices of the nonzeros placed in nz_prod[0 : nz_prod_end-1]\&. bqp_solve_reverse_h_prod should then be re-entered with all other arguments unchanged\&. Typically v will be very sparse (i\&.e\&., nz_p_end-nz_p_start will be small)\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables
.br
\fIg\fP is a one-dimensional array of size n and type double, that holds the linear term g of the objective function\&. The j-th component of g, j = 0, \&.\&.\&. , n-1, contains g_j \&.
.br
\fIf\fP is a scalar of type double, that holds the constant term f of the objective function\&.
.br
\fIx_l\fP is a one-dimensional array of size n and type double, that holds the lower bounds x^l on the variables x\&. The j-th component of x_l, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx_u\fP is a one-dimensional array of size n and type double, that holds the upper bounds x^l on the variables x\&. The j-th component of x_u, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx\fP is a one-dimensional array of size n and type double, that holds the values x of the optimization variables\&. The j-th component of x, j = 0, \&.\&.\&. , n-1, contains x_j\&.
.br
\fIz\fP is a one-dimensional array of size n and type double, that holds the values z of the dual variables\&. The j-th component of z, j = 0, \&.\&.\&. , n-1, contains z_j\&.
.br
\fIx_stat\fP is a one-dimensional array of size n and type int, that gives the optimal status of the problem variables\&. If x_stat(j) is negative, the variable x_j most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&.
.br
\fIv\fP is a one-dimensional array of size n and type double, that is used for reverse communication (see status=2-4 above for details)
.br
\fIprod\fP is a one-dimensional array of size n and type double, that is used for reverse communication (see status=2-4 above for details)
.br
\fInz_v\fP is a one-dimensional array of size n and type int, that is used for reverse communication (see status=3-4 above for details)
.br
\fInz_v_start\fP is a scalar of type int, that is used for reverse communication (see status=3-4 above for details)
.br
\fInz_v_end\fP is a scalar of type int, that is used for reverse communication (see status=3-4 above for details)
.br
\fInz_prod\fP is a one-dimensional array of size n and type int, that is used for reverse communication (see status=4 above for details)
.br
\fInz_prod_end\fP is a scalar of type int, that is used for reverse communication (see status=4 above for details) 
.RE
.PP

.SS "void bqp_information (void ** data, struct \fBbqp_inform_type\fP * inform, int * status)"
Provides output information
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBbqp_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void bqp_terminate (void ** data, struct \fBbqp_control_type\fP * control, struct \fBbqp_inform_type\fP * inform)"
Deallocate all internal private storage
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBbqp_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBbqp_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD BQP from the source code\&.
