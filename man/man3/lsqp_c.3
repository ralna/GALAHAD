.TH "galahad_lsqp.h" 3 "Mon May 1 2023" "C interfaces to GALAHAD LSQP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
galahad_lsqp.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include 'galahad_precision\&.h'\fP
.br
\fC#include 'galahad_cfunctions\&.h'\fP
.br
\fC#include 'galahad_fdc\&.h'\fP
.br
\fC#include 'galahad_sbls\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlsqp_control_type\fP"
.br
.ti -1c
.RI "struct \fBlsqp_time_type\fP"
.br
.ti -1c
.RI "struct \fBlsqp_inform_type\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlsqp_initialize\fP (void **data, struct \fBlsqp_control_type\fP *control, int *status)"
.br
.ti -1c
.RI "void \fBlsqp_read_specfile\fP (struct \fBlsqp_control_type\fP *control, const char specfile[])"
.br
.ti -1c
.RI "void \fBlsqp_import\fP (struct \fBlsqp_control_type\fP *control, void **data, int *status, int n, int m, const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
.br
.ti -1c
.RI "void \fBlsqp_reset_control\fP (struct \fBlsqp_control_type\fP *control, void **data, int *status)"
.br
.ti -1c
.RI "void \fBlsqp_solve_qp\fP (void **data, int *status, int n, int m, const real_wp_ w[], const real_wp_ x0[], const real_wp_ g[], const real_wp_ f, int a_ne, const real_wp_ A_val[], const real_wp_ c_l[], const real_wp_ c_u[], const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ c[], real_wp_ y[], real_wp_ z[], int x_stat[], int c_stat[])"
.br
.ti -1c
.RI "void \fBlsqp_information\fP (void **data, struct \fBlsqp_inform_type\fP *inform, int *status)"
.br
.ti -1c
.RI "void \fBlsqp_terminate\fP (void **data, struct \fBlsqp_control_type\fP *control, struct \fBlsqp_inform_type\fP *inform)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Introduction"
.PP
.SS "Purpose"
This package uses a primal-dual interior-point trust-region method to solve the \fBlinear\fP or \fBseparable convex quadratic programming problem\fP \[\mbox{minimize}\;\; 1/2 \sum_{j=1}^n w_j^2 ( x_j - x_j^0 )^2 + g^T x + f \]  
  \n
   minimize 1/2 \sum_{j=1}^n w_j^2 ( x_j - x_j^0 )^2  + g^T x + f
  \n
 subject to the general linear constraints \[c_i^l <= a_i^Tx <= c_i^u, \;\;\; i = 1, ... , m,\]  
  \n
   c_i^l \[<=] a_i^Tx \[<=] c_i^u, i = 1, ... , m,
  \n
 and the simple bound constraints \[x_j^l <= x_j <= x_j^u, \;\;\; j = 1, ... , n,\]  
  \n
   x_j^l \[<=] x_j \[<=] x_j^u, j = 1, ... , n,
  \n
 where the vectors g, w, x^0, c^l, c^u, x^l, x^u and the scalar f are given\&. Any of the constraint bounds c_i^l, c_i^u, x_j^l and x_j^u may be infinite\&. Full advantage is taken of any zero coefficients in the matrix A of vectors a_i\&.
.PP
In the special case where w = 0, g = 0 and f = 0, the so-called analytic center of the feasible set will be found, while linear programming, or constrained least distance, problems may be solved by picking w = 0, or g = 0 and f = 0, respectively\&.
.PP
The more-modern GALAHAD package CQP offers similar functionality, and is often to be preferred\&.
.SS "Authors"
N\&. I\&. M\&. Gould, STFC-Rutherford Appleton Laboratory, England, and Philippe L\&. Toint, University of Namur, Belgium\&.
.PP
C interface, additionally J\&. Fowkes, STFC-Rutherford Appleton Laboratory\&.
.PP
Julia interface, additionally A\&. Montoison and D\&. Orban, Polytechnique MontrÃ©al\&.
.SS "Originally released"
October 2001, C interface January 2022\&.
.SS "Terminology"
The required solution x necessarily satisfies the primal optimality conditions \[\mbox{(1a) $\hspace{66mm} A x = c\hspace{66mm}$}\]  
  \n
  (1a) A x = c
  \n
 and \[\mbox{(1b) $\hspace{52mm} c^l <= c <= c^u, \;\; x^l <= x <= x^u,\hspace{52mm}$} \]  
  \n
  (1b) c^l \[<=] c \[<=] c^u, x^l \[<=] x \[<=] x^u,
  \n
 the dual optimality conditions \[\mbox{(2a) $\hspace{3mm} W^{2} (x -x^0) + g = A^T y + z $}\]  
  \n
  (2a) W^2 (x -x^0) + g = A^T y + z
  \n
 where \[\mbox{(2b) $\hspace{24mm} y = y^l + y^u, \;\; z = z^l + z^u, \,\, y^l >= 0 , \;\; y^u <= 0 , \;\; z^l >= 0 \;\; \mbox{and} \;\; z^u <= 0,\hspace{24mm}$} \]  
  \n
   (2b) y = y^l + y^u, z = z^l + z^u, y^l \[>=] 0, y^u \[<=] 0,
        z^l \[>=] 0 and z^u \[<=] 0,
  \n
 and the complementary slackness conditions \[\mbox{(3) $\hspace{12mm} ( A x - c^l )^T y^l = 0 ,\;\; ( A x - c^u )^T y^u = 0 ,\;\; (x -x^l )^T z^l = 0 \;\; \mbox{and} \;\; (x -x^u )^T z^u = 0,\hspace{12mm} $}\]  
  \n
  (3) (A x - c^l)^T y^l = 0, (A x - c^u)^T y^u = 0,
      (x -x^l)^T z^l = 0 and (x -x^u)^T z^u = 0,
  \n
 where the diagonal matrix W^2 has diagonal entries w_j^2, j = 1, \&.\&.\&. , n, where the vectors y and z are known as the Lagrange multipliers for the general linear constraints, and the dual variables for the bounds, respectively, and where the vector inequalities hold component-wise\&.
.SS "Method"
Primal-dual interior point methods iterate towards a point that satisfies these conditions by ultimately aiming to satisfy (1a), (2a) and (3), while ensuring that (1b) and (2b) are satisfied as strict inequalities at each stage\&. Appropriate norms of the amounts by which (1a), (2a) and (3) fail to be satisfied are known as the primal and dual infeasibility, and the violation of complementary slackness, respectively\&. The fact that (1b) and (2b) are satisfied as strict inequalities gives such methods their other title, namely interior-point methods\&.
.PP
When w /= 0 or g /= 0, the method aims at each stage to reduce the overall violation of (1a), (2a) and (3), rather than reducing each of the terms individually\&. Given an estimate v = (x, c, y, y^l, y^u, z, z^l, z^u) of the primal-dual variables, a correction Delta v = Delta (x, c, y, y^l, y^u z, z^l, z^u) is obtained by solving a suitable linear system of Newton equations for the nonlinear systems (1a), (2a) and a parameterized ``residual trajectory'' perturbation of (3)\&. An improved estimate v + alpha Delta v is then used, where the step-size alpha is chosen as close to 1\&.0 as possible while ensuring both that (1b) and (2b) continue to hold and that the individual components which make up the complementary slackness (3) do not deviate too significantly from their average value\&. The parameter that controls the perturbation of (3) is ultimately driven to zero\&.
.PP
The Newton equations are solved by applying the GALAHAD matrix factorization package SBLS, but there are options to factorize the matrix as a whole (the so-called 'augmented system' approach), to perform a block elimination first (the 'Schur-complement' approach), or to let the method itself decide which of the two previous options is more appropriate\&. The 'Schur-complement' approach is usually to be preferred when all the weights are nonzero or when every variable is bounded (at least one side), but may be inefficient if any of the columns of A is too dense\&.
.PP
When w = 0 and g = 0, the method aims instead firstly to find an interior primal feasible point, that is to ensure that (1a) is satisfied\&. One this has been achieved, attention is switched to mninizing the potential function    
  \n phi(x,c) =
      sum_{i=1}^m log (c_i-c_i^l)  + sum_{i=1}^m log (c_i^u-c_i ) +
      sum_{j=1}^n log (x_j-x_j^l ) + sum_{j=1}^n log (x_j^u-x_j )
  \n
 while ensuring that (1a) remain satisfied and that x and c are strictly interior points for (1b)\&. The global minimizer of this minimization problem is known as the analytic center of the feasible region, and may be viewed as a feasible point that is as far from the boundary of the constraints as possible\&. Note that terms in the above sumations corresponding to infinite bounds are ignored, and that equality constraints are treated specially\&. Appropriate 'primal' Newton corrections are used to generate a sequence of improving points converging to the analytic center, while the iteration is stabilized by performing inesearches along these corrections with respect to \\phi(x,c)\&.
.PP
In order to make the solution as efficient as possible, the variables and constraints are reordered internally by the GALAHAD package QPP prior to solution\&. In particular, fixed variables, and free (unbounded on both sides) constraints are temporarily removed\&. Optionally, the problem may be pre-processed temporarily to eliminate dependent constraints using the GALAHAD package FDC\&. This may improve the performance of the subsequent iteration\&.
.SS "Reference"
The basic algorithm is a generalisation of those of
.PP
Y\&. Zhang (1994), On the convergence of a class of infeasible interior-point methods for the horizontal linear complementarity problem, SIAM J\&. Optimization 4(1) 208-227,
.PP
with a number of enhancements described by
.PP
A\&. R\&. Conn, N\&. I\&. M\&. Gould, D\&. Orban and Ph\&. L\&. Toint (1999)\&. A primal-dual trust-region algorithm for minimizing a non-convex function subject to general inequality and linear equality constraints\&. Mathematical Programming \fB87\fP 215-249\&.
.SS "Call order"
To solve a given problem, functions from the lsqp package must be called in the following order:
.PP
.IP "\(bu" 2
\fBlsqp_initialize\fP - provide default control parameters and set up initial data structures
.IP "\(bu" 2
\fBlsqp_read_specfile\fP (optional) - override control values by reading replacement values from a file
.IP "\(bu" 2
\fBlsqp_import\fP - set up problem data structures and fixed values
.IP "\(bu" 2
\fBlsqp_reset_control\fP (optional) - possibly change control parameters if a sequence of problems are being solved
.IP "\(bu" 2
\fBlsqp_solve_qp\fP - solve the quadratic program
.IP "\(bu" 2
\fBlsqp_information\fP (optional) - recover information about the solution and solution process
.IP "\(bu" 2
\fBlsqp_terminate\fP - deallocate data structures
.PP
.PP
   
  See the examples section for illustrations of use.
  
.SS "Unsymmetric matrix storage formats"
The unsymmetric m by n constraint matrix A may be presented and stored in a variety of convenient input formats\&.
.PP
Both C-style (0 based) and fortran-style (1-based) indexing is allowed\&. Choose \fCcontrol\&.f_indexing\fP as \fCfalse\fP for C style and \fCtrue\fP for fortran style; the discussion below presumes C style, but add 1 to indices for the corresponding fortran version\&.
.PP
Wrappers will automatically convert between 0-based (C) and 1-based (fortran) array indexing, so may be used transparently from C\&. This conversion involves both time and memory overheads that may be avoided by supplying data that is already stored using 1-based indexing\&.
.SS "Dense storage format"
The matrix A is stored as a compact dense matrix by rows, that is, the values of the entries of each row in turn are stored in order within an appropriate real one-dimensional array\&. In this case, component n * i + j of the storage array A_val will hold the value A_{ij} for 0 <= i <= m-1, 0 <= j <= n-1\&.
.SS "Sparse co-ordinate storage format"
Only the nonzero entries of the matrices are stored\&. For the l-th entry, 0 <= l <= ne-1, of A, its row index i, column index j and value A_{ij}, 0 <= i <= m-1, 0 <= j <= n-1, are stored as the l-th components of the integer arrays A_row and A_col and real array A_val, respectively, while the number of nonzeros is recorded as A_ne = ne\&.
.SS "Sparse row-wise storage format"
Again only the nonzero entries are stored, but this time they are ordered so that those in row i appear directly before those in row i+1\&. For the i-th row of A the i-th component of the integer array A_ptr holds the position of the first entry in this row, while A_ptr(m) holds the total number of entries\&. The column indices j, 0 <= j <= n-1, and values A_{ij} of the nonzero entries in the i-th row are stored in components l = A_ptr(i), \&.\&.\&., A_ptr(i+1)-1, 0 <= i <= m-1, of the integer array A_col, and real array A_val, respectively\&. For sparse matrices, this scheme almost always requires less storage than its predecessor\&. 
.SH "Data Structure Documentation"
.PP 
.SH "struct lsqp_control_type"
.PP 
control derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
bool \fIf_indexing\fP use C or Fortran sparse matrix indexing 
.br
.PP
int \fIerror\fP error and warning diagnostics occur on stream error 
.br
.PP
int \fIout\fP general output occurs on stream out 
.br
.PP
int \fIprint_level\fP the level of output required is specified by print_level 
.br
.PP
int \fIstart_print\fP any printing will start on this iteration 
.br
.PP
int \fIstop_print\fP any printing will stop on this iteration 
.br
.PP
int \fImaxit\fP at most maxit inner iterations are allowed 
.br
.PP
int \fIfactor\fP the factorization to be used\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 automatic 
.IP "\(bu" 2
1 Schur-complement factorization 
.IP "\(bu" 2
2 augmented-system factorization 
.PP

.br
.PP
int \fImax_col\fP the maximum number of nonzeros in a column of A which is permitted with the Schur-complement factorization 
.br
.PP
int \fIindmin\fP an initial guess as to the integer workspace required by SBLS 
.br
.PP
int \fIvalmin\fP an initial guess as to the real workspace required by SBLS 
.br
.PP
int \fIitref_max\fP the maximum number of iterative refinements allowed 
.br
.PP
int \fIinfeas_max\fP the number of iterations for which the overall infeasibility of the problem is not reduced by at least a factor \&.reduce_infeas before the problem is flagged as infeasible (see reduce_infeas) 
.br
.PP
int \fImuzero_fixed\fP the initial value of the barrier parameter will not be changed for the first muzero_fixed iterations 
.br
.PP
int \fIrestore_problem\fP indicate whether and how much of the input problem should be restored on output\&. Possible values are 
.PD 0

.IP "\(bu" 2
0 nothing restored 
.IP "\(bu" 2
1 scalar and vector parameters 
.IP "\(bu" 2
2 all parameters 
.PP

.br
.PP
int \fIindicator_type\fP specifies the type of indicator function used\&. Possible values are 
.PD 0

.IP "\(bu" 2
1 primal indicator: constraint active if and only if the distance to nearest bound <= \&.indicator_p_tol 
.IP "\(bu" 2
2 primal-dual indicator: constraint active if and only if the distance to nearest bound <= \&.indicator_tol_pd * size of corresponding multiplier 
.IP "\(bu" 2
3 primal-dual indicator: constraint active if and only if the distance to the nearest bound <= \&.indicator_tol_tapia * distance to same bound at previous iteration 
.PP

.br
.PP
int \fIextrapolate\fP should extrapolation be used to track the central path? Possible values 
.PD 0

.IP "\(bu" 2
0 never 
.IP "\(bu" 2
1 after the final major iteration 
.IP "\(bu" 2
2 at each major iteration (unused at present) 
.PP

.br
.PP
int \fIpath_history\fP the maximum number of previous path points to use when fitting the data (unused at present) 
.br
.PP
int \fIpath_derivatives\fP the maximum order of path derivative to use (unused at present) 
.br
.PP
int \fIfit_order\fP the order of (Puiseux) series to fit to the path data: $<=0 to fit all data (unused at present) 
.br
.PP
int \fIsif_file_device\fP specifies the unit number to write generated SIF file describing the current problem 
.br
.PP
real_wp_ \fIinfinity\fP any bound larger than infinity in modulus will be regarded as infinite 
.br
.PP
real_wp_ \fIstop_p\fP the required accuracy for the primal infeasibility 
.br
.PP
real_wp_ \fIstop_d\fP the required accuracy for the dual infeasibility 
.br
.PP
real_wp_ \fIstop_c\fP the required accuracy for the complementarity 
.br
.PP
real_wp_ \fIprfeas\fP initial primal variables will not be closer than prfeas from their bounds 
.br
.PP
real_wp_ \fIdufeas\fP initial dual variables will not be closer than dufeas from their bounds 
.br
.PP
real_wp_ \fImuzero\fP the initial value of the barrier parameter\&. If muzero is not positive, it will be reset to an appropriate value 
.br
.PP
real_wp_ \fIreduce_infeas\fP if the overall infeasibility of the problem is not reduced by at least a factor reduce_infeas over \&.infeas_max iterations, the problem is flagged as infeasible (see infeas_max) 
.br
.PP
real_wp_ \fIpotential_unbounded\fP if W=0 and the potential function value is smaller than potential_unbounded * number of one-sided bounds, the analytic center will be flagged as unbounded 
.br
.PP
real_wp_ \fIpivot_tol\fP the threshold pivot used by the matrix factorization\&. See the documentation for SBLS for details 
.br
.PP
real_wp_ \fIpivot_tol_for_dependencies\fP the threshold pivot used by the matrix factorization when attempting to detect linearly dependent constraints\&. See the documentation for SBLS for details 
.br
.PP
real_wp_ \fIzero_pivot\fP any pivots smaller than zero_pivot in absolute value will be regarded to zero when attempting to detect linearly dependent constraints 
.br
.PP
real_wp_ \fIidentical_bounds_tol\fP any pair of constraint bounds (c_l,c_u) or (x_l,x_u) that are closer tha identical_bounds_tol will be reset to the average of their values 
.br
.PP
real_wp_ \fImu_min\fP start terminal extrapolation when mu reaches mu_min 
.br
.PP
real_wp_ \fIindicator_tol_p\fP if \&.indicator_type = 1, a constraint/bound will be deemed to be active if and only if the distance to nearest bound $<= \&.indicator_p_tol 
.br
.PP
real_wp_ \fIindicator_tol_pd\fP if \&.indicator_type = 2, a constraint/bound will be deemed to be active if and only if the distance to nearest bound $<= \&.indicator_tol_pd * size of corresponding multiplier 
.br
.PP
real_wp_ \fIindicator_tol_tapia\fP if \&.indicator_type = 3, a constraint/bound will be deemed to be active if and only if the distance to nearest bound $<= \&.indicator_tol_tapia * distance to same bound at previous iteration 
.br
.PP
real_wp_ \fIcpu_time_limit\fP the maximum CPU time allowed (-ve means infinite) 
.br
.PP
real_wp_ \fIclock_time_limit\fP the maximum elapsed clock time allowed (-ve means infinite) 
.br
.PP
bool \fIremove_dependencies\fP the equality constraints will be preprocessed to remove any linear dependencies if true 
.br
.PP
bool \fItreat_zero_bounds_as_general\fP any problem bound with the value zero will be treated as if it were a general value if true 
.br
.PP
bool \fIjust_feasible\fP if \&.just_feasible is true, the algorithm will stop as soon as a feasible point is found\&. Otherwise, the optimal solution to the problem will be found 
.br
.PP
bool \fIgetdua\fP if \&.getdua, is true, advanced initial values are obtained for the dual variables 
.br
.PP
bool \fIpuiseux\fP If extrapolation is to be used, decide between Puiseux and Taylor series\&. 
.br
.PP
bool \fIfeasol\fP if \&.feasol is true, the final solution obtained will be perturbed so tha variables close to their bounds are moved onto these bounds 
.br
.PP
bool \fIbalance_initial_complentarity\fP if \&.balance_initial_complentarity is true, the initial complemetarity is required to be balanced 
.br
.PP
bool \fIuse_corrector\fP if \&.use_corrector, a corrector step will be used 
.br
.PP
bool \fIarray_syntax_worse_than_do_loop\fP if \&.array_syntax_worse_than_do_loop is true, f77-style do loops will be used rather than f90-style array syntax for vector operations 
.br
.PP
bool \fIspace_critical\fP if \&.space_critical true, every effort will be made to use as little space as possible\&. This may result in longer computation time 
.br
.PP
bool \fIdeallocate_error_fatal\fP if \&.deallocate_error_fatal is true, any array/pointer deallocation error will terminate execution\&. Otherwise, computation will continue 
.br
.PP
bool \fIgenerate_sif_file\fP if \&.generate_sif_file is \&.true\&. if a SIF file describing the current problem is to be generated 
.br
.PP
char \fIsif_file_name[31]\fP name of generated SIF file containing input problem 
.br
.PP
char \fIprefix[31]\fP all output lines will be prefixed by \&.prefix(2:LEN(TRIM(\&.prefix))-1) where \&.prefix contains the required string enclosed in quotes, e\&.g\&. 'string' or 'string' 
.br
.PP
struct fdc_control_type \fIfdc_control\fP control parameters for FDC 
.br
.PP
struct sbls_control_type \fIsbls_control\fP control parameters for SBLS 
.br
.PP
.RE
.PP
.SH "struct lsqp_time_type"
.PP 
time derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
real_wp_ \fItotal\fP the total CPU time spent in the package 
.br
.PP
real_wp_ \fIpreprocess\fP the CPU time spent preprocessing the problem 
.br
.PP
real_wp_ \fIfind_dependent\fP the CPU time spent detecting linear dependencies 
.br
.PP
real_wp_ \fIanalyse\fP the CPU time spent analysing the required matrices prior to factorization 
.br
.PP
real_wp_ \fIfactorize\fP the CPU time spent factorizing the required matrices 
.br
.PP
real_wp_ \fIsolve\fP the CPU time spent computing the search direction 
.br
.PP
real_wp_ \fIclock_total\fP the total clock time spent in the package 
.br
.PP
real_wp_ \fIclock_preprocess\fP the clock time spent preprocessing the problem 
.br
.PP
real_wp_ \fIclock_find_dependent\fP the clock time spent detecting linear dependencies 
.br
.PP
real_wp_ \fIclock_analyse\fP the clock time spent analysing the required matrices prior to factorization 
.br
.PP
real_wp_ \fIclock_factorize\fP the clock time spent factorizing the required matrices 
.br
.PP
real_wp_ \fIclock_solve\fP the clock time spent computing the search direction 
.br
.PP
.RE
.PP
.SH "struct lsqp_inform_type"
.PP 
inform derived type as a C struct 
.PP
\fBData Fields:\fP
.RS 4
int \fIstatus\fP return status\&. See LSQP_solve for details 
.br
.PP
int \fIalloc_status\fP the status of the last attempted allocation/deallocation 
.br
.PP
char \fIbad_alloc[81]\fP the name of the array for which an allocation/deallocation error ocurred 
.br
.PP
int \fIiter\fP the total number of iterations required 
.br
.PP
int \fIfactorization_status\fP the return status from the factorization 
.br
.PP
int64_t \fIfactorization_integer\fP the total integer workspace required for the factorization 
.br
.PP
int64_t \fIfactorization_real\fP the total real workspace required for the factorization 
.br
.PP
int \fInfacts\fP the total number of factorizations performed 
.br
.PP
int \fInbacts\fP the total number of 'wasted' function evaluations during the linesearch 
.br
.PP
real_wp_ \fIobj\fP the value of the objective function at the best estimate of the solution determined by LSQP_solve_qp 
.br
.PP
real_wp_ \fIpotential\fP the value of the logarithmic potential function sum -log(distance to constraint boundary) 
.br
.PP
real_wp_ \fInon_negligible_pivot\fP the smallest pivot which was not judged to be zero when detecting linear dependent constraints 
.br
.PP
bool \fIfeasible\fP is the returned 'solution' feasible? 
.br
.PP
struct \fBlsqp_time_type\fP \fItime\fP timings (see above) 
.br
.PP
struct fdc_inform_type \fIfdc_inform\fP inform parameters for FDC 
.br
.PP
struct sbls_inform_type \fIsbls_inform\fP inform parameters for SBLS 
.br
.PP
.RE
.PP
.SH "Function Documentation"
.PP 
.SS "void lsqp_initialize (void ** data, struct \fBlsqp_control_type\fP * control, int * status)"
Set default control values and initialize private data
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBlsqp_control_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void lsqp_read_specfile (struct \fBlsqp_control_type\fP * control, const char specfile[])"
Read the content of a specification file, and assign values associated with given keywords to the corresponding control parameters\&. By default, the spcification file will be named RUNLSQP\&.SPC and lie in the current directory\&. Refer to Table 2\&.1 in the fortran documentation provided in $GALAHAD/doc/lsqp\&.pdf for a list of keywords that may be set\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct containing control information (see \fBlsqp_control_type\fP)
.br
\fIspecfile\fP is a character string containing the name of the specification file 
.RE
.PP

.SS "void lsqp_import (struct \fBlsqp_control_type\fP * control, void ** data, int * status, int n, int m, const char A_type[], int A_ne, const int A_row[], const int A_col[], const int A_ptr[])"
Import problem data into internal storage prior to solution\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBlsqp_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful 
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 or m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables\&.
.br
\fIm\fP is a scalar variable of type int, that holds the number of general linear constraints\&.
.br
\fIA_type\fP is a one-dimensional array of type char that specifies the \fBunsymmetric storage scheme \fP used for the constraint Jacobian, A\&. It should be one of 'coordinate', 'sparse_by_rows' or 'dense; lower or upper case variants are allowed\&.
.br
\fIA_ne\fP is a scalar variable of type int, that holds the number of entries in A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes\&.
.br
\fIA_row\fP is a one-dimensional array of size A_ne and type int, that holds the row indices of A in the sparse co-ordinate storage scheme\&. It need not be set for any of the other schemes, and in this case can be NULL\&.
.br
\fIA_col\fP is a one-dimensional array of size A_ne and type int, that holds the column indices of A in either the sparse co-ordinate, or the sparse row-wise storage scheme\&. It need not be set when the dense or diagonal storage schemes are used, and in this case can be NULL\&.
.br
\fIA_ptr\fP is a one-dimensional array of size n+1 and type int, that holds the starting position of each row of A, as well as the total number of entries, in the sparse row-wise storage scheme\&. It need not be set when the other schemes are used, and in this case can be NULL\&. 
.RE
.PP

.SS "void lsqp_reset_control (struct \fBlsqp_control_type\fP * control, void ** data, int * status)"
Reset control parameters after import if required\&.
.PP
\fBParameters\fP
.RS 4
\fIcontrol\fP is a struct whose members provide control paramters for the remaining prcedures (see \fBlsqp_control_type\fP)
.br
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are: 
.PD 0

.IP "\(bu" 2
0\&. The import was succesful\&. 
.PP
.RE
.PP

.SS "void lsqp_solve_qp (void ** data, int * status, int n, int m, const real_wp_ w[], const real_wp_ x0[], const real_wp_ g[], const real_wp_ f, int a_ne, const real_wp_ A_val[], const real_wp_ c_l[], const real_wp_ c_u[], const real_wp_ x_l[], const real_wp_ x_u[], real_wp_ x[], real_wp_ c[], real_wp_ y[], real_wp_ z[], int x_stat[], int c_stat[])"
Solve the separable convex quadratic program\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIstatus\fP is a scalar variable of type int, that gives the entry and exit status from the package\&. 
.br
 Possible exit are: 
.PD 0

.IP "\(bu" 2
0\&. The run was succesful
.PP
.PD 0
.IP "\(bu" 2
-1\&. An allocation error occurred\&. A message indicating the offending array is written on unit control\&.error, and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-2\&. A deallocation error occurred\&. A message indicating the offending array is written on unit control\&.error and the returned allocation status and a string containing the name of the offending array are held in inform\&.alloc_status and inform\&.bad_alloc respectively\&. 
.IP "\(bu" 2
-3\&. The restrictions n > 0 and m > 0 or requirement that a type contains its relevant string 'dense', 'coordinate', 'sparse_by_rows', 'diagonal', 'scaled_identity', 'identity', 'zero' or 'none' has been violated\&. 
.IP "\(bu" 2
-5\&. The simple-bound constraints are inconsistent\&. 
.IP "\(bu" 2
-7\&. The constraints appear to have no feasible point\&. 
.IP "\(bu" 2
-9\&. The analysis phase of the factorization failed; the return status from the factorization package is given in the component inform\&.factor_status 
.IP "\(bu" 2
-10\&. The factorization failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-11\&. The solution of a set of linear equations using factors from the factorization package failed; the return status from the factorization package is given in the component inform\&.factor_status\&. 
.IP "\(bu" 2
-16\&. The problem is so ill-conditioned that further progress is impossible\&. 
.IP "\(bu" 2
-17\&. The step is too small to make further impact\&. 
.IP "\(bu" 2
-18\&. Too many iterations have been performed\&. This may happen if control\&.maxit is too small, but may also be symptomatic of a badly scaled problem\&. 
.IP "\(bu" 2
-19\&. The CPU time limit has been reached\&. This may happen if control\&.cpu_time_limit is too small, but may also be symptomatic of a badly scaled problem\&.
.PP
.br
\fIn\fP is a scalar variable of type int, that holds the number of variables
.br
\fIm\fP is a scalar variable of type int, that holds the number of general linear constraints\&.
.br
\fIw\fP is a one-dimensional array of size n and type double, that holds the values of the weights w\&.
.br
\fIx0\fP is a one-dimensional array of size n and type double, that holds the values of the shifts x^0\&.
.br
\fIg\fP is a one-dimensional array of size n and type double, that holds the linear term g of the objective function\&. The j-th component of g, j = 0, \&.\&.\&. , n-1, contains g_j \&.
.br
\fIf\fP is a scalar of type double, that holds the constant term f of the objective function\&.
.br
\fIa_ne\fP is a scalar variable of type int, that holds the number of entries in the constraint Jacobian matrix A\&.
.br
\fIA_val\fP is a one-dimensional array of size a_ne and type double, that holds the values of the entries of the constraint Jacobian matrix A in any of the available storage schemes\&.
.br
\fIc_l\fP is a one-dimensional array of size m and type double, that holds the lower bounds c^l on the constraints A x\&. The i-th component of c_l, i = 0, \&.\&.\&. , m-1, contains c^l_i\&.
.br
\fIc_u\fP is a one-dimensional array of size m and type double, that holds the upper bounds c^l on the constraints A x\&. The i-th component of c_u, i = 0, \&.\&.\&. , m-1, contains c^u_i\&.
.br
\fIx_l\fP is a one-dimensional array of size n and type double, that holds the lower bounds x^l on the variables x\&. The j-th component of x_l, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx_u\fP is a one-dimensional array of size n and type double, that holds the upper bounds x^l on the variables x\&. The j-th component of x_u, j = 0, \&.\&.\&. , n-1, contains x^l_j\&.
.br
\fIx\fP is a one-dimensional array of size n and type double, that holds the values x of the optimization variables\&. The j-th component of x, j = 0, \&.\&.\&. , n-1, contains x_j\&.
.br
\fIc\fP is a one-dimensional array of size m and type double, that holds the residual c(x)\&. The i-th component of c, i = 0, \&.\&.\&. , m-1, contains c_i(x) \&.
.br
\fIy\fP is a one-dimensional array of size n and type double, that holds the values y of the Lagrange multipliers for the general linear constraints\&. The j-th component of y, i = 0, \&.\&.\&. , m-1, contains y_i\&.
.br
\fIz\fP is a one-dimensional array of size n and type double, that holds the values z of the dual variables\&. The j-th component of z, j = 0, \&.\&.\&. , n-1, contains z_j\&.
.br
\fIx_stat\fP is a one-dimensional array of size n and type int, that gives the optimal status of the problem variables\&. If x_stat(j) is negative, the variable x_j most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&.
.br
\fIc_stat\fP is a one-dimensional array of size m and type int, that gives the optimal status of the general linear constraints\&. If c_stat(i) is negative, the constraint value a_i^T x most likely lies on its lower bound, if it is positive, it lies on its upper bound, and if it is zero, it lies between its bounds\&. 
.RE
.PP

.SS "void lsqp_information (void ** data, struct \fBlsqp_inform_type\fP * inform, int * status)"
Provides output information\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIinform\fP is a struct containing output information (see \fBlsqp_inform_type\fP)
.br
\fIstatus\fP is a scalar variable of type int, that gives the exit status from the package\&. Possible values are (currently): 
.PD 0

.IP "\(bu" 2
0\&. The values were recorded succesfully 
.PP
.RE
.PP

.SS "void lsqp_terminate (void ** data, struct \fBlsqp_control_type\fP * control, struct \fBlsqp_inform_type\fP * inform)"
Deallocate all internal private storage\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP holds private internal data
.br
\fIcontrol\fP is a struct containing control information (see \fBlsqp_control_type\fP)
.br
\fIinform\fP is a struct containing output information (see \fBlsqp_inform_type\fP) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for C interfaces to GALAHAD LSQP from the source code\&.
