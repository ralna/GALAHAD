# Building GALAHAD with [meson](https://mesonbuild.com)

All commands below are to be run from the top of the GALAHAD source tree.

##  Install meson

Refer to https://mesonbuild.com/Getting-meson.html

## Set up the build directory and select build options

The command
```
meson setup builddir [options...]
```
creates the build directory `builddir` and populates it in preparation for a build.

Currently supported options with their default value:
* `-Dmodules=true`: install Fortran modules;
* `-Dciface=true`: build the C interfaces;
* `-Dpythoniface=false`: build the Python interfaces in double precision;
* `-Dexamples=true`: generate the examples;
* `-Dtests=true`: generate the tests;
* `-Dsingle=true`: generate the single precision library, tests and examples;
* `-Ddouble=true`: generate the double precision library, tests and examples;
* `-Dssids=true`: build ssids;
* `-Dlibblas=openblas`: BLAS library switching;
* `-Dliblapack=openblas`: LAPACK library switching;
* `-Dlibmetis=metis`: METIS library switching;
* `-Dlibhsl=hsl`: HSL library switching;
* `-Dlibcutest=cutest`: HSL library switching;
* `-Dlibwsmp=wsmp`: WSMP library switching;
* `-Dlibumfpack=umfpack`: UMFPACK library switching;
* `-Dlibpardiso=pardiso`: PARDISO library switching;
* `-Dlibspmf=spmf`: SPMF library switching;
* `-Dlibpastix=pastix`: PASTIX library switching;
* `-Dlibmkl_pardiso=mkl_pardiso`: Intel MKL PARDISO library switching;
* `-Dlibampl=ampl`: AMPL library switching;
* `-Dlibblas_path=[]`: additional directories to search BLAS library;
* `-Dliblapack_path=[]`: additional directories to search LAPACK library;
* `-Dlibmetis_path=[]`: additional directories to search METIS library;
* `-Dlibhsl_path=[]`: additional directories to search HSL library;
* `-Dlibcutest_path=[]`: additional directories to search CUTEST library;
* `-Dlibwsmp_path=[]`: additional directories to search WSMP library;
* `-Dlibumfpack_path=[]`: additional directories to search UMFPACK library;
* `-Dlibpardiso_path=[]`: additional directories to search PARDISO library;
* `-Dlibspmf_path=[]`: additional directories to search SPMF library;
* `-Dlibpastix_path=[]`: additional directories to search PASTIX library;
* `-Dlibmumps_path=[]`: additional directories to search MUMPS libraries;
* `-Dlibmkl_pardiso_path=[]`: additional directories to search Intel MKL library;
* `-Dlibampl_path=[]`: additional directories to search AMPL library library;
* `-Dlibhsl_modules[]`: additional directories to search HSL modules;
* `-Dlibmetis_version=5`: version of the METIS library.

Non-default compilers can be selected by setting the `CC`, `CXX` and `FC` shell variables.
For instance,
```
CC=icc CXX=icpc FC=ifort meson setup builddir [options...]
CC=icx CXX=icpx FC=ifx meson setup builddir [options...]
```
See https://mesonbuild.com/Reference-tables.html for supported compilers and linkers.

## Build

The command
```
meson compile -C builddir
```
should result in several shared libraries and executables in `builddir`.
The executables are the example programs and unit tests.
They can be run right away:
```
./builddir/glrts
```

It is also possible (and equivalent) to build directly with Ninja:
```
ninja -C builddir
```

## Run Tests

The command
```
meson test -C builddir
```
runs the unit tests.
A unit test succeeds when the return code of the test executable is zero.

Similarly, the tests can be executed directly with Ninja:
```
ninja test -C builddir
```

Specify test(s) by name like:
```
meson test -C builddir ugo_single
```

Tests belonging to a suite can be run as follows:
```
meson test -C builddir --suite ugo
meson test -C builddir --suite single
meson test -C builddir --suite C
```

Currently supported suites:
* `package`;
* `fortran`;
* `C`;
* `single`;
* `double`.

## Info

If ninja fails, run "ninja reconfigure" or "meson --reconfigure" to force Meson to regenerate.

If build failures persist, run "meson setup --wipe builddir [options...]" to rebuild from scratch.
