name: standalone
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: GALAHAD/${{ matrix.os }}/${{ matrix.fc_cmd }}/${{ matrix.compiler_version }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler_version: [12]
        include:
          - compiler: gnu
            cc_cmd: gcc
            fc_cmd: gfortran
            cxx_cmd: g++
          - os: ubuntu-latest
            compiler: intel-llvm
            compiler_version: 2023.2.0
            cc_cmd: icx
            fc_cmd: ifort
            cxx_cmd: icpx
            allow_failure: true
          # - os: ubuntu-latest
          #   compiler: intel-llvm
          #   compiler_version: 2023.2
          #   cc_cmd: icx
          #   fc_cmd: ifx
          #   cxx_cmd: icpx
          #   allow_failure: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out GALAHAD
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Meson and Ninja
        run: pip install meson ninja numpy

      - name: Set the environment variable GALAHAD
        shell: bash
        run: |
          echo "GALAHAD=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "DEPS=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          echo "ARCHDEFS=$GITHUB_WORKSPACE/../ARCHDefs" >> $GITHUB_ENV
          echo "SIFDECODE=$GITHUB_WORKSPACE/../SIFDecode" >> $GITHUB_ENV
          echo "CUTEST=$GITHUB_WORKSPACE/../CUTEst" >> $GITHUB_ENV
          echo "MYARCH=pc64.lnx.gfo" >> $GITHUB_ENV

      - name: Set the environment variable LD_LIBRARY_PATH
        if: matrix.os != 'windows-latest'
        shell: bash
        run: echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib" >> $GITHUB_ENV

      - name: Set environment variables for OpenMP
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "OMP_CANCELLATION=TRUE" >> $GITHUB_ENV
          echo "OMP_NESTED=TRUE" >> $GITHUB_ENV
          echo "OMP_PROC_BIND=TRUE" >> $GITHUB_ENV

      - name: Install GNU compilers
        if: matrix.compiler == 'gnu'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ matrix.compiler_version }}

      - name: Install classic Intel compilers
        if: matrix.compiler == 'intel'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: intel-classic
          version: ${{ matrix.compiler_version }}

      - name: Install nextgen Intel compilers
        if: matrix.compiler == 'intel-llvm'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: intel
          version: ${{ matrix.compiler_version }}

      - name: Install CUTEst
        if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gnu'
        shell: bash
        run: |
          cd $DEPS
          wget https://github.com/ralna/ARCHDefs/archive/refs/tags/v2.1.24.tar.gz
          tar -xzvf v2.1.24.tar.gz
          mv ARCHDefs-2.1.24 ARCHDefs
          wget https://github.com/ralna/SIFDecode/archive/refs/tags/v2.0.6.tar.gz
          tar -xzvf v2.0.6.tar.gz
          mv SIFDecode-2.0.6 SIFDecode
          wget https://github.com/ralna/CUTEst/archive/refs/tags/v2.0.17.tar.gz
          tar -xzvf v2.0.17.tar.gz
          mv CUTEst-2.0.17 CUTEst
          cd $CUTEST               # build CUTEst
          echo "1" > cutest.opts   # PC64
          echo "1" >> cutest.opts  # Linux
          echo "n" >> cutest.opts  # No, I don't want to review and modify the system commands
          echo "1" >> cutest.opts  # gfortran
          echo "2" >> cutest.opts  # build all tools except Matlab
          echo "2" >> cutest.opts  # gcc
          echo "nnydy" >> cutest.opts
          ./install_cutest < cutest.opts
          mv $CUTEST/objects/$MYARCH/single/licutest.a $CUTEST/objects/$MYARCH/single/libcutest_single.a
          mv $CUTEST/objects/$MYARCH/double/licutest.a $CUTEST/objects/$MYARCH/double/libcutest_double.a

      - name: Setup GALAHAD
        shell: bash
        run: |
          if [[ "${{matrix.compiler}}" == "gnu" && "${{matrix.os}}" == "ubuntu-latest" ]]; then

          meson setup builddir --prefix=$GITHUB_WORKSPACE/galahad -Dpythoniface=true \
                               -Dlibcutest_single_path=$CUTEST/objects/$MYARCH/single \
                               -Dlibcutest_double_path=$CUTEST/objects/$MYARCH/double \
                               -Dlibcutest_single_modules=$CUTEST/modules/$MYARCH/single \
                               -Dlibcutest_double_modules=$CUTEST/modules/$MYARCH/double
          else
            meson setup builddir --prefix=$GITHUB_WORKSPACE/galahad -Dpythoniface=true
          fi
        env:
          CC: ${{ matrix.cc_cmd }}
          FC: ${{ matrix.fc_cmd }}
          CXX: ${{ matrix.cxx_cmd }}

      - name: Build GALAHAD
        shell: bash
        run: |
          meson compile -C builddir
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.os }}_${{ matrix.fc_cmd }}_${{ matrix.compiler_version }}_meson-log.txt
          path: builddir/meson-logs/meson-log.txt

      - name: Install GALAHAD
        shell: bash
        run: |
          meson install -C builddir
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.os }}_${{ matrix.fc_cmd }}_${{ matrix.compiler_version }}_install-log.txt
          path: builddir/meson-logs/install-log.txt

      # Uncomment this section to obtain ssh access to VM
      # - name: Setup tmate session
      #   if: matrix.os == 'windows-latest'
      #   uses: mxschmitt/action-tmate@v3

      - name: Test GALAHAD
        shell: bash
        run: |
          meson test -C builddir
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.os }}_${{ matrix.fc_cmd }}_${{ matrix.compiler_version }}_testlog.txt
          path: builddir/meson-logs/testlog.txt
