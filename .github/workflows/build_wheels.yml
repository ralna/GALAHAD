name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
on: [pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
#on:
#  release:
#    types:
#      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Note: builds on these are backward compatible
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set macOS deployment target
        if: runner.os == 'macOS'
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | cut -d '.' -f 1-2)" >> $GITHUB_ENV

      - name: Set macOS OpenBLAS paths
        if: runner.os == 'macOS'
        run: |
          if [[ "${{matrix.os}}" == "macos-14" ]]; then
            echo PKG_CONFIG_PATH="/opt/homebrew/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
          fi
          if [[ "${{matrix.os}}" == "macos-13" ]]; then
            echo PKG_CONFIG_PATH="/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
          fi

      - name: Build wheels
        run: pipx run cibuildwheel==2.23.3
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
        env:
          # list of python versions and platforms to build on
          CIBW_BUILD: cp3{10,11,12,13}-manylinux_x86_64 cp3{10,11,12,13}-macosx_x86_64 cp3{10,11,12,13}-macosx_arm64 cp3{10,11,12,13}-win_amd64

          # build with gcc/gfortran on macOS
          CIBW_ENVIRONMENT_MACOS: CC="gcc-14" CXX="g++-14" FC="gfortran-14"

          # build with OpenBLAS
          CIBW_BEFORE_ALL_LINUX: yum install -y openblas-devel
          CIBW_BEFORE_ALL_MACOS: brew install openblas

          # cibuildwheel doesn't yet ship a default repair command for Windows
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

          # test built wheels
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: python -c 'from galahad import ugo; options = ugo.initialize(); ugo.terminate()'

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # To publish when a GitHub Release is created, use the following rule:
    #if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
