name: "My composite action -- Meson"
description: 'Compile GALAHAD with Meson'

inputs:
  os:
    description: 'Operating system'
    required: true
  compiler:
    description: 'Compiler'
    required: true
  version:
    description: 'Compiler version'
    required: true
  int:
    description: 'Integer type'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Meson and Ninja
      shell: bash
      run: |
        pip install meson==1.6.1
        pip install ninja numpy

    - name: Set the environment variables
      shell: bash
      run: |
        echo "GALAHAD=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "DEPS=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
        echo "CUTEST=$GITHUB_WORKSPACE/../CUTEst" >> $GITHUB_ENV
        if [[ "${{ inputs.os }}" == "ubuntu-latest" ]]; then
          echo "LIBDIR=lib" >> $GITHUB_ENV
          echo "DLEXT=so" >> $GITHUB_ENV
          echo "PLATFORM=x86_64-linux-gnu" >> $GITHUB_ENV
          echo "JULIA_GALAHAD_LIBRARY_PATH=$GITHUB_WORKSPACE/galahad/lib" >> $GITHUB_ENV
        fi
        if [[ "${{inputs.os}}" == "macos-13" ]]; then
          echo "LIBDIR=lib" >> $GITHUB_ENV
          echo "DLEXT=dylib" >> $GITHUB_ENV
          echo "PLATFORM=x86_64-apple-darwin" >> $GITHUB_ENV
          echo "JULIA_GALAHAD_LIBRARY_PATH=$GITHUB_WORKSPACE/galahad/lib" >> $GITHUB_ENV
        fi
        if [[ "${{inputs.os}}" == "macos-latest" ]]; then
          echo "LIBDIR=lib" >> $GITHUB_ENV
          echo "DLEXT=dylib" >> $GITHUB_ENV
          echo "PLATFORM=aarch64-apple-darwin" >> $GITHUB_ENV
          echo "JULIA_GALAHAD_LIBRARY_PATH=$GITHUB_WORKSPACE/galahad/lib" >> $GITHUB_ENV
        fi
        if [[ "${{ inputs.os }}" == "windows-latest" ]]; then
          echo "LIBDIR=bin" >> $GITHUB_ENV
          echo "DLEXT=dll" >> $GITHUB_ENV
          echo "PLATFORM=x86_64-w64-mingw32" >> $GITHUB_ENV
          echo "JULIA_GALAHAD_LIBRARY_PATH=$GITHUB_WORKSPACE/galahad/bin" >> $GITHUB_ENV
          choco install wget
        fi

    - name: Set the environment variables LIBRARY_PATH, LD_LIBRARY_PATH and DYLD_LIBRARY_PATH
      shell: bash
      run: |
        if [[ "${{ inputs.os }}" == "ubuntu-latest" ]]; then
          echo "LIBRARY_PATH=$LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib:$GITHUB_WORKSPACE/../deps/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib:$GITHUB_WORKSPACE/../deps/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
        fi
        if [[ "${{ inputs.os }}" == "macos-13" || "${{inputs.os}}" == "macos-latest" ]]; then
          echo "LIBRARY_PATH=$LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib:$GITHUB_WORKSPACE/../deps/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib:$GITHUB_WORKSPACE/../deps/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$GITHUB_WORKSPACE/galahad/lib:$GITHUB_WORKSPACE/../deps/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH:/opt/intel/oneapi/compiler/2023.2.0/mac/compiler/lib:$GITHUB_WORKSPACE/../CUTEst/lib" >> $GITHUB_ENV
        fi
        if [[ "${{ inputs.os }}" == "windows-latest" ]]; then
          echo "$GITHUB_WORKSPACE/../deps/bin" >> "$GITHUB_PATH"
          echo "$GITHUB_WORKSPACE/../CUTEst/bin" >> "$GITHUB_PATH"
          echo "$GITHUB_WORKSPACE/galahad/bin" >> "$GITHUB_PATH"
        fi

    - name: Set environment variables for OpenMP
      shell: bash
      run: |
        echo "OMP_CANCELLATION=TRUE" >> $GITHUB_ENV
        echo "OMP_PROC_BIND=TRUE" >> $GITHUB_ENV

    - name: Install compilers
      uses: fortran-lang/setup-fortran@main
      with:
        compiler: ${{ inputs.compiler }}
        version: ${{ inputs.version }}

    - name: Update Intel compilers
      if: inputs.compiler == 'intel'
      shell: bash
      run: echo "FC=ifort" >> $GITHUB_ENV

    - name: Install CUTEst
      if: inputs.os != 'windows-latest'
      shell: bash
      run: |
        VERSION_CUTEST="2.4.0"
        INT64="false"
        if [[ "${{ inputs.int }}" == "64" ]]; then
          INT64="true"
        fi
        cd ..
        if [[ "${{ inputs.os }}" == "windows-latest" ]]; then
          wget https://github.com/ralna/CUTEst/archive/refs/tags/v${VERSION_CUTEST}.zip
          unzip v${VERSION_CUTEST}.zip
        else
          wget https://github.com/ralna/CUTEst/archive/refs/tags/v${VERSION_CUTEST}.tar.gz
          tar -xzvf v${VERSION_CUTEST}.tar.gz
        fi
        cd CUTEst-${VERSION_CUTEST}
        meson setup builddir --buildtype=debug \
                             --prefix=$CUTEST \
                             -Ddefault_library=shared \
                             -Dquadruple=true \
                             -Dint64=${INT64}
        meson compile -C builddir
        meson install -C builddir

    - name: Install dummy libHSL
      if: inputs.os != 'windows-latest'
      shell: bash
      run: |
        VERSION_LIBHSL="4.0.2"
        cd ..
        if [[ "${{ inputs.os }}" == "windows-latest" ]]; then
          wget https://github.com/ralna/libHSL/archive/refs/tags/v${VERSION_LIBHSL}.zip
          unzip v${VERSION_LIBHSL}.zip
        else
          wget https://github.com/ralna/libHSL/archive/refs/tags/v${VERSION_LIBHSL}.tar.gz
          tar -xzvf v${VERSION_LIBHSL}.tar.gz
        fi
        cd libHSL-${VERSION_LIBHSL}/hsl_subset
        meson setup builddir --buildtype=debug \
                             --prefix=$DEPS/deps \
                             -Dquadruple=true \
                             -Ddefault_library=shared
        meson compile -C builddir
        meson install -C builddir

    - name: Install MUMPS
      if: inputs.os == 'ubuntu-latest' && inputs.compiler == 'gcc'
      shell: bash
      run: |
        cd ..
        mkdir -p deps
        VERSION_MUMPS="5.7.2"
        VERSION_METIS="5.1.2"
        VERSION_OPENBLAS32="0.3.27"
        VERSION_OPENBLAS="0.3.27"
        wget https://github.com/amontoison/MUMPS_seq_jll.jl/releases/download/MUMPS_seq-v${VERSION_MUMPS}%2B0/MUMPS_seq.v${VERSION_MUMPS}.$PLATFORM-libgfortran5.tar.gz
        tar -xzvf MUMPS_seq.v${VERSION_MUMPS}.$PLATFORM-libgfortran5.tar.gz -C deps
        wget https://github.com/JuliaBinaryWrappers/OpenBLAS_jll.jl/releases/download/OpenBLAS-v${VERSION_OPENBLAS}%2B1/OpenBLAS.v${VERSION_OPENBLAS}.$PLATFORM-libgfortran5.tar.gz
        tar -xzvf OpenBLAS.v${VERSION_OPENBLAS}.$PLATFORM-libgfortran5.tar.gz -C deps
        wget https://github.com/JuliaBinaryWrappers/OpenBLAS32_jll.jl/releases/download/OpenBLAS32-v${VERSION_OPENBLAS32}%2B1/OpenBLAS32.v${VERSION_OPENBLAS32}.$PLATFORM-libgfortran5.tar.gz
        tar -xzvf OpenBLAS32.v${VERSION_OPENBLAS32}.$PLATFORM-libgfortran5.tar.gz -C deps
        wget https://github.com/JuliaBinaryWrappers/METIS_jll.jl/releases/download/METIS-v${VERSION_METIS}%2B0/METIS.v${VERSION_METIS}.$PLATFORM.tar.gz
        tar -xzvf METIS.v${VERSION_METIS}.$PLATFORM.tar.gz -C deps

    - name: Install MKL
      if: inputs.os == 'ubuntu-latest' && inputs.compiler == 'intel'
      shell: bash
      run: |
        cd ..
        mkdir -p deps
        VERSION_MKL="2024.2.0"
        wget https://github.com/JuliaBinaryWrappers/MKL_jll.jl/releases/download/MKL-v${VERSION_MKL}%2B0/MKL.v${VERSION_MKL}.$PLATFORM.tar.gz
        tar -xzvf MKL.v${VERSION_MKL}.$PLATFORM.tar.gz -C deps
        # wget https://github.com/JuliaBinaryWrappers/IntelOpenMP_jll.jl/releases/download/IntelOpenMP-v${VERSION_MKL}%2B0/IntelOpenMP.v${VERSION_MKL}.$PLATFORM.tar.gz
        # tar -xzvf IntelOpenMP.v${VERSION_MKL}.$PLATFORM.tar.gz -C deps

    - name: Setup GALAHAD
      shell: bash
      run: |
        mkdir -p ../deps/${LIBDIR}
        mkdir -p ../deps/modules
        mkdir -p ../CUTEst/modules
        CSTD="c99"
        CPPSTD="c++11"
        INT64="false"
        QUADRUPLE="true"
        SSIDS="true"
        BLAS=""
        LAPACK=""
        BLAS_PATH="$DEPS/deps/$LIBDIR"
        LAPACK_PATH="$DEPS/deps/$LIBDIR"
        PYTHON_INTERFACE="true"
        SHARED_STATIC="shared"
        CUTEST_SINGLE="cutest_single"
        CUTEST_DOUBLE="cutest_double"
        MUMPS_SINGLE="smumps"
        MUMPS_DOUBLE="dmumps"
        HSL="hsl_subset"
        HSL_PATH="$DEPS/deps/$LIBDIR"
        LD_CLASSIC=""
        if [[ "${{inputs.os}}" == "macos-13" || "${{inputs.os}}" == "macos-latest" ]]; then
          LD_CLASSIC="-Wl,-ld_classic"
        fi
        if [[ "${{ inputs.compiler }}" == "nvidia-hpc" ]]; then
          CSTD="none"
          CPPSTD="none"
          BLAS="blas_lp64"
          LAPACK="lapack_lp64"
          BLAS_PATH="/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/lib"
          LAPACK_PATH="/opt/nvidia/hpc_sdk/Linux_x86_64/23.11/compilers/lib"
        fi
        if [[ "${{ inputs.int }}" == "64" ]]; then
          INT64="true"
          PYTHON_INTERFACE="false"
          CUTEST_SINGLE="cutest_single_64"
          CUTEST_DOUBLE="cutest_double_64"
          CUTEST_QUADRUPLE="cutest_quadruple_64"
          MUMPS_SINGLE="smumps64"
          MUMPS_DOUBLE="dmumps64"
          HSL="hsl_subset_64"
        fi
        if [[ "${{ inputs.compiler }}" == "intel" && "${{ inputs.os }}" == "ubuntu-latest" ]]; then
          BLAS="mkl_rt"
          LAPACK="mkl_rt"
        fi
        if [[ ( "${{ inputs.compiler }}" == "intel" && "${{ inputs.os }}" == "windows-latest" ) ]]; then
          SHARED_STATIC="static"
        fi
        if [[ ( "${{ inputs.compiler }}" == "intel" && "${{ inputs.os }}" == "windows-latest" ) ]]; then
          PYTHON_INTERFACE="false"
        fi
        if [[ "${{ inputs.compiler }}" == "nvidia-hpc" || "${{ inputs.compiler }}" == "intel-classic" || ( "${{ inputs.compiler }}" == "intel" && "${{ inputs.os }}" == "windows-latest" ) ]]; then
          SSIDS="false"
        fi
        if [[ "${{ inputs.compiler }}" == "nvidia-hpc" || "${{ inputs.compiler }}" == "intel-classic" || "${{ inputs.compiler }}" == "intel" ]]; then
          QUADRUPLE="false"
        fi

        meson setup builddir -Ddefault_library=${SHARED_STATIC} \
                             --buildtype=debug \
                             --prefix=$GITHUB_WORKSPACE/galahad \
                             -Dc_std=$CSTD \
                             -Dcpp_std=$CPPSTD \
                             -Dexamples=true \
                             -Dtests=true \
                             -Dbinaries=true \
                             -Dssids=${SSIDS} \
                             -Dpythoniface=${PYTHON_INTERFACE} \
                             -Dint64=${INT64} \
                             -Dquadruple=${QUADRUPLE} \
                             -Dlibblas_path=${BLAS_PATH} \
                             -Dliblapack_path=${LAPACK_PATH} \
                             -Dlibblas=${BLAS} \
                             -Dliblapack=${LAPACK} \
                             -Dfortran_link_args=${LD_CLASSIC} \
                             -Dc_link_args=${LD_CLASSIC} \
                             -Dlibsmumps=${MUMPS_SINGLE} \
                             -Dlibdmumps=${MUMPS_DOUBLE} \
                             -Dlibmumps_path=$DEPS/deps/${LIBDIR} \
                             -Dlibcutest_single=${CUTEST_SINGLE} \
                             -Dlibcutest_double=${CUTEST_DOUBLE} \
                             -Dlibcutest_quadruple=${CUTEST_QUADRUPLE} \
                             -Dlibcutest_path=$CUTEST/${LIBDIR} \
                             -Dlibcutest_modules=../CUTEst/modules \
                             -Dlibhsl=${HSL} \
                             -Dlibhsl_path=${HSL_PATH} \
                             -Dlibhsl_modules=../deps/modules
                             # -Db_sanitize=address,undefined

    - name: Build GALAHAD
      shell: bash
      run: |
        meson compile -C builddir

    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{ inputs.os }}_${{ inputs.compiler }}-v${{ inputs.version }}_Int${{ inputs.int }}_meson-log.txt
        path: builddir/meson-logs/meson-log.txt

    - name: Install GALAHAD
      shell: bash
      run: |
        meson install -C builddir

    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{ inputs.os }}_${{ inputs.compiler }}-v${{ inputs.version }}_Int${{ inputs.int }}_install-log.txt
        path: builddir/meson-logs/install-log.txt

    # Uncomment this section to obtain ssh access to VM
    # - name: Setup tmate session
    #   if: inputs.os == 'windows-latest'
    #   uses: mxschmitt/action-tmate@v3

    - name: Test GALAHAD
      shell: bash
      run: |
        meson test -C builddir --timeout-multiplier 8

    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{ inputs.os }}_${{ inputs.compiler }}-v${{ inputs.version }}_Int${{ inputs.int }}_testlog.txt
        path: builddir/meson-logs/testlog.txt

    - name: Install Julia
      if: (inputs.os != 'windows-latest' || inputs.compiler != 'intel')
      uses: julia-actions/setup-julia@v2

    - name: Test GALAHAD.jl
      if: (inputs.os != 'windows-latest' || inputs.compiler != 'intel')
      shell: bash
      run: julia --color=yes -e 'using Pkg; Pkg.develop(path="GALAHAD.jl"); Pkg.test("GALAHAD")'
