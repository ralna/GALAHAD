#  Main body of the installation makefile for basic GALAHAD packages

#  N. Gould, D. Orban and Ph. L. Toint.
#  This version: 2022-12-30

#  include standard GALAHAD makefile definitions

include $(GALAHAD)/src/makedefs/definitions

#  Libraries used

LIBS = -lgalahad $(HSL) $(SPRAL) $(MKL_PARDISO) $(PARDISO) $(WSMP) $(METIS4) \
                 $(PASTIX) $(MUMPS) $(UMFPACK) $(LAPACK) $(BLAS)
PLIBS = $(LIBS) -lgalahad_problem

#  compilation agenda

silss = ma27 $(LGS)(smt.o) $(LGS)(sils.o)
silsd = ma27 $(LGD)(smt.o) $(LGD)(sils.o)
ma57s = ma57
ma57d = ma57
glss = ma33 $(LGS)(smt.o) $(LGS)(gls.o)
glsd = ma33 $(LGD)(smt.o) $(LGD)(gls.o)
ma48s = ma48
ma48d = ma48
cutest_functionss = $(SMTS) $(LGS)(space.o) nlpt $(PRLGS)(cutest_functions.o)
cutest_functionsd = $(SMTD) $(LGD)(space.o) nlpt $(PRLGD)(cutest_functions.o)
problems = $(SMTS) nlpt $(PRLGS)(problem.o)
problemd = $(SMTD) nlpt $(PRLGD)(problem.o)

BASIX =  $(LG)(kinds.o) $(LG)(clock.o) $(BLG)(blas.o) $(LLG)(lapack.o) \
         $(LG)(symbols.o) pardiso mkl_pardiso $(MLG)(metis4.o) \
         wsmp pastix mpi mumps \
         $(DLG)(dummy.o) $(CDLG)(cutest_dummy.o) $(LG)(blas_interface.o) \
         $(LG)(lapack_interface.o)

ROOTSS = $(BASIX) $(LGS)(string.o) buildspec_silent $(LGS)(specfile.o) \
         $(LGS)(sort.o) zd11 $(LGS)(smt.o) $(LGS)(space.o) $(LGS)(roots.o)

ROOTSD = $(BASIX) $(LGD)(string.o) buildspec_silent $(LGD)(specfile.o) \
         $(LGD)(sort.o) zd11 $(LGD)(smt.o) $(LGD)(space.o) $(LGD)(roots.o)

BASICS = $(ROOTSS) $(LGS)(rand.o) $(LGS)(scaling.o) $(LGS)(tools.o) lmt qpt \
         $(LGS)(trans.o) $(LGS)(scale.o) $(LGS)(norms.o) \
         $(LGS)(checkpoint.o) $(LGS)(opt.o) # $(LGS)(convert.o)

BASICD = $(ROOTSD) $(LGD)(rand.o) $(LGD)(scaling.o) $(LGD)(tools.o) lmt qpt \
         $(LGD)(trans.o) $(LGD)(scale.o) $(LGD)(norms.o) \
         $(LGD)(checkpoint.o) $(LGD)(opt.o) # $(LGD)(convert.o)

#        zd11 $(LGD)(smt.o) qpt $(LGD)(space.o) $(LGD)(string.o) $(LGD)(trans.o)

SSIDSS = $(LG)(symbols.o) $(RLGS)(ssidss.o)
SSIDSD = $(LG)(symbols.o) $(RLGD)(ssidsd.o)

PARDISOS = $(LG)(symbols.o) $(PLGS)(pardiso.o)
PARDISOD = $(LG)(symbols.o) $(PLGD)(pardiso.o)

METISS = $(LG)(symbols.o) $(MLGS)(metis4.o)
METISD = $(LG)(symbols.o) $(MLGD)(metis4.o)

WSMPS = $(LG)(symbols.o) $(WLGS)(wsmp.o)
WSMPD = $(LG)(symbols.o) $(WLGD)(wsmp.o)

SMTDS = $(BASICD) $($(LINEARSOLVERD)) $(OBJD)/smts.o
SMTDT = $(BASICD) $($(LINEARSOLVERD)) $(OBJD)/smtt.o
SMTSS = $(BASICS) $($(LINEARSOLVERS)) $(OBJS)/smts.o
SMTST = $(BASICS) $($(LINEARSOLVERS)) $(OBJS)/smtt.o

SILSDS = $(BASICD) $($(LINEARSOLVERD)) $(OBJD)/silss.o
SILSDT = $(BASICD) $($(LINEARSOLVERD)) $(OBJD)/silst.o
SILSSS = $(BASICS) $($(LINEARSOLVERS)) $(OBJS)/silss.o
SILSST = $(BASICS) $($(LINEARSOLVERS)) $(OBJS)/silst.o

#GLSDSBIG = $(BASICD) $($(ULINEARSOLVERD)) $(OBJD)/glssbig.o
GLSDSBIG = $(BASICD) ma33 $(LGD)(gls.o) $(OBJD)/glssbig.o
#GLSDS = $(BASICD) $($(ULINEARSOLVERD)) $(OBJD)/glss.o
GLSDS = $(BASICD) ma33 $(LGD)(gls.o) $(OBJD)/glss.o
GLSDT = $(BASICD) ma33 $(LGD)(gls.o) $(OBJD)/glst.o
GLSSS = $(BASICS) ma33 $(LGS)(gls.o) $(OBJS)/glss.o
GLSST = $(BASICS) ma33 $(LGS)(gls.o) $(OBJS)/glst.o

RANDDS = $(OBJD)/rands.o
RANDDT = $(OBJD)/randt.o
RANDSS = $(OBJS)/rands.o
RANDST = $(OBJS)/randt.o

SORTDS = $(OBJD)/sorts.o
SORTDT = $(OBJD)/sortt.o
SORTSS = $(OBJS)/sorts.o
SORTST = $(OBJS)/sortt.o

SCALEDS = $(BASICD) $(OBJD)/scale_spec.o
SCALEDT = $(BASICD) $(OBJD)/scale_test.o
SCALESS = $(BASICS) $(OBJS)/scale_spec.o
SCALEST = $(BASICS) $(OBJS)/scale_test.o

RSCALEDS = $(OBJD)/scale_spec.o -L$(OBJD) $(LIBS)
RSCALEDT = $(OBJD)/scale_test.o -L$(OBJD) $(LIBS)
RSCALESS = $(OBJS)/scale_spec.o -L$(OBJS) $(LIBS)
RSCALEST = $(OBJS)/scale_test.o -L$(OBJS) $(LIBS)

SCUDS = $(OBJD)/scus.o
SCUDT = $(OBJD)/scut.o
SCUSS = $(OBJS)/scus.o
SCUST = $(OBJS)/scut.o

ROOTSDS = $(BASICD) $(OBJD)/rootss.o
ROOTSDT = $(BASICD) $(OBJD)/rootst.o
ROOTSSS = $(BASICS) $(OBJS)/rootss.o
ROOTSST = $(BASICS) $(OBJS)/rootst.o

CONVERTDS = $(BASICD) $(OBJD)/converts.o
CONVERTDT = $(BASICD) $(OBJD)/convertt.o
CONVERTSS = $(BASICS) $(OBJS)/converts.o
CONVERTST = $(BASICS) $(OBJS)/convertt.o

RSMTDS = $(OBJD)/smts.o -L$(OBJD) $(LIBS)
RSMTDT = $(OBJD)/smtt.o -L$(OBJD) $(LIBS)
RSMTSS = $(OBJS)/smts.o -L$(OBJS) $(LIBS)
RSMTST = $(OBJS)/smtt.o -L$(OBJS) $(LIBS)

RSILSDS = $(OBJD)/silss.o -L$(OBJD) $(LIBS)
RSILSDT = $(OBJD)/silst.o -L$(OBJD) $(LIBS)
RSILSSS = $(OBJS)/silss.o -L$(OBJS) $(LIBS)
RSILSST = $(OBJS)/silst.o -L$(OBJS) $(LIBS)

RGLSDSBIG = $(OBJD)/glssbig.o -L$(OBJD) $(LIBS)
RGLSDS = $(OBJD)/glss.o -L$(OBJD) $(LIBS)
RGLSDT = $(OBJD)/glst.o -L$(OBJD) $(LIBS)
RGLSSS = $(OBJS)/glss.o -L$(OBJS) $(LIBS)
RGLSST = $(OBJS)/glst.o -L$(OBJS) $(LIBS)

RRANDDS = $(OBJD)/rands.o -L$(OBJD) $(LIBS)
RRANDDT = $(OBJD)/randt.o -L$(OBJD) $(LIBS)
RRANDSS = $(OBJS)/rands.o -L$(OBJS) $(LIBS)
RRANDST = $(OBJS)/randt.o -L$(OBJS) $(LIBS)

RSORTDS = $(OBJD)/sorts.o -L$(OBJD) $(LIBS)
RSORTDT = $(OBJD)/sortt.o -L$(OBJD) $(LIBS)
RSORTSS = $(OBJS)/sorts.o -L$(OBJS) $(LIBS)
RSORTST = $(OBJS)/sortt.o -L$(OBJS) $(LIBS)

RSCUDS = $(OBJD)/scus.o -L$(OBJD) $(LIBS)
RSCUDT = $(OBJD)/scut.o -L$(OBJD) $(LIBS)
RSCUSS = $(OBJS)/scus.o -L$(OBJS) $(LIBS)
RSCUST = $(OBJS)/scut.o -L$(OBJS) $(LIBS)

RROOTSDS = $(OBJD)/rootss.o -L$(OBJD) $(LIBS)
RROOTSDT = $(OBJD)/rootst.o -L$(OBJD) $(LIBS)
RROOTSSS = $(OBJS)/rootss.o -L$(OBJS) $(LIBS)
RROOTSST = $(OBJS)/rootst.o -L$(OBJS) $(LIBS)

RCONVERTDS = $(OBJD)/converts.o -L$(OBJD) $(LIBS)
RCONVERTDT = $(OBJD)/convertt.o -L$(OBJD) $(LIBS)
RCONVERTSS = $(OBJS)/converts.o -L$(OBJS) $(LIBS)
RCONVERTST = $(OBJS)/convertt.o -L$(OBJS) $(LIBS)

FILTERDS = $(BASICD) $(OBJD)/filters.o
FILTERDT = $(BASICD) $(OBJD)/filtert.o
FILTERSS = $(BASICS) $(OBJS)/filters.o
FILTERST = $(BASICS) $(OBJS)/filtert.o

SUCC = precision version) compiled successfully
SUCC_CUTEST = precision version) for CUTEst compiled successfully

#  main compilations and runs

all: basics linearsolver ulinearsolver buildspec

cutest_functions_silent: cutest_functions_$(PRECIS)
cutest_functions: cutest_functions_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: cutest_functions package ($(PRECIS) $(SUCC)"
cutest_functions_single: $(cutest_functionss)
	$(RANLIB) $(PRLGS)
cutest_functions_double: $(cutest_functionsd)
	$(RANLIB) $(PRLGD)

problem_silent: problem_$(PRECIS)
problem: problem_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: basic packages ($(PRECIS) $(SUCC)"
problem_single: $(problems)
	$(RANLIB) $(PRLGS)
problem_double: $(problemd)
	$(RANLIB) $(PRLGD)

#  basic packages

basic_silent: $(BASIX)

basics_silent: basics_silent_$(PRECIS)
basics_silent_single: $(BASICS)
basics_silent_double: $(BASICD)

basics: basics_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: basic packages ($(PRECIS) $(SUCC)"
basics_single: $(BASICS)
	$(RANLIB) $(LGS)
basics_double: $(BASICD)
	$(RANLIB) $(LGD)

#  symmetric linear solver

linearsolver_silent: linearsolver_silent_$(PRECIS)
linearsolver_silent_single: $($(LINEARSOLVERS))
linearsolver_silent_double: $($(LINEARSOLVERD))

linearsolver: linearsolver_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(LINEARSOLVER) ($(PRECIS) $(SUCC)"
linearsolver_single: $($(LINEARSOLVERS))
	$(RANLIB) $(LGS)
linearsolver_double: $($(LINEARSOLVERD))
	$(RANLIB) $(LGD)

#  unsymmetric linear solver

ulinearsolver_silent: ulinearsolver_silent_$(PRECIS)
ulinearsolver_silent_single: $($(ULINEARSOLVERS))
ulinearsolver_silent_double: $($(ULINEARSOLVERD))

ulinearsolver: ulinearsolver_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(ULINEARSOLVER) ($(PRECIS) $(SUCC)"
ulinearsolver_single: $($(ULINEARSOLVERS))
	$(RANLIB) $(LGS)
ulinearsolver_double: $($(ULINEARSOLVERD))
	$(RANLIB) $(LGD)

#  ssids

ssids_silent:
	( cd ../ssids ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ssids_silent PRECIS=$(PRECIS) PWD=$(PWD)/../ssids )
ssids:
	( cd ../ssids ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ssids PRECIS=$(PRECIS) PWD=$(PWD)/../ssids )

ssids_dum_silent: ssids_dum_silent_$(PRECIS)
ssids_dum_silent_single: $(SSIDSS)
	$(RANLIB) $(RLGS)
ssids_dum_silent_double: $(SSIDSD)
	$(RANLIB) $(RLGD)

ssids_dum: ssids_dum_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(SSIDS) ($(PRECIS) $(SUCC)"
ssids_dum_single: $(SSIDSS)
	$(RANLIB) $(RLGS)
ssids_dum_double: $(SSIDSD)
	$(RANLIB) $(RLGD)

#  pardiso

#pardiso_silent: pardiso_$(PRECIS)
#pardiso: pardiso_$(PRECIS)
#	@printf ' %-21s\n' "GALAHAD: $(PARDISO) ($(PRECIS) $(SUCC)"
#pardiso_single: $(PARDISOS)
#	$(RANLIB) $(PLGS)
#pardiso_double: $(PARDISOD)
#	$(RANLIB) $(PLGD)

#  wsmp

#wsmp_silent: wsmp_$(PRECIS)
#wsmp: wsmp_$(PRECIS)
#	@printf ' %-21s\n' "GALAHAD: $(WSMP) ($(PRECIS) $(SUCC)"
#wsmp_single: $(WSMPS)
#	$(RANLIB) $(WLGS)
#wsmp_double: $(WSMPD)
#	$(RANLIB) $(WLGD)

#  metis

metis_silent: metis_$(PRECIS)
metis: metis_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: $(METIS4) ($(PRECIS) $(SUCC)"
metis_single: $(METISS)
	$(RANLIB) $(MLGS)
metis_double: $(METISD)
	$(RANLIB) $(MLGD)

#  blas

blas_silent: $(BLG)(blas.o)
blas: $(BLG)(blas.o)
	@printf ' %-21s\n' "GALAHAD: BLAS compiled successfully"

# lapack

lapack_silent: $(LLG)(lapack.o)
lapack: $(LLG)(lapack.o)
	@printf ' %-21s\n' "GALAHAD: LAPACK compiled successfully"

# dummy

dummy_silent: $(DLG)(dummy.o)
dummy: $(DLG)(dummy.o)
	@printf ' %-21s\n' "GALAHAD: DUMMY compiled successfully"

# cutest_dummy

cutest_dummy_silent: $(CDLG)(cutest_dummy.o)
cutest_dummy: $(CDLG)(cutest_dummy.o)
	@printf ' %-21s\n' "GALAHAD: CUTEST_DUMMY compiled successfully"

#  blas_interface

blas_interface_silent: $(LG)(blas_interface.o)
blas_interface: $(LG)(blas_interface.o)
	@printf ' %-21s\n' "GALAHAD: BLAS_interface compiled successfully"

# lapack_interface

lapack_interface_silent: $(LG)(lapack_interface.o)
lapack_interface: $(LG)(lapack_interface.o)
	@printf ' %-21s\n' "GALAHAD: LAPACK_interface compiled successfully"

# symbols

symbols_silent: $(LG)(symbols.o)
symbols: $(LG)(symbols.o)
	@printf ' %-21s\n' "GALAHAD: SYMBOLS compiled successfully"

# smt

smt_silent: smt_silent_$(PRECIS)
smt_silent_single: $(LGS)(smt.o)
smt_silent_double: $(LGD)(smt.o)

smt: smt_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SMT ($(PRECIS) $(SUCC)"
smt_single: $(smts)
	$(RANLIB) $(LGS)
smt_double: $(smtd)
	$(RANLIB) $(LGD)

smtsrunall: smtss smtst
smtdrunall: smtds smtdt
smtrunall: smtdrunall smtsrunall

sils_smts: $(LGS)(smt.o)
sils_smtd: $(LGD)(smt.o)
ma57_smts: zd11
ma57_smtd: zd11

# sils

sils_silent: sils_silent_$(PRECIS)
sils_silent_single: $(silss)
sils_silent_double: $(silsd)

sils: sils_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SILS ($(PRECIS) $(SUCC)"
sils_single: $(silss)
	$(RANLIB) $(LGS)
sils_double: $(silsd)
	$(RANLIB) $(LGD)

silssrunall: silsss silsst
silsdrunall: silsds silsdt
silsrunall: silsdrunall silssrunall

# gls

gls_silent: gls_silent_$(PRECIS)
gls_silent_single: $(glss)
gls_silent_double: $(glsd)

gls: gls_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: GLS ($(PRECIS) $(SUCC)"
gls_single: $(glss)
	$(RANLIB) $(LGS)
gls_double: $(glsd)
	$(RANLIB) $(LGD)

glssrunall: glsss glsst
glsdrunall: glsds glsdt
glsrunall: glsdrunall glssrunall

# scale

scale_silent: scale_silent_$(PRECIS)
scale_silent_single: $(scales)
scale_silent_double: $(scaled)

scale: scale_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SCALE ($(PRECIS) $(SUCC)"
scale_single: $(scales)
	$(RANLIB) $(LGS)
scale_double: $(scaled)
	$(RANLIB) $(LGD)

scalesrunall: scaless scalest
scaledrunall: scaleds scaledt
scalerunall: scaledrunall scalesrunall

# rand

randsrunall: randss randst
randdrunall: randds randdt
randrunall: randdrunall randsrunall

# sort

sort_silent: sort_silent_$(PRECIS)
sort_silent_single: $(LGS)(sort.o)
sort_silent_double: $(LGD)(sort.o)

sort: sort_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SORT ($(PRECIS) $(SUCC)"
sort_single: $(SORTS)
	$(RANLIB) $(LGS)(sort.o)
sort_double: $(SORTD)
	$(RANLIB) $(LGD)(sort.o)

sortsrunall: sortss sortst
sortdrunall: sortds sortdt
sortrunall: sortdrunall sortsrunall

# space

space_silent: space_silent_$(PRECIS)
space_silent_single: $(LGS)(space.o)
space_silent_double: $(LGD)(space.o)

space: space_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SPACE ($(PRECIS) $(SUCC)"
space_single: $(SPACES)
	$(RANLIB) $(LGS)(space.o)
space_double: $(SPACED)
	$(RANLIB) $(LGD)(space.o)

# spec

spec_silent: spec_silent_$(PRECIS)
spec_silent_single: $(LGS)(specfile.o)
spec_silent_double: $(LGD)(specfile.o)

spec: spec_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SPEC ($(PRECIS) $(SUCC)"
spec_single: $(SPECS)
	$(RANLIB) $(LGS)(specfile.o)
spec_double: $(SPECD)
	$(RANLIB) $(LGD)(specfile.o)

# scu

scu_silent: scu_silent_$(PRECIS)
scu_silent_single: $(LGS)(scu.o)
scu_silent_double: $(LGD)(scu.o)

scu: scu_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: SCU ($(PRECIS) $(SUCC)"
scu_single: $(SCUS)
	$(RANLIB) $(LGS)(scu.o)
scu_double: $(SCUD)
	$(RANLIB) $(LGD)(scu.o)

scusrunall: scuss scust
scudrunall: scuds scudt
scurunall: scudrunall scusrunall

# roots

roots_silent: roots_silent_$(PRECIS)
roots_silent_single: $(ROOTSS)
roots_silent_double: $(ROOTSD)

roots: roots_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: ROOTS ($(PRECIS) $(SUCC)"
roots_single: $(ROOTSS)
	$(RANLIB) $(LGS)
roots_double: $(ROOTSD)
	$(RANLIB) $(LGD)

rootssrunall: rootsss rootsst
rootsdrunall: rootsds rootsdt
rootsrunall: rootsdrunall rootssrunall

# convert

convertsrunall: convertss convertst
convertdrunall: convertds convertdt
convertrunall: convertdrunall convertsrunall

# filter

filters = $(LGS)(filter.o)
filterd = $(LGD)(filter.o)

filter_silent: filter_silent_$(PRECIS)
filter_silent_single: $(filters)
filter_silent_double: $(filterd)

filter: filter_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: FILTER ($(PRECIS) $(SUCC)"
filter_single: $(filters)
	$(RANLIB) $(LGS)
filter_double: $(filterd)
	$(RANLIB) $(LGD)

filtersrunall: filterss filterst
filterdrunall: filterds filterdt
filterrunall: filterdrunall filtersrunall

#  other galahad packages

nlpt:
	( cd ../nlpt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            nlpt.o PRECIS=$(PRECIS) PWD=$(PWD)/../nlpt )

lmt:
	( cd ../lmt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            lmt.o PRECIS=$(PRECIS) PWD=$(PWD)/../lmt )

qpt:
	( cd ../qpt ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            qpt_silent PRECIS=$(PRECIS) PWD=$(PWD)/../qpt )

bsc:
	( cd ../bsc ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            bsc_silent PRECIS=$(PRECIS) PWD=$(PWD)/../bsc )

#  hsl packages

ma27:
	( cd ../external/ma27 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma27_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma27 )

ma57:
	( cd ../external/ma57 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma57_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma57 )

zd11:
	( cd ../zd11 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            zd11_silent PRECIS=$(PRECIS) PWD=$(PWD)/../zd11 )

ma33:
	( cd ../external/ma33 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma33_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma33 )

mi20:
	( cd ../external/mi20 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            mi20_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/mi20 )

ma48:
	( cd ../external/ma48 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma48_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma48 )

#  other external packages

pardiso_silent: pardiso
pardiso:
	( cd ../external/pardiso ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) pardiso_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/pardiso )

mkl_pardiso_silent: mkl_pardiso
mkl_pardiso:
	( cd ../external/mkl ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) mkl_pardiso_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/mkl )

wsmp_silent: wsmp
wsmp:
	( cd ../external/mkl ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) wsmp_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/wsmp )

pastix_silent: pastix
pastix:
	( cd ../external/mkl ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) pastix_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/pastix )

mpi_silent: mpi
mpi:
	( cd ../external/mkl ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) mpi_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/mpi )

mumps_silent: mumps
mumps:
	( cd ../external/mkl ; $(MAKE) -f \
           $(GALAHAD)/makefiles/$(VERSION) mumps_silent \
           PRECIS=$(PRECIS) PWD=$(PWD)/../external/mumps )

# run spec-sheet example and exhaustive tests

smtds: $(SMTDS)
	cd ../smt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_smt $(RSMTDS)
	- ../smt/run_smt > ../smt/smtds.output 2>&1
	cat ../smt/smtds.output
	rm ../smt/run_smt

smtdt: $(SMTDT)
	echo " Exhaustive test of subroutine interface to smt"
	cd ../smt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_smt $(RSMTDT)
	- ../smt/run_smt > ../smt/smtdt.output 2>&1
	cat ../smt/smtdt.output
	rm ../smt/run_smt

smtss: $(SMTSS)
	cd ../smt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_smt $(RSMTSS)
	- ../smt/run_smt > ../smt/smts.output 2>&1
	cat ../smt/smts.output
	rm ../smt/run_smt

smtst: $(SMTST)
	echo " Exhaustive test of subroutine interface to smt"
	cd ../smt ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_smt $(RSMTST)
	- ../smt/run_smt > ../smt/smtt.output 2>&1
	cat ../smt/smtt.output
	rm ../smt/run_smt

silsds: $(SILSDS)
	cd ../sils ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sils $(RSILSDS)
	- ../sils//run_sils < ../sils/silss.data > ../sils/silsds.output 2>&1
	cat ../sils/silsds.output
	rm ../sils/run_sils

silsdt: $(SILSDT)
	echo " Exhaustive test of subroutine interface to sils"
	cd ../sils ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sils \
                       $(RSILSDT) ym01ad.f fa04ad.f
	- ../sils/run_sils  < ../sils/silst.data > ../sils/silsdt.output 2>&1
	cat ../sils/silsdt.output
	rm ../sils/run_sils

silsss: $(SILSSS)
	cd ../sils ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sils $(RSILSSS)
	- ../sils/run_sils < ../sils/silss.data > ../sils/silss.output 2>&1
	cat ../sils/silss.output
	rm ../sils/run_sils

silsst: $(SILSST)
	echo " Exhaustive test of subroutine interface to sils"
	cd ../sils ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sils \
                       $(RSILSST) ym01a.f fa04a.f
	- ../sils/run_sils < ../sils/silst.data > ../sils/silst.output 2>&1
	cat ../sils/silst.output
	rm ../sils/run_sils

glsdsbig: $(GLSDSBIG)
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls $(RGLSDSBIG)
#	- ../gls//run_gls < ../gls/glssbig.data > ../gls/glsdsbig.output 2>&1
#	cat ../gls/glsdsbig.output
	- ../gls//run_gls < ../gls/glssbig.data
	rm ../gls/run_gls

glsds: $(GLSDS)
	echo "$(GLSDS)"
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls $(RGLSDS)
	- ../gls//run_gls < ../gls/glss.data > ../gls/glsds.output 2>&1
	cat ../gls/glsds.output
	rm ../gls/run_gls

glsds_rectangular: $(GLSDS)
	echo "$(GLSDS)"
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls $(RGLSDS)
	- ../gls//run_gls < ../gls/glss.data.rectangular \
                          > ../gls/glsds.output.rectangular 2>&1
	cat ../gls/glsds.output.rectangular
	rm ../gls/run_gls

glsds_rectangular2: $(GLSDS)
	echo "$(GLSDS)"
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls $(RGLSDS)
	- ../gls//run_gls < ../gls/glss.data.rectangular2 \
                          > ../gls/glsds.output.rectangular2 2>&1
	cat ../gls/glsds.output.rectangular2
	rm ../gls/run_gls

glsdt: $(GLSDT)
	echo " Exhaustive test of subroutine interface to gls"
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls \
                       $(RGLSDT) ym01ad.f fa04ad.f
	- ../gls/run_gls  < ../gls/glst.data > ../gls/glsdt.output 2>&1
	cat ../gls/glsdt.output
	rm ../gls/run_gls

glsss: $(GLSSS)
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls $(RGLSSS)
	- ../gls/run_gls < ../gls/glss.data > ../gls/glss.output 2>&1
	cat ../gls/glss.output
	rm ../gls/run_gls

glsst: $(GLSST)
	echo " Exhaustive test of subroutine interface to gls"
	cd ../gls ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_gls \
                       $(RGLSST) ym01a.f fa04a.f
	- ../gls/run_gls < ../gls/glst.data > ../gls/glst.output 2>&1
	cat ../gls/glst.output
	rm ../gls/run_gls

randds: $(RANDDS)
	cd ../rand ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rand $(RRANDDS)
	- ../rand/run_rand > ../rand/randds.output 2>&1
	cat ../rand/randds.output
	rm ../rand/run_rand

randdt: $(RANDDT)
	echo " Exhaustive test of subroutine interface to rand"
	cd ../rand ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rand $(RRANDDT)
	- ../rand/run_rand > ../rand/randdt.output 2>&1
	cat ../rand/randdt.output
	rm ../rand/run_rand

randss: $(RANDSS)
	cd ../rand ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rand $(RRANDSS)
	- ../rand/run_rand > ../rand/rands.output 2>&1
	cat ../rand/rands.output
	rm ../rand/run_rand

randst: $(RANDST)
	echo " Exhaustive test of subroutine interface to rand"
	cd ../rand ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_rand $(RRANDST)
	- ../rand/run_rand > ../rand/randt.output 2>&1
	cat ../rand/randt.output
	rm ../rand/run_rand

sortds: $(SORTDS)
	cd ../sort ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sort $(RSORTDS)
	- ../sort/run_sort > ../sort/sortds.output 2>&1
	cat ../sort/sortds.output
	rm ../sort/run_sort

sortdt: $(SORTDT)
	echo " Exhaustive test of subroutine interface to sort"
	cd ../sort ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sort $(RSORTDT)
	- ../sort/run_sort > ../sort/sortdt.output 2>&1
	cat ../sort/sortdt.output
	rm ../sort/run_sort

sortss: $(SORTSS)
	cd ../sort ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sort $(RSORTSS)
	- ../sort/run_sort > ../sort/sorts.output 2>&1
	cat ../sort/sorts.output
	rm ../sort/run_sort

sortst: $(SORTST)
	echo " Exhaustive test of subroutine interface to sort"
	cd ../sort ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_sort $(RSORTST)
	- ../sort/run_sort > ../sort/sortt.output 2>&1
	cat ../sort/sortt.output
	rm ../sort/run_sort

scaleds: $(SCALEDS)
	cd ../scale ; \
          $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scale $(RSCALEDS)
	- ../scale/run_scale > ../scale/scale_specd.output 2>&1
	cat ../scale/scale_specd.output
	rm ../scale/run_scale

scaledt: $(SCALEDT)
	echo " Exhaustive test of subroutine interface to scale"
	cd ../scale ; \
          $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scale $(RSCALEDT)
	- ../scale/run_scale > ../scale/scale_testd.output 2>&1
	cat ../scale/scale_testd.output
	rm ../scale/run_scale

scaless: $(SCALESS)
	cd ../scale ; \
          $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scale $(RSCALESS)
	- ../scale/run_scale > ../scale/scale_specs.output 2>&1
	cat ../scale/scale_spces.output
	rm ../scale/run_scale

scalest: $(SCALEST)
	echo " Exhaustive test of subroutine interface to scale"
	cd ../scale ; \
          $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scale $(RSCALEST)
	- ../scale/run_scale > ../scale/scale_tests.output 2>&1
	cat ../scale/scale_tests.output
	rm ../scale/run_scale

scuds: $(SCUDS)
	cd ../scu ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scu $(RSCUDS)
	- ../scu/run_scu > ../scu/scuds.output 2>&1
	cat ../scu/scuds.output
	rm ../scu/run_scu

scudt: $(SCUDT)
	echo " Exhaustive test of subroutine interface to scu"
	cd ../scu ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scu $(RSCUDT)
	- ../scu/run_scu > ../scu/scudt.output 2>&1
	cat ../scu/scudt.output
	rm ../scu/run_scu

scuss: $(SCUSS)
	cd ../scu ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scu $(RSCUSS)
	- ../scu/run_scu > ../scu/scus.output 2>&1
	cat ../scu/scus.output
	rm ../scu/run_scu

scust: $(SCUST)
	echo " Exhaustive test of subroutine interface to scu"
	cd ../scu ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_scu $(RSCUST)
	- ../scu/run_scu > ../scu/scut.output 2>&1
	cat ../scu/scut.output
	rm ../scu/run_scu

rootsds: $(ROOTSDS)
	cd ../roots ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_roots \
                        $(RROOTSDS)
	- ../roots/run_roots > ../roots/rootsds.output 2>&1
	cat ../roots/rootsds.output
	rm ../roots/run_roots

rootsdt: $(ROOTSDT)
	echo " Exhaustive test of subroutine interface to roots"
	cd ../roots ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_roots \
                        $(RROOTSDT)
	- ../roots/run_roots > ../roots/rootsdt.output 2>&1
	cat ../roots/rootsdt.output
#	- ../roots/run_roots
	rm ../roots/run_roots

rootsss: $(ROOTSSS)
	cd ../roots ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_roots \
                        $(RROOTSSS)
	- ../roots/run_roots > ../roots/rootss.output 2>&1
	cat ../roots/rootss.output
	rm ../roots/run_roots

rootsst: $(ROOTSST)
	echo " Exhaustive test of subroutine interface to roots"
	cd ../roots ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_roots \
                        $(RROOTSST)
	- ../roots/run_roots > ../roots/rootst.output 2>&1
	cat ../roots/rootst.output
	rm ../roots/run_roots

convertds: $(CONVERTDS)
	cd ../convert ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_convert \
                          $(RCONVERTDS)
	- ../convert/run_convert > ../convert/convertds.output 2>&1
	cat ../convert/convertds.output
	rm ../convert/run_convert

convertdt: $(CONVERTDT)
	echo " Exhaustive test of subroutine interface to convert"
	cd ../convert ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_convert \
                          $(RCONVERTDT)
	- ../convert/run_convert > ../convert/convertdt.output 2>&1
	cat ../convert/convertdt.output
#	- ../convert/run_convert
	rm ../convert/run_convert

convertss: $(CONVERTSS)
	cd ../convert ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_convert \
                          $(RCONVERTSS)
	- ../convert/run_convert > ../convert/converts.output 2>&1
	cat ../convert/converts.output
	rm ../convert/run_convert

convertst: $(CONVERTST)
	echo " Exhaustive test of subroutine interface to convert"
	cd ../convert ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_convert \
                          $(RCONVERTST)
	- ../convert/run_convert > ../convert/convertt.output 2>&1
	cat ../convert/convertt.output
	rm ../convert/run_convert

filterds: $(FILTERDS)
	cd ../filter ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_filter \
                         $(RFILTERDS)
	- ../filter/run_filter > ../filter/filterds.output 2>&1
	cat ../filter/filterds.output
	rm ../filter/run_filter

filterdt: $(FILTERDT)
	echo " Exhaustive test of subroutine interface to filter"
	cd ../filter ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_filter \
                         $(RFILTERDT)
	- ../filter/run_filter > ../filter/filterdt.output 2>&1
	cat ../filter/filterdt.output
#	- ../filter/run_filter
	rm ../filter/run_filter

filterss: $(FILTERSS)
	cd ../filter ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_filter \
                         $(RFILTERSS)
	- ../filter/run_filter > ../filter/filters.output 2>&1
	cat ../filter/filters.output
	rm ../filter/run_filter

filterst: $(FILTERST)
	echo " Exhaustive test of subroutine interface to filter"
	cd ../filter ; $(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_filter \
                         $(RFILTERST)
	- ../filter/run_filter > ../filter/filtert.output 2>&1
	cat ../filter/filtert.output
	rm ../filter/run_filter

#  individual compilations

kinds.o: $(LG)(kinds.o)

$(LG)(kinds.o): ../kinds/kinds.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "kinds"
	$(CP) ../kinds/kinds.F90 $(OBJ)/kinds.F90
	cd $(OBJ); $(FORTRAN) -o kinds.o $(FFLAGS) kinds.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o kinds.o $(FFLAGSN) kinds.F90 )
	cd $(OBJ); $(ARR) kinds.o; $(RM) kinds.F90 kinds.o
	$(RMARFILE) sls.o
	$(MVMODS)
	@printf '[ OK ]\n'

clock.o: $(LG)(clock.o)

$(LG)(clock.o): ../clock/clock.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "clock"
	$(CP) ../clock/clock.F90 $(OBJ)/clock.F90
	cd $(OBJ); $(FORTRAN) -o clock.o $(FFLAGS) clock.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o clock.o $(FFLAGSN) clock.F90 )
	cd $(OBJ); $(ARR) clock.o; $(RM) clock.F90 clock.o
	$(RMARFILE) sls.o
	$(MVMODS)
	@printf '[ OK ]\n'

copyright.o: $(LG)(copyright.o)

$(LG)(copyright.o): ../copyright/copyright.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "copyright"
	$(CP) ../copyright/copyright.F90 $(OBJ)/copyright.F90
	cd $(OBJ); $(FORTRAN) -o copyright.o $(FFLAGS) copyright.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o copyright.o $(FFLAGSN) copyright.F90 )
	cd $(OBJ); $(ARR) copyright.o; $(RM) copyright.F90 copyright.o
	$(RMARFILE) useqpa.o
	$(RMARFILE) useqpb.o
	$(RMARFILE) useqpc.o
	$(RMARFILE) usepre.o
	$(RMARFILE) useeqp.o
	$(RMARFILE) uselancelot.o
	$(RMARFILE) filtrane.o
	$(MVMODS)
	@printf '[ OK ]\n'

norms.o: $(LG)(norms.o)

$(LG)(norms.o): ../norms/norms.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "norms"
	$(CP) ../norms/norms.F90 $(OBJ)/norms.F90
	cd $(OBJ); $(FORTRAN) -o norms.o $(FFLAGS) norms.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o norms.o $(FFLAGSN) norms.F90 )
	cd $(OBJ); $(ARR) norms.o; $(RM) norms.F90 norms.o
	$(RMARFILE) opt.o
	$(RMARFILE) gltr.o
	$(RMARFILE) glrm.o
	$(RMARFILE) lstr.o
	$(RMARFILE) lsrm.o
	$(MVMODS)
	@printf '[ OK ]\n'

checkpoint.o: $(LG)(checkpoint.o)

$(LG)(checkpoint.o): ../checkpoint/checkpoint.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "checkpoint"
	$(CP) ../checkpoint/checkpoint.F90 $(OBJ)/checkpoint.F90
	cd $(OBJ); $(FORTRAN) -o checkpoint.o $(FFLAGS) checkpoint.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o checkpoint.o $(FFLAGSN) checkpoint.F90 )
	cd $(OBJ); $(ARR) checkpoint.o; $(RM) checkpoint.F90 checkpoint.o
	$(RMARFILE) cqp.o
	$(RMARFILE) dqp.o
	$(MVMODS)
	@printf '[ OK ]\n'

opt.o: $(LG)(opt.o)

$(LG)(opt.o): ../opt/opt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "opt"
	$(CP) ../opt/opt.F90 $(OBJ)/opt.F90
	cd $(OBJ); $(FORTRAN) -o opt.o $(FFLAGS) opt.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o opt.o $(FFLAGSN) opt.F90 )
	cd $(OBJ); $(ARR) opt.o; $(RM) opt.F90 opt.o
	$(RMARFILE) fastr.o
	$(MVMODS)
	@printf '[ OK ]\n'

blas.o: $(BLG)(blas.o)

$(BLG)(blas.o): ../lapack/blas.f
	@printf ' %-9s %-15s\t\t' "Compiling" "blas  "
	$(CP) ../lapack/blas.f $(OBJ)/blas.f90
	cd $(OBJ); $(FORTRAN) -o blas.o $(FFLAGS77) blas.f90
	cd $(OBJ); $(BARR) blas.o ; $(RM) blas.f90 blas.o
	$(RANLIB) $(BLG)
	@printf '[ OK ]\n'

dummy.o: $(DLG)(dummy.o)

$(DLG)(dummy.o): ../dum/dummy.f
	@printf ' %-9s %-15s\t\t' "Compiling" "dummy"
	$(CP) ../dum/dummy.f $(OBJ)/dummy.f90
	cd $(OBJ); $(FORTRAN) -o dummy.o $(FFLAGS77) dummy.f90
	cd $(OBJ); $(DARR) dummy.o ; $(RM) dummy.f90 dummy.o
	$(RANLIB) $(DLG)
	@printf '[ OK ]\n'

cutest_dummy.o: $(CDLG)(cutest_dummy.o)

$(CDLG)(cutest_dummy.o): ../dum/cutest_dummy.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "cutest_dummy"
	$(CP) ../dum/cutest_dummy.F90 $(OBJ)/cutest_dummy.F90
	cd $(OBJ); $(FORTRAN) -o cutest_dummy.o $(FFLAGS) cutest_dummy.F90
	cd $(OBJ); $(CDARR) cutest_dummy.o ; \
           $(RM) cutest_dummy.F90 cutest_dummy.o
	$(RANLIB) $(CDLG)
	@printf '[ OK ]\n'

lapack.o: $(LLG)(lapack.o)

$(LLG)(lapack.o): ../lapack/lapack.f
	@printf ' %-9s %-15s\t\t' "Compiling" "lapack"
	$(CAT) ../lapack/lapack.f ../lapack/$(IEEECK)ieeeck.f > \
          $(OBJ)/lapack.f90
	cd $(OBJ); $(FORTRAN) -o lapack.o $(FFLAGS77) lapack.f90
	cd $(OBJ); $(LARR) lapack.o ; $(RM) lapack.f90 lapack.o
	$(RANLIB) $(LLG)
	@printf '[ OK ]\n'

blas_interface.o: $(LG)(blas_interface.o)

$(LG)(blas_interface.o): ../lapack/blas_interface.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "blas_interface"
	$(CP) ../lapack/blas_interface.F90 $(OBJ)/blas_interface.F90
	cd $(OBJ); $(FORTRAN) -o blas_interface.o $(FFLAGSS) \
           blas_interface.F90 || \
         ( printf ' %-26s' "=> Disabling optimization " ; \
            $(FORTRAN) -o blas_interface.o $(FFLAGSN) blas_interface.F90 )
	cd $(OBJ); $(ARR) blas_interface.o ; $(RM) blas_interface.F90 \
          blas_interface.o
	$(RANLIB) $(LG)
	$(RMARFILE) norms.o
	$(RMARFILE) scu.o
	$(RMARFILE) lstr.o
	$(RMARFILE) lsrt.o
	$(RMARFILE) l2rt.o
	$(RMARFILE) sls.o
	$(RMARFILE) sha.o
	@printf '[ OK ]\n'

lapack_interface.o: $(LG)(lapack_interface.o)

$(LG)(lapack_interface.o): ../lapack/lapack_interface.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lapack_interface"
	$(CP) ../lapack/lapack_interface.F90 $(OBJ)/lapack_interface.F90
	cd $(OBJ); $(FORTRAN) -o lapack_interface.o $(FFLAGSS) \
           lapack_interface.F90 || \
         ( printf ' %-26s' "=> Disabling optimization " ; \
            $(FORTRAN) -o lapack_interface.o $(FFLAGSN) lapack_interface.F90 )
	cd $(OBJ); $(ARR) lapack_interface.o ; $(RM) lapack_interface.F90 \
          lapack_interface.o
	$(RANLIB) $(LG)
	$(RMARFILE) gltr.o
	$(RMARFILE) glrt.o
	$(RMARFILE) sls.o
	$(RMARFILE) sbls.o
	$(RMARFILE) trs.o
	$(RMARFILE) rqs.o
	$(RMARFILE) sha.o
	@printf '[ OK ]\n'

metis4.o: $(MLG)(metis4.o)

$(MLG)(metis4.o): ../dum/metis4.f
	@printf ' %-9s %-15s\t\t' "Compiling" "metis 4"
	$(CP) ../dum/metis4.f $(OBJ)/metis4.f90
	cd $(OBJ); $(FORTRAN) -o metis4.o $(FFLAGS77) metis4.f90
	cd $(OBJ); $(MARR) metis4.o ; $(RM) metis4.f90 metis4.o
	$(RANLIB) $(MLG)
	@printf '[ OK ]\n'

ssidss.o: $(RLG)(ssidss.o)

$(RLG)(ssidss.o): ../dum/ssidss.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "ssidss_dum"
	$(CP) ../dum/ssidss.F90 $(OBJ)/ssidss.F90
	cd $(OBJ); $(FORTRAN) -o ssidss.o $(FFLAGS) ssidss.F90
	cd $(OBJ); $(RARR) ssidss.o ; $(RM) ssidss.F90 ssidss.o
	$(MVMODS)
	$(RMARFILE) sls.o
	$(RANLIB) $(RLG)
	@printf '[ OK ]\n'

ssidsd.o: $(RLG)(ssidsd.o)

$(RLG)(ssidsd.o): ../dum/ssidsd.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "ssidsd_dum"
	$(CP) ../dum/ssidsd.F90 $(OBJ)/ssidsd.F90
	cd $(OBJ); $(FORTRAN) -o ssidsd.o $(FFLAGS) ssidsd.F90
	cd $(OBJ); $(RARR) ssidsd.o ; $(RM) ssidsd.F90 ssidsd.o
	$(MVMODS)
	$(RMARFILE) sls.o
	$(RANLIB) $(RLG)
	@printf '[ OK ]\n'

ssids_ciface.o: $(CLG)(ssids_ciface.o)

$(CLG)(ssids_ciface.o): ../dum/C/ssids_ciface.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "ssids_ciface"
	$(CP) ../dum/C/ssids_ciface.F90 $(OBJ)/ssids_ciface.F90
	cd $(OBJ) ; $(FORTRAN) -o ssids_ciface.o $(FFLAGS) \
                      ssids_ciface.F90
	cd $(OBJ) ; $(RARR) ssids_ciface.o ; \
                    $(RM) ssids_ciface.F90 ssids_ciface.o
	$(CRMARFILE) sls_ciface.o
	$(MVMODS)
	@printf '[ OK ]\n'

pardiso.o: $(PLG)(pardiso.o)

$(PLG)(pardiso.o): ../dum/pardiso.f
	@printf ' %-9s %-15s\t\t' "Compiling" "pardiso  "
	$(CP) ../dum/pardiso.f $(OBJ)/pardiso.f90
	cd $(OBJ); $(FORTRAN) -o pardiso.o $(FFLAGS) pardiso.f90
	cd $(OBJ); $(PARR) pardiso.o ; $(RM) pardiso.f90 pardiso.o
	$(RANLIB) $(PLG)
	@printf '[ OK ]\n'

wsmp.o: $(WLG)(wsmp.o)

$(WLG)(wsmp.o): ../dum/wsmp.f
	@printf ' %-9s %-15s\t\t' "Compiling" "wsmp  "
	$(CP) ../dum/wsmp.f $(OBJ)/wsmp.f90
	cd $(OBJ); $(FORTRAN) -o wsmp.o $(FFLAGS) wsmp.f90
	cd $(OBJ); $(WARR) wsmp.o ; $(RM) wsmp.f90 wsmp.o
	$(RANLIB) $(WLG)
	@printf '[ OK ]\n'

specfile.o: $(LG)(specfile.o)

$(LG)(specfile.o): ../specfile/specfile.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "specfile"
	$(CP) ../specfile/specfile.F90 $(OBJ)/specfile.F90
	cd $(OBJ); $(FORTRAN) -o specfile.o $(FFLAGSS) specfile.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o specfile.o $(FFLAGSN) specfile.F90 )
	cd $(OBJ); $(ARR) specfile.o ; $(RM) specfile.F90 specfile.o
	$(RMARFILE) gltr.o
	$(RMARFILE) glrt.o
	$(RMARFILE) lstr.o
	$(RMARFILE) lsrt.o
	$(RMARFILE) l2rt.o
	$(RMARFILE) sbls.o
	$(RMARFILE) psls.o
	$(RMARFILE) qpa.o
	$(RMARFILE) lsqp.o
	$(RMARFILE) wcp.o
	$(RMARFILE) presolve.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

scaling.o: $(LG)(scaling.o)

$(LG)(scaling.o): ../scaling/scaling.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scaling"
	$(CP) ../scaling/scaling.F90 $(OBJ)/scaling.F90
	cd $(OBJ); $(FORTRAN) -o scaling.o $(FFLAGSS) scaling.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o scaling.o $(FFLAGSN) scaling.F90 )
	cd $(OBJ); $(ARR) scaling.o ; $(RM) scaling.F90 scaling.o
	$(RMARFILE) useqpa.o
	$(RMARFILE) useqpb.o
	$(RMARFILE) useqpc.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  Substantial GALAHAD packages

smt.o: $(LG)(smt.o)

$(LG)(smt.o): ../smt/smt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "smt   "
	$(CP) ../smt/smt.F90 $(OBJ)/smt.F90
	cd $(OBJ); $(FORTRAN) -o smt.o $(FFLAGSS) smt.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o smt.o $(FFLAGSN) smt.F90 )
	cd $(OBJ); $(ARR) smt.o ; $(RM) smt.F90 smt.o
	$(RMARFILE) space.o
	$(RMARFILE) nlpt.o
	$(RMARFILE) mop.o
	$(PRRMARFILE) cutest_functions.o
	$(RMARFILE) qpt.o
	$(RMARFILE) sils.o
	$(RMARFILE) gls.o
	$(MVMODS)
	@printf '[ OK ]\n'

sils.o: $(LG)(sils.o)

$(LG)(sils.o): ../sils/sils.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "sils  "
	$(CP) ../sils/sils.F90 $(OBJ)/sils.F90
	cd $(OBJ) ; $(FORTRAN) -o sils.o $(FFLAGSS) sils.F90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                    $(FORTRAN) -o sils.o $(FFLAGSN) sils.F90 )
	cd $(OBJ) ; $(ARR) sils.o ; $(RM) sils.F90 sils.o
	$(RMARFILE) ir.o
	$(RMARFILE) sls.o
	$(RMARFILE) sbls.o
	$(RMARFILE) psls.o
	$(RMARFILE) mdchl.o
	$(RMARFILE) lancelot_types.o
	$(RMARFILE) qpd.o
	$(RMARFILE) fdc.o
	$(RMARFILE) superb.o
	$(MVMODS)
	@printf '[ OK ]\n'

gls.o: $(LG)(gls.o)

$(LG)(gls.o): ../gls/gls.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "gls  "
	$(CP) ../gls/gls.F90 $(OBJ)/gls.F90
	cd $(OBJ) ; $(FORTRAN) -o gls.o $(FFLAGSS) gls.F90 \
                 || ( printf ' %-26s' "=> Disabling optimization " ; \
                    $(FORTRAN) -o gls.o $(FFLAGSN) gls.F90 )
	cd $(OBJ) ; $(ARR) gls.o ; $(RM) gls.F90 gls.o
	$(RMARFILE) uls.o
	$(MVMODS)
	@printf '[ OK ]\n'

trans.o: $(LG)(trans.o)

$(LG)(trans.o): ../trans/trans.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "trans   "
	$(CP) ../trans/trans.F90 $(OBJ)/trans.F90
	cd $(OBJ); $(FORTRAN) -o trans.o $(FFLAGSS) trans.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o trans.o $(FFLAGSN) trans.F90 )
	cd $(OBJ); $(ARR) trans.o ; $(RM) trans.F90 f90 trans.o
	$(RMARFILE) ptrans.o
	$(RMARFILE) qtrans.o
	$(RMARFILE) scale.o
	$(MVMODS)
	@printf '[ OK ]\n'

ptrans.o: $(LG)(ptrans.o)

$(LG)(ptrans.o): ../ptrans/ptrans.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "ptrans   "
	$(CP) ../ptrans/ptrans.F90 $(OBJ)/ptrans.F90
	cd $(OBJ); $(FORTRAN) -o ptrans.o $(FFLAGSS) ptrans.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o ptrans.o $(FFLAGSN) ptrans.F90 )
	cd $(OBJ); $(ARR) ptrans.o ; $(RM) ptrans.F90 ptrans.o
	$(RMARFILE) superb.o
	$(RMARFILE) trtn.o
	$(MVMODS)
	@printf '[ OK ]\n'

qtrans.o: $(LG)(qtrans.o)

$(LG)(qtrans.o): ../qtrans/qtrans.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "qtrans   "
	$(CP) ../qtrans/qtrans.F90 $(OBJ)/qtrans.F90
	cd $(OBJ); $(FORTRAN) -o qtrans.o $(FFLAGSS) qtrans.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o qtrans.o $(FFLAGSN) qtrans.F90 )
	cd $(OBJ); $(ARR) qtrans.o ; $(RM) qtrans.F90 qtrans.o
	$(MVMODS)
	@printf '[ OK ]\n'

scale.o: $(LG)(scale.o)

$(LG)(scale.o): ../scale/scale.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scale   "
	$(CP) ../scale/scale.F90 $(OBJ)/scale.F90
	cd $(OBJ); $(FORTRAN) -o scale.o $(FFLAGSS) scale.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o scale.o $(FFLAGSN) scale.F90 )
	cd $(OBJ); $(ARR) scale.o ; $(RM) scale.F90 scale.o
	$(RMARFILE) qpd.o
	$(RMOBFILE) scale_spec.o
	$(RMOBFILE) scale_test.o
	$(MVMODS)
	@printf '[ OK ]\n'

rand.o: $(LG)(rand.o)

$(LG)(rand.o): ../rand/rand.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "rand"
	$(CP) ../rand/rand.F90 $(OBJ)/rand.F90
	cd $(OBJ); $(FORTRAN) -o rand.o $(FFLAGSS) rand.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o rand.o $(FFLAGSN) rand.F90 )
	cd $(OBJ); $(ARR) rand.o ; $(RM) rand.F90 rand.o
	$(RMARFILE) gltrd.o
	$(RMARFILE) qpd.o
	$(RMOBFILE) runlancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

sort.o: $(LG)(sort.o)

$(LG)(sort.o): ../sort/sort.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "sort  "
	$(CP) ../sort/sort.F90 $(OBJ)/sort.F90
	cd $(OBJ); $(FORTRAN) -o sort.o $(FFLAGSS) sort.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o sort.o $(FFLAGSN) sort.F90 )
	cd $(OBJ); $(ARR) sort.o ; $(RM) sort.F90 sort.o
	$(RMARFILE) presolve.o
	$(RMARFILE) cauchy.o
	$(RMARFILE) qpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

tools.o: $(LG)(tools.o)

$(LG)(tools.o): ../tools/tools.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "tools  "
#	$(CP) ../tools/tools.F90 $(OBJ)/tools.F90
	$(CP) ../tools/tools.F90 $(OBJ)/tools.F90
	cd $(OBJ); $(FORTRAN) -o tools.o $(FFLAGSS) tools.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o tools.o $(FFLAGSN) tools.F90 )
	cd $(OBJ); $(ARR) tools.o ; $(RM) tools.F90 tools.o
	$(RMARFILE) nlpt.o
	$(MVMODS)
	@printf '[ OK ]\n'

space.o: $(LG)(space.o)

$(LG)(space.o): ../space/space.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "space  "
	$(CP) ../space/space.F90 $(OBJ)/space.F90
	cd $(OBJ); $(FORTRAN) -o space.o $(FFLAGSS) space.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o space.o $(FFLAGSN) space.F90 )
	cd $(OBJ); $(ARR) space.o ; $(RM) space.F90 space.o
	$(RMARFILE) trans.o
	$(RMARFILE) sbls.o
	$(RMARFILE) gltr.o
	$(RMARFILE) qpc.o
	$(RMARFILE) wcp.o
	$(PRRMARFILE) cutest_functions.o
	$(MVMODS)
	@printf '[ OK ]\n'

string.o: $(LG)(string.o)

$(LG)(string.o): ../string/string.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "string  "
	$(CP) ../string/string.F90 $(OBJ)/string.F90
	$(CP) ../string/string.F90 $(OBJ)/string.F90
	cd $(OBJ); $(FORTRAN) -o string.o $(FFLAGSS) string.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o string.o $(FFLAGSN) string.F90 )
#	cd $(OBJ); $(ARR) string.o ; $(RM) string.F90 string.o
	cd $(OBJ); $(ARR) string.o ; $(RM) string.o
	$(RMARFILE) uls.o
	$(RMARFILE) sls.o
	$(RMARFILE) wcp.o
	$(RMARFILE) fastr.o
	$(MVMODS)
	@printf '[ OK ]\n'

symbols.o: $(LG)(symbols.o)

$(LG)(symbols.o): ../symbols/symbols.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "symbols"
	$(CP) ../symbols/symbols.F90 $(OBJ)/symbols.F90
	cd $(OBJ); $(FORTRAN) -o symbols.o $(FFLAGSS) symbols.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o symbols.o $(FFLAGSN) symbols.F90 )
	cd $(OBJ); $(ARR) symbols.o ; $(RM) symbols.F90 symbols.o
	$(RMARFILE) sort.o
	$(RMARFILE) specfile.o
	$(MVMODS)
	@printf '[ OK ]\n'

convert.o: $(LG)(convert.o)

$(LG)(convert.o): ../convert/convert.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "convert"
	$(CP) ../convert/convert.F90 $(OBJ)/convert.F90
	cd $(OBJ); $(FORTRAN) -o convert.o $(FFLAGSS) convert.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o convert.o $(FFLAGSN) convert.F90 )
	cd $(OBJ); $(ARR) convert.o ; $(RM) convert.F90 convert.o
	$(RMARFILE) miqr.o
	$(RMOBFILE) converts.o
	$(RMOBFILE) convertt.o
	$(MVMODS)
	@printf '[ OK ]\n'

filter.o: $(LG)(filter.o)

$(LG)(filter.o): ../filter/filter.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "filter"
	$(CP) ../filter/filter.F90 $(OBJ)/filter.F90
	cd $(OBJ); $(FORTRAN) -o filter.o $(FFLAGSS) filter.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o filter.o $(FFLAGSN) filter.F90 )
	cd $(OBJ); $(ARR) filter.o ; $(RM) filter.F90 filter.o
	$(RMARFILE) fastr.o
	$(RMARFILE) fisqp.o
	$(RMOBFILE) filters.o
	$(RMOBFILE) filtert.o
	$(MVMODS)
	@printf '[ OK ]\n'

scu.o: $(LG)(scu.o)

$(LG)(scu.o): ../scu/scu.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scu   "
	$(CP) ../scu/scu.F90 $(OBJ)/scu.F90
	cd $(OBJ); $(FORTRAN) -o scu.o $(FFLAGSS) scu.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o scu.o $(FFLAGSN) scu.F90 )
	cd $(OBJ); $(ARR) scu.o ; $(RM) scu.F90 scu.o
	$(RMARFILE) precn.o
	$(RMARFILE) frntl.o
	$(RMARFILE) pqp.o
	$(RMARFILE) ism.o
	$(RMARFILE) qpd.o
	$(RMARFILE) psls.o
	$(MVMODS)
	@printf '[ OK ]\n'

roots.o: $(LG)(roots.o)

$(LG)(roots.o): ../roots/roots.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "roots  "
	$(CP) ../roots/roots.F90 $(OBJ)/roots.F90
	cd $(OBJ); $(FORTRAN) -o roots.o $(FFLAGSS) roots.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o roots.o $(FFLAGSN) roots.F90 )
	cd $(OBJ); $(ARR) roots.o ; $(RM) roots.F90 roots.o
	$(RMARFILE) cqp.o
	$(RMARFILE) qpa.o
	$(RMARFILE) lsqp.o
	$(RMARFILE) fdc.o
	$(RMARFILE) wcp.o
	$(RMARFILE) gltr.o
	$(RMARFILE) trs.o
	$(RMARFILE) rqs.o
	$(RMOBFILE) rootss.o
	$(RMOBFILE) rootst.o
	$(MVMODS)
	@printf '[ OK ]\n'

problem.o: $(PRLG)(problem.o)

$(PRLG)(problem.o): ../problem/problem.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "problem   "
	$(CP) ../problem/problem.F90 $(OBJ)/problem.F90
	cd $(OBJ); $(FORTRAN) -o problem.o $(FFLAGSS) problem.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o problem.o $(FFLAGSN) problem.F90 )
	cd $(OBJ); $(PRARR) problem.o ; $(RM) problem.F90 problem.o
	@printf '[ OK ]\n'

cutest_functions.o: $(PRLG)(cutest_functions.o)

$(PRLG)(cutest_functions.o): ../cutest_functions/cutest_functions.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "cutest_functions   "
	$(CP) ../cutest_functions/cutest_functions.F90 \
          $(OBJ)/cutest_functions.F90
	cd $(OBJ); \
          $(FORTRAN) -o cutest_functions.o $(FFLAGSS) cutest_functions.F90 \
              || ( printf ' %-26s' "=> Disabling optimization " ; \
              $(FORTRAN) -o cutest_functions.o $(FFLAGSN) cutest_functions.F90 )
	cd $(OBJ); $(PRARR) cutest_functions.o ; \
          $(RM) cutest_functions.F90 cutest_functions.o
	$(RMARFILE) usefisqp.o
	$(RMARFILE) usefastr.o
	$(RMARFILE) usefunnel.o
	$(RMARFILE) usetrimsqp.o
	$(RMARFILE) usetru.o
	$(RMARFILE) usearc.o
	$(RMARFILE) usebarc.o
	@printf '[ OK ]\n'

# others

#  utilities

buildspec_silent: $(OBJ)/buildspec
buildspec: $(OBJ)/buildspec
	@printf ' %-21s\n' "GALAHAD: buildspec package ($(PRECIS) $(SUCC)"

$(OBJ)/buildspec: ../buildspec/buildspec.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "buildspec  "
	$(CP) ../buildspec/buildspec.F90 $(OBJ)/buildspec.F90
	cd $(OBJ) ; $(FORTRAN) -o buildspec $(RUNFFLAGS) buildspec.F90 \
          -lgalahad -L$(OBJ) -I $(GALAHAD)/include
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

#  test decks

smts.o: $(OBJ)/smts.o

$(OBJ)/smts.o: ../smt/smts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "smts  "
	$(SED) -f $(SEDS) ../smt/smts.f90 > $(OBJ)/smts.f90
	cd $(OBJ) ; $(FORTRAN) -o smts.o $(FFLAGS) smts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

smtt.o: $(OBJ)/smtt.o

$(OBJ)/smtt.o: ../smt/smtt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "smtt  "
	$(CP) ../smt/smtt.F90 $(OBJ)/smtt.F90
	cd $(OBJ) ; $(FORTRAN) -o smtt.o $(FFLAGSS) smtt.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

silss.o: $(OBJ)/silss.o

$(OBJ)/silss.o: ../sils/silss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "silss  "
	$(SED) -f $(SEDS) ../sils/silss.f90 > $(OBJ)/silss.f90
	cd $(OBJ) ; $(FORTRAN) -o silss.o $(FFLAGS) silss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

silst.o: $(OBJ)/silst.o

$(OBJ)/silst.o: ../sils/silst.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "silst  "
	$(CP) ../sils/silst.F90 $(OBJ)/silst.F90
	cd $(OBJ) ; $(FORTRAN) -o silst.o $(FFLAGSS) silst.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

glssbig.o: $(OBJ)/glssbig.o

$(OBJ)/glssbig.o: ../gls/glssbig.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "glssbig  "
	$(SED) -f $(SEDS) ../gls/glssbig.f90 > $(OBJ)/glssbig.f90
	cd $(OBJ) ; $(FORTRAN) -o glssbig.o $(FFLAGS) glssbig.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

glss.o: $(OBJ)/glss.o

$(OBJ)/glss.o: ../gls/glss.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "glss  "
	$(SED) -f $(SEDS) ../gls/glss.f90 > $(OBJ)/glss.f90
	cd $(OBJ) ; $(FORTRAN) -o glss.o $(FFLAGS) glss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

glst.o: $(OBJ)/glst.o

$(OBJ)/glst.o: ../gls/glst.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "glst  "
	$(CP) ../gls/glst.F90 $(OBJ)/glst.F90
	cd $(OBJ) ; $(FORTRAN) -o glst.o $(FFLAGSS) glst.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

rands.o: $(OBJ)/rands.o

$(OBJ)/rands.o: ../rand/rands.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "rands  "
	$(SED) -f $(SEDS) ../rand/rands.f90 > $(OBJ)/rands.f90
	cd $(OBJ) ; $(FORTRAN) -o rands.o $(FFLAGS) rands.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

randt.o: $(OBJ)/randt.o

$(OBJ)/randt.o: ../rand/randt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "randt  "
	$(CP) ../rand/randt.F90 $(OBJ)/randt.F90
	cd $(OBJ) ; $(FORTRAN) -o randt.o $(FFLAGSS) randt.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

sorts.o: $(OBJ)/sorts.o

$(OBJ)/sorts.o: ../sort/sorts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "sorts  "
	$(SED) -f $(SEDS) ../sort/sorts.f90 > $(OBJ)/sorts.f90
	cd $(OBJ) ; $(FORTRAN) -o sorts.o $(FFLAGS) sorts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

sortt.o: $(OBJ)/sortt.o

$(OBJ)/sortt.o: ../sort/sortt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "sortt  "
	$(CP) ../sort/sortt.F90 $(OBJ)/sortt.F90
	cd $(OBJ) ; $(FORTRAN) -o sortt.o $(FFLAGSS) sortt.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

scale_spec.o: $(OBJ)/scale_spec.o

$(OBJ)/scale_spec.o: ../scale/scale_spec.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scale_spec  "
	$(CP) ../scale/scale_spec.F90 $(OBJ)/scale_spec.F90
	cd $(OBJ) ; $(FORTRAN) -o scale_spec.o $(FFLAGS) scale_spec.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

scale_test.o: $(OBJ)/scale_tset.o

$(OBJ)/scale_test.o: ../scale/scale_test.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scale_test  "
	$(CP) ../scale/scale_test.F90 $(OBJ)/scale_test.F90
	cd $(OBJ) ; $(FORTRAN) -o scale_test.o $(FFLAGSS) scale_test.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

scus.o: $(OBJ)/scus.o

$(OBJ)/scus.o: ../scu/scus.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scus  "
	$(SED) -f $(SEDS) ../scu/scus.f90 > $(OBJ)/scus.f90
	cd $(OBJ) ; $(FORTRAN) -o scus.o $(FFLAGS) scus.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

scut.o: $(OBJ)/scut.o

$(OBJ)/scut.o: ../scu/scut.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scut  "
	$(CP) ../scu/scut.F90 $(OBJ)/scut.F90
	cd $(OBJ) ; $(FORTRAN) -o scut.o $(FFLAGSS) scut.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

rootss.o: $(OBJ)/rootss.o

$(OBJ)/rootss.o: ../roots/rootss.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "rootss  "
	$(SED) -f $(SEDS) ../roots/rootss.f90 > $(OBJ)/rootss.f90
	cd $(OBJ) ; $(FORTRAN) -o rootss.o $(FFLAGS) rootss.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

rootst.o: $(OBJ)/rootst.o

$(OBJ)/rootst.o: ../roots/rootst.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "rootst  "
	$(CP) ../roots/rootst.F90 $(OBJ)/rootst.F90
	cd $(OBJ) ; $(FORTRAN) -o rootst.o $(FFLAGSS) rootst.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

converts.o: $(OBJ)/converts.o

$(OBJ)/converts.o: ../convert/converts.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "converts  "
	$(SED) -f $(SEDS) ../convert/converts.f90 > $(OBJ)/converts.f90
	cd $(OBJ) ; $(FORTRAN) -o converts.o $(FFLAGS) converts.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

convertt.o: $(OBJ)/convertt.o

$(OBJ)/convertt.o: ../convert/convertt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "convertt  "
	$(CP) ../convert/convertt.F90 $(OBJ)/convertt.F90
	cd $(OBJ) ; $(FORTRAN) -o convertt.o $(FFLAGSS) convertt.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

filters.o: $(OBJ)/filters.o

$(OBJ)/filters.o: ../filter/filters.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "filters  "
	$(SED) -f $(SEDS) ../filter/filters.f90 > $(OBJ)/filters.f90
	cd $(OBJ) ; $(FORTRAN) -o filters.o $(FFLAGS) filters.f90
	rm $(OBJ)/*.f90
	@printf '[ OK ]\n'

filtert.o: $(OBJ)/filtert.o

$(OBJ)/filtert.o: ../filter/filtert.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "filtert  "
	$(CP) ../filter/filtert.F90 $(OBJ)/filtert.F90
	cd $(OBJ) ; $(FORTRAN) -o filtert.o $(FFLAGSS) filtert.F90
	rm $(OBJ)/*.F90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(OBJ)/qpbdt.o $(OBJ)/qpbs.o $(OBJ)/qpbt.o \
                            $(OBJ)/qpbst.o
	@printf '[ OK ]\n'

clean_spral:
	@printf ' %-9s\t\t' "Removing spral"
	$(RM) $(LGS) $(LGD) $(OBJ)/libgalahad_spral.a $(MOD)/spral*
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) -r $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'

