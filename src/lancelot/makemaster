#  Main body of the LANCELOT B installation makefile under GALAHAD

#  N. Gould and Ph. L. Toint.
#  This version: 2022-12-19

SHELL = /bin/$(BINSHELL)

ifeq "$(PRECIS)" "single"
 DPREC = -DGALAHAD_SINGLE
else
 DPREC = -DGALAHAD_DOUBLE
endif

ifeq "$(LINEARSOLVER)" "ma57"
 DLINEARSOLVER = -DLANCELOT_USE_MA57
else
 DLINEARSOLVER = -DLANCELOT_USE_SILS
endif

#  compiler flags

FFLAGS    = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(USUAL) \
              $(DPREC) $(DLINEARSOLVER) -I $(GALAHAD)/include
FFLAGSS   = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F90) $(SPECIAL) \
              $(DPREC) $(DLINEARSOLVER) -I $(GALAHAD)/include
FFLAGSN   = $(BASIC) $(NOOPTIMIZATION) $(DEBUG) $(MODULES) $(F90) \
              $(DPREC) $(DLINEARSOLVER) -I $(GALAHAD)/include
FFLAGS77  = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(USUAL) \
              $(DPREC) $(DLINEARSOLVER) -I $(GALAHAD)/include
FFLAGS77S = $(BASIC) $(OPTIMIZATION) $(DEBUG) $(MODULES) $(F77) $(SPECIAL) \
              $(DPREC) $(DLINEARSOLVER) -I $(GALAHAD)/include
RUNFFLAGS =          $(OPTIMIZATION) $(DEBUG) $(MODULES)

#  names of random libraries

LG  = $(OBJ)/libgalahad.a
LGS = $(OBJS)/libgalahad.a
LGD = $(OBJD)/libgalahad.a

BLG  = $(OBJ)/libgalahad_blas.a
BLGS = $(OBJS)/libgalahad_blas.a
BLGD = $(OBJD)/libgalahad_blas.a

HLG  = $(OBJ)/libgalahad_hsl.a
HLGS = $(OBJS)/libgalahad_hsl.a
HLGD = $(OBJD)/libgalahad_hsl.a

MLG  = $(OBJ)/libgalahad_metis4.a
MLGS = $(OBJS)/libgalahad_metis4.a
MLGD = $(OBJD)/libgalahad_metis4.a

#  Libraries used

LIBS = -lgalahad $(HSL) $(METIS4) $(LAPACK) $(BLAS)

#  Archive manipulation strings

ARR = $(AR) $(ARREPFLAGS) $(LG)

BARR = $(AR) $(ARREPFLAGS) $(BLG)
BRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(BLG)

HARR = $(AR) $(ARREPFLAGS) $(HLG)
HRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(HLG)

RMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $(LG)
RMOBFILE = $(GALAHAD)/bin/rmobfile $(RM) $(OBJ)

MARR = $(AR) $(ARREPFLAGS) $(MLG)
MRMARFILE = $(GALAHAD)/bin/rmarfile $(AR) $(GREP) $MHLG)

#  compilation agenda

OBJECTSBASICS = extend basics scu $(LGS)(bndsl.o)  $(LGS)(others.o) \
         icfs ma61 linearsolver ma57 sils ad02 \
         $(LGS)(cauchy.o) $(LGS)(cg.o)     $(LGS)(hslint.o) $(LGS)(asmbl.o) \
         $(LGS)(hsprd.o)  $(LGS)(initw.o)  $(LGS)(mdchl.o)  $(LGS)(precn.o) \
         $(LGS)(frntl.o)  $(LGS)(strutr.o) $(LGS)(lancelot_types.o)

OBJECTSS=$(OBJECTSBASICS) $(LGS)(lancelot.o) $(LGS)(lancelot_simple.o)
OBJECTSSTEERINGS=$(OBJECTSBASICS) $(LGS)(lancelot_steering.o)

OBJECTSFILTRANES = extend $(LGS)(bndsl.o)
OBJECTSPSLSS = $(OBJECTSFILTRANES) ma61 $(LGS)(hslint.o) $(LGS)(mdchl.o)

USEOBJECTSS=$(OBJECTSS)   $(LGS)(scaln.o)  $(LGS)(drchg.o) \
         $(LGS)(drche.o) rand copyright    $(LGS)(uselancelot.o)
USEOBJECTSSTEERINGS=$(OBJECTSSTEERINGS)    $(LGS)(scaln.o) $(LGS)(drchg.o) \
         $(LGS)(drche.o) rand copyright    $(LGS)(uselancelot_steering.o)

OBJECTSBASICD = extend basics $(LGD)(bndsl.o)  $(LGD)(others.o) \
         icfs ma61 linearsolver ma57 sils ad02 \
         $(LGD)(cauchy.o) $(LGD)(cg.o)     $(LGD)(hslint.o) $(LGD)(asmbl.o) \
         $(LGD)(hsprd.o)  $(LGD)(initw.o)  $(LGD)(mdchl.o)  $(LGD)(precn.o) \
         $(LGD)(frntl.o)  $(LGD)(strutr.o) $(LGD)(lancelot_types.o)

OBJECTSD=$(OBJECTSBASICD) $(LGD)(lancelot.o) $(LGD)(lancelot_simple.o)
OBJECTSSTEERINGD=$(OBJECTSBASICD) $(LGD)(lancelot_steering.o)

OBJECTSFILTRANED = extend $(LGD)(bndsl.o)
OBJECTSPSLSD = $(OBJECTSFILTRANED) ma61 $(LGD)(hslint.o) $(LGD)(mdchl.o)

USEOBJECTSD=$(OBJECTSD) $(LGD)(scaln.o) $(LGD)(drchg.o) \
         $(LGD)(drche.o) rand copyright $(LGD)(uselancelot.o)
USEOBJECTSSTEERINGD=$(OBJECTSSTEERINGD) $(LGD)(scaln.o) $(LGD)(drchg.o) \
         $(LGD)(drche.o) rand copyright $(LGD)(uselancelot_steering.o)

SUCC = precision version) compiled successfully
SUCC_SIF = precision version) for SIF compiled successfully

#  valgrind options if needed

VALGRIND = -v --tool=memcheck --leak-check=yes --show-reachable=yes \
#VALGRIND = --tool=memcheck --leak-check=full --show-reachable=yes \
--track-origins=yes

#  main compilations and runs

all: lancelotb_sif

lancelotb_sif: lancelotb_sif_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC_SIF)"

lancelotb_sif_single: $(USEOBJECTSS) $(OBJS)/runlancelot_sif.o
	$(RANLIB) $(LGS)

lancelotb_sif_double: $(USEOBJECTSD) $(OBJD)/runlancelot_sif.o
	$(RANLIB) $(LGD)

lancelotb_silent: lancelotb_silent_$(PRECIS)
lancelotb_silent_single: $(OBJECTSS)
lancelotb_silent_double: $(OBJECTSD)

lancelotb: lancelotb_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"
lancelotb_single: $(OBJECTSS)
	$(RANLIB) $(LGS)
lancelotb_double: $(OBJECTSD)
	$(RANLIB) $(LGD)

use_lancelotb_silent: use_lancelotb_$(PRECIS)
use_lancelotb: use_lancelotb_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"

use_lancelotb_single: $(USEOBJECTSS)
	$(RANLIB) $(LGS)

use_lancelotb_double: $(USEOBJECTSD)
	$(RANLIB) $(LGD)

all_steering: lancelotb_steering_sif

lancelotb_steering_sif: lancelotb_steering_sif_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B STEERING ($(PRECIS) $(SUCC_SIF)"

lancelotb_steering_sif_single: $(USEOBJECTSSTEERINGS) \
           $(OBJS)/runlancelot_steering_sif.o
	$(RANLIB) $(LGS)

lancelotb_steering_sif_double: $(USEOBJECTSSTEERINGD) \
          $(OBJD)/runlancelot_steering_sif.o
	$(RANLIB) $(LGD)

lancelotb_steering_silent: lancelotb_steering_silent_$(PRECIS)
lancelotb_steering_silent_single: $(OBJECTSS)
lancelotb_steering_silent_double: $(OBJECTSD)

lancelotb_steering: lancelotb_steering_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"
lancelotb_steering_single: $(OBJECTSS)
	$(RANLIB) $(LGS)
lancelotb_steering_double: $(OBJECTSD)
	$(RANLIB) $(LGD)

use_lancelotb_steering_silent: use_lancelotb_steering_$(PRECIS)
use_lancelotb_steering: use_lancelotb_steering_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"

use_lancelotb_steering_single: $(USEOBJECTSS)
	$(RANLIB) $(LGS)

use_lancelotb_steering_double: $(USEOBJECTSD)
	$(RANLIB) $(LGD)

lancelotb_psls_silent: lancelotb_silent_psls_$(PRECIS)
lancelotb_silent_psls_single: $(OBJECTSPSLSS)
lancelotb_silent_psls_double: $(OBJECTSPSLSD)

lancelotb_psls: lancelotb_psls_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"
lancelotb_psls_single: $(OBJECTSPSLSS)
	$(RANLIB) $(LGS)
lancelotb_psls_double: $(OBJECTSPSLSD)
	$(RANLIB) $(LGD)

lancelotb_filtrane_silent: lancelotb_silent_filtrane_$(PRECIS)
lancelotb_silent_filtrane_single: $(OBJECTSFILTRANES)
lancelotb_silent_filtrane_double: $(OBJECTSFILTRANED)

lancelotb_filtrane: lancelotb_filtrane_$(PRECIS)
	@printf ' %-21s\n' "GALAHAD: LANCELOT B ($(PRECIS) $(SUCC)"
lancelotb_filtrane_single: $(OBJECTSFILTRANES)
	$(RANLIB) $(LGS)
lancelotb_filtrane_double: $(OBJECTSFILTRANED)
	$(RANLIB) $(LGD)

tests: test test_cutest

tests_all: lancelotss lancelotst lancelotds lancelotdt
tests_steering: lancelot_steeringss lancelot_steeringst \
                lancelot_steeringds lancelot_steeringdt
tests_simple: lancelot_simpless lancelot_simplest \
              lancelot_simpleds lancelot_simpledt

test: test_$(PRECIS)
test_single: lancelotst
	echo " Tests for LANCELOT B complete"
test_double: lancelotdt
	echo " Tests for LANCELOT B complete"

test_sif: test_cutest
test_cutest: test_cutest_$(PRECIS)
test_cutest_single: $(USEOBJECTSS) $(OBJS)/runlancelot_sif.o
	echo ""
	echo " Testing SIF interface to LANCELOT B"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lancelot -s ALLINITC
	echo ""
	echo " Tests for LANCELOT B complete"
test_cutest_double: $(USEOBJECTSD) $(OBJD)/runlancelot_sif.o
	echo ""
	echo " Testing SIF interface to LANCELOT B"
	cd $(GALAHAD)/examples ; sdgal $(VERSION) lancelot ALLINITC
	echo ""
	echo " Tests for LANCELOT B complete"

test_full: test_full_$(PRECIS)
test_full_single: lancelotst
	echo ""
	echo " Tests for LANCELOT B complete"
test_full_double: lancelotdt
	echo ""
	echo " Tests for LANCELOT B complete"

test_spec: test_spec_$(PRECIS)

test_spec_single: lancelotss
	echo ""
	echo " Tests for LANCELOT B complete"

test_spec_double: lancelotds
	echo ""
	echo " Tests for LANCELOT B complete"

lancelotss: $(OBJECTSS) $(OBJS)/lancelots.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot $(OBJS)/lancelots.o \
            -L$(OBJS) $(LIBS)
	- ./run_lancelot > lancelotss.output 2>&1
	cat lancelotss.output
	rm ./run_lancelot

lancelotds: $(OBJECTSD) $(OBJD)/lancelots.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot $(OBJD)/lancelots.o \
            -L$(OBJD) $(LIBS)
	- ./run_lancelot > lancelotds.output 2>&1
	cat lancelotds.output
	rm ./run_lancelot

lancelotst: $(OBJECTSS) $(OBJS)/lancelott.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot $(OBJS)/lancelott.o \
           -L$(OBJS) $(LIBS)
	- ./run_lancelot > lancelotst.output 2>&1
	cat lancelotst.output
	rm ./run_lancelot

lancelotdt: $(OBJECTSD) $(OBJD)/lancelott.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot $(OBJD)/lancelott.o \
            -L$(OBJD) $(LIBS)
	- ./run_lancelot > lancelotdt.output 2>&1
	cat lancelotdt.output
	rm ./run_lancelot

lancelotdt_valgrind: $(OBJECTSD) $(OBJD)/lancelott.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot $(OBJD)/lancelott.o \
            -L$(OBJD) $(LIBS)
	- valgrind $(VALGRIND) ./run_lancelot > \
           lancelotdt_valgrind.output 2>&1
	cat lancelotdt_valgrind.output
	rm ./run_lancelot

lancelot_steeringss: $(OBJECTSSTEERINGS) $(OBJS)/lancelot_steerings.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_steering \
            $(OBJS)/lancelot_steerings.o -L$(OBJS) $(LIBS)
	- ./run_lancelot_steering > lancelot_steeringss.output 2>&1
	cat lancelot_steeringss.output
	rm ./run_lancelot_steering

lancelot_steeringds: $(OBJECTSSTEERINGD) $(OBJD)/lancelot_steerings.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_steering \
          $(OBJD)/lancelot_steerings.o -L$(OBJD) $(LIBS)
	- ./run_lancelot_steering > lancelot_steeringds.output 2>&1
	cat lancelot_steeringds.output
	rm ./run_lancelot_steering

lancelot_steeringst: $(OBJECTSSTEERINGS) $(OBJS)/lancelot_steeringt.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_steering \
          $(OBJS)/lancelot_steeringt.o -L$(OBJS) $(LIBS)
	- ./run_lancelot_steering > lancelot_steeringst.output 2>&1
	cat lancelot_steeringst.output
	rm ./run_lancelot_steering

lancelot_steeringdt: $(OBJECTSSTEERINGD) $(OBJD)/lancelot_steeringt.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_steering \
          $(OBJD)/lancelot_steeringt.o -L$(OBJD) $(LIBS)
	- ./run_lancelot_steering > lancelot_steeringdt.output 2>&1
	cat lancelot_steeringdt.output
	rm ./run_lancelot_steering

lancelot_simpless: $(OBJECTSS) $(OBJS)/lancelot_simples.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_simple \
           $(OBJS)/lancelot_simples.o -L$(OBJS) $(LIBS)
	- ./run_lancelot_simple > lancelot_simpless.output 2>&1
	cat lancelot_simpless.output
	rm ./run_lancelot_simple

lancelot_simpleds: $(OBJECTSD) $(OBJD)/lancelot_simples.o
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_simple \
           $(OBJD)/lancelot_simples.o -L$(OBJD) $(LIBS)
	- ./run_lancelot_simple > lancelot_simpleds.output 2>&1
	cat lancelot_simpleds.output
	rm ./run_lancelot_simple

lancelot_simplest: $(OBJECTSS) $(OBJS)/lancelot_simplet.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_simple \
           $(OBJS)/lancelot_simplet.o -L$(OBJS) $(LIBS)
	- ./run_lancelot_simple > lancelot_simplest.output 2>&1
	cat lancelot_simplest.output
	rm ./run_lancelot_simple

lancelot_simpledt: $(OBJECTSD) $(OBJD)/lancelot_simplet.o
	echo ""
	echo " Exhaustive test of subroutine interface to LANCELOT B"
	$(FORTRAN) $(RUNFFLAGS) $(SPECIAL) -o run_lancelot_simple \
            $(OBJD)/lancelot_simplet.o -L$(OBJD) $(LIBS)
	- ./run_lancelot_simple > lancelot_simpledt.output 2>&1
	cat lancelot_simpledt.output
	rm ./run_lancelot_simple

#  basic packages

extend:
	( cd ../extend ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            extend_silent PRECIS=$(PRECIS) PWD=$(PWD)/../extend )
basics:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            basic_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
linearsolver:
	( cd ../general ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            linearsolver_silent PRECIS=$(PRECIS) PWD=$(PWD)/../general )
sils:
	( cd ../sils ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            sils_silent PRECIS=$(PRECIS) PWD=$(PWD)/../sils )
scu:
	( cd ../scu ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            scu_silent  PRECIS=$(PRECIS) PWD=$(GALAHAD)/src/scu )
rand:
	( cd ../rand ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            rand.o PRECIS=$(PRECIS) PWD=$(PWD)/../rand )
copyright:
	( cd ../copyright ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            copyright.o PRECIS=$(PRECIS) PWD=$(PWD)/../copyright )
ma57:
	( cd ../external/ma57 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma57_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma57 )
ma61:
	( cd ../external/ma61 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ma61_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ma61 )
ad02:
	( cd ../external/ad02 ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            ad02_silent PRECIS=$(PRECIS) PWD=$(PWD)/../external/ad02 )
icfs:
	( cd ../icfs ; $(MAKE) -f $(GALAHAD)/makefiles/$(VERSION) \
            icfs_silent PRECIS=$(PRECIS) PWD=$(PWD)/../icfs )

#  constituent packages

bndsl.o: $(LG)(bndsl.o)

$(LG)(bndsl.o): ../lancelot/bndsl.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "bndsl"
	$(CP) ../lancelot/bndsl.F90 $(OBJ)/bndsl.F90
	cd $(OBJ); $(FORTRAN) -o bndsl.o $(FFLAGSS) bndsl.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o bndsl.o $(FFLAGSN) bndsl.F90 )
	cd $(OBJ); $(ARR) bndsl.o; $(RM) bndsl.F90 bndsl.o
	$(RMARFILE) precn.o
	$(RMARFILE) psls.o
	$(MVMODS)
	@printf '[ OK ]\n'

others.o: $(LG)(others.o)

$(LG)(others.o): ../lancelot/others.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "others"
	$(CP) ../lancelot/others.F90 $(OBJ)/others.F90
	cd $(OBJ); $(FORTRAN) -o others.o $(FFLAGSS) others.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o others.o $(FFLAGSN) others.F90 )
	cd $(OBJ); $(ARR) others.o; $(RM) others.F90 others.o
	$(RMARFILE) initw.o
	$(MVMODS)
	@printf '[ OK ]\n'

strutr.o: $(LG)(strutr.o)

$(LG)(strutr.o): ../lancelot/strutr.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "strutr"
	$(CP) ../lancelot/strutr.F90  $(OBJ)/strutr.F90
	cd $(OBJ); $(FORTRAN) -o strutr.o $(FFLAGSS) strutr.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o strutr.o $(FFLAGSN) strutr.F90 )
	cd $(OBJ); $(ARR) strutr.o; $(RM) strutr.F90 strutr.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

cauchy.o: $(LG)(cauchy.o)

$(LG)(cauchy.o): ../lancelot/cauchy.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "cauchy "
	$(CP) ../lancelot/cauchy.F90 $(OBJ)/cauchy.F90
	cd $(OBJ); $(FORTRAN) -o cauchy.o $(FFLAGSS) cauchy.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o cauchy.o $(FFLAGSN) cauchy.F90 )
	cd $(OBJ); $(ARR) cauchy.o; $(RM) cauchy.F90 cauchy.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

cg.o: $(LG)(cg.o)

$(LG)(cg.o): ../lancelot/cg.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "cg    "
	$(CP) ../lancelot/cg.F90 $(OBJ)/cg.F90
	cd $(OBJ); $(FORTRAN) -o cg.o $(FFLAGSS) cg.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o cg.o $(FFLAGSN) cg.F90 )
	cd $(OBJ); $(ARR) cg.o; $(RM) cg.F90 cg.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

hslint.o: $(LG)(hslint.o)

$(LG)(hslint.o): ../lancelot/hslint.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "hslint"
	$(CP) ../lancelot/hslint.F90 $(OBJ)/hslint.F90
	cd $(OBJ); $(FORTRAN) -o hslint.o $(FFLAGSS) hslint.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o hslint.o $(FFLAGSN) hslint.F90 )
	cd $(OBJ); $(ARR) hslint.o; $(RM) hslint.F90 hslint.o
	$(RMARFILE) mdchl.o
	$(MVMODS)
	@printf '[ OK ]\n'

asmbl.o: $(LG)(asmbl.o)

$(LG)(asmbl.o): ../lancelot/asmbl.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "asmbl "
	$(CP) ../lancelot/asmbl.F90 $(OBJ)/asmbl.F90
	cd $(OBJ); $(FORTRAN) -o asmbl.o $(FFLAGSS) asmbl.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o asmbl.o $(FFLAGSN) asmbl.F90 )
	cd $(OBJ); $(ARR) asmbl.o; $(RM) asmbl.F90 asmbl.o
	$(RMARFILE) precn.o
	$(RMARFILE) frntl.o
	$(MVMODS)
	@printf '[ OK ]\n'

drchg.o: $(LG)(drchg.o)

$(LG)(drchg.o): ../lancelot/drchg.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "drchg "
	$(CP) ../lancelot/drchg.F90 $(OBJ)/drchg.F90
	cd $(OBJ); $(FORTRAN) -o drchg.o $(FFLAGSS) drchg.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o drchg.o $(FFLAGSN) drchg.F90 )
	cd $(OBJ); $(ARR) drchg.o; $(RM) drchg.F90 drchg.o
	$(RMARFILE) uselancelot.o
	$(RMARFILE) uselancelot_steering.o
	$(MVMODS)
	@printf '[ OK ]\n'

drche.o: $(LG)(drche.o)

$(LG)(drche.o): ../lancelot/drche.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "drche "
	$(CP) ../lancelot/drche.F90 $(OBJ)/drche.F90
	cd $(OBJ); $(FORTRAN) -o drche.o $(FFLAGSS) drche.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o drche.o $(FFLAGSN) drche.F90 )
	cd $(OBJ); $(ARR) drche.o; $(RM) drche.F90 drche.o
	$(RMARFILE) uselancelot.o
	$(RMARFILE) uselancelot_steering.o
	$(MVMODS)
	@printf '[ OK ]\n'

hsprd.o: $(LG)(hsprd.o)

$(LG)(hsprd.o): ../lancelot/hsprd.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "hsprd "
	$(CP) ../lancelot/hsprd.F90 $(OBJ)/hsprd.F90
	cd $(OBJ); $(FORTRAN) -o hsprd.o $(FFLAGSS) hsprd.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o hsprd.o $(FFLAGSN) hsprd.F90 \ )
	cd $(OBJ); $(ARR) hsprd.o; $(RM) hsprd.F90 hsprd.o
	$(RMARFILE) lancelot.o
	@printf '[ OK ]\n'
	$(MVMODS)

initw.o: $(LG)(initw.o)

$(LG)(initw.o): ../lancelot/initw.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "initw "
	$(CP) ../lancelot/initw.F90 $(OBJ)/initw.F90
	cd $(OBJ); $(FORTRAN) -o initw.o $(FFLAGSS) initw.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o initw.o $(FFLAGSN) initw.F90 )
	cd $(OBJ); $(ARR) initw.o; $(RM) initw.F90 initw.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

scaln.o: $(LG)(scaln.o)

$(LG)(scaln.o): ../lancelot/scaln.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "scaln "
	$(CP) ../lancelot/scaln.F90 $(OBJ)/scaln.F90
	cd $(OBJ); $(FORTRAN) -o scaln.o $(FFLAGSS) scaln.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o scaln.o $(FFLAGSN) scaln.F90 )
	cd $(OBJ); $(ARR) scaln.o; $(RM) scaln.F90 scaln.o
	$(RMARFILE) uselancelot.o
	$(RMARFILE) uselancelot_steering.o
	$(MVMODS)
	@printf '[ OK ]\n'

mdchl.o: $(LG)(mdchl.o)

$(LG)(mdchl.o): ../lancelot/mdchl.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "mdchl "
	$(CP) ../lancelot/mdchl.F90 $(OBJ)/mdchl.F90
	cd $(OBJ); $(FORTRAN) -o mdchl.o $(FFLAGSS) mdchl.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o mdchl.o $(FFLAGSN) mdchl.F90 )
	cd $(OBJ); $(ARR) mdchl.o; $(RM) mdchl.F90 mdchl.o
	$(RMARFILE) precn.o
	$(RMARFILE) frntl.o
	$(RMARFILE) psls.o
	$(MVMODS)
	@printf '[ OK ]\n'

precn.o: $(LG)(precn.o)

$(LG)(precn.o): ../lancelot/precn.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "precn "
	$(CP) ../lancelot/precn.F90 $(OBJ)/precn.F90
	cd $(OBJ); $(FORTRAN) -o precn.o $(FFLAGSS) precn.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o precn.o $(FFLAGSN) precn.F90 )
	cd $(OBJ); $(ARR) precn.o; $(RM) precn.F90 precn.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

frntl.o: $(LG)(frntl.o)

$(LG)(frntl.o): ../lancelot/frntl.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "frntl "
	$(CP) ../lancelot/frntl.F90 $(OBJ)/frntl.F90
	cd $(OBJ); $(FORTRAN) -o frntl.o $(FFLAGSS) frntl.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o frntl.o $(FFLAGSN) frntl.F90 )
	cd $(OBJ); $(ARR) frntl.o; $(RM) frntl.F90 frntl.o
	$(RMARFILE) lancelot.o
	$(MVMODS)
	@printf '[ OK ]\n'

lancelot_types.o: $(LG)(lancelot_types.o)

$(LG)(lancelot_types.o): ../lancelot/lancelot_types.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_types"
	$(CP) ../lancelot/lancelot_types.F90 $(OBJ)/lancelot_types.F90
	cd $(OBJ); $(FORTRAN) -o lancelot_types.o $(FFLAGSS) \
                     lancelot_types.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lancelot_types.o $(FFLAGSN) \
                     lancelot_types.F90 )
	cd $(OBJ); $(ARR) lancelot_types.o; $(RM) lancelot_types.F90 \
                     lancelot_types.o
	$(RMARFILE) lancelot.o
	$(RMARFILE) lancelot_steering.o
	$(RMARFILE) drche.o
	$(RMARFILE) drchg.o
	$(RMARFILE) scaln.o
	$(MVMODS)
	@printf '[ OK ]\n'

lancelot.o: $(LG)(lancelot.o)

$(LG)(lancelot.o): ../lancelot/lancelot.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot"
	$(CP) ../lancelot/lancelot.F90 $(OBJ)/lancelot.F90
	cd $(OBJ); $(FORTRAN) -o lancelot.o $(FFLAGSS) lancelot.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lancelot.o $(FFLAGSN) lancelot.F90 )
	cd $(OBJ); $(ARR) lancelot.o; $(RM) lancelot.F90 lancelot.o
	$(RMARFILE) lancelot_simple.o
	$(RMARFILE) drche.o
	$(RMARFILE) drchg.o
	$(RMARFILE) scaln.o
	$(RMOBFILE) lancelots.o
	$(RMOBFILE) lancelott.o
	$(RMOBFILE) galahad_ampl.o
	$(MVMODS)
	@printf '[ OK ]\n'

lancelot_steering.o: $(LG)(lancelot_steering.o)

$(LG)(lancelot_steering.o): ../lancelot/lancelot_steering.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_steering"
	$(CP) ../lancelot/lancelot_steering.F90 \
          $(OBJ)/lancelot_steering.F90
	cd $(OBJ); $(FORTRAN) -o lancelot_steering.o $(FFLAGSS) \
          lancelot_steering.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lancelot_steering.o $(FFLAGSN) \
                     lancelot_steering.F90 )
	cd $(OBJ); $(ARR) lancelot_steering.o; $(RM) lancelot_steering.F90 \
                   lancelot_steering.o
	$(RMARFILE) drche.o
	$(RMARFILE) drchg.o
	$(RMARFILE) scaln.o
	$(RMOBFILE) lancelot_steerings.o
	$(RMOBFILE) lancelot_steeringt.o
	$(RMOBFILE) galahad_ampl.o
	$(MVMODS)
	@printf '[ OK ]\n'

lancelot_simple.o: $(LG)(lancelot_simple.o)

$(LG)(lancelot_simple.o): ../lancelot_simple/lancelot_simple.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_simple"
	$(CP) ../lancelot_simple/lancelot_simple.F90 \
           $(OBJ)/lancelot_simple.F90
	cd $(OBJ); $(FORTRAN) -o lancelot_simple.o $(FFLAGSS) \
                   lancelot_simple.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o lancelot_simple.o $(FFLAGSN) \
                   lancelot_simple.F90 )
	cd $(OBJ); $(ARR) lancelot_simple.o; \
             $(RM) lancelot_simple.F90 lancelot_simple.o
	$(RMOBFILE) lancelot_simples.o
	$(RMOBFILE) lancelot_simplet.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  SIF interfaces

uselancelot.o: $(LG)(uselancelot.o)

$(LG)(uselancelot.o): ../lancelot/uselancelot.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselancelot "
	$(CP) ../lancelot/uselancelot.F90 $(OBJ)/uselancelot.F90
	cd $(OBJ); $(FORTRAN) -o uselancelot.o $(FFLAGSS) uselancelot.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselancelot.o $(FFLAGSN) uselancelot.F90 )
	cd $(OBJ); $(ARR) uselancelot.o; \
          $(RM) uselancelot.F90 uselancelot.o
	$(RMOBFILE) runlancelot_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

uselancelot_steering.o: $(LG)(uselancelot_steering.o)

$(LG)(uselancelot_steering.o): ../lancelot/uselancelot_steering.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "uselancelot_steering "
	$(CP) ../lancelot/uselancelot_steering.F90 \
          $(OBJ)/uselancelot_steering.F90
	cd $(OBJ); $(FORTRAN) -o uselancelot_steering.o $(FFLAGSS) \
          uselancelot_steering.F90 \
                || ( printf ' %-26s' "=> Disabling optimization " ; \
                   $(FORTRAN) -o uselancelot_steering.o $(FFLAGSN) \
                     uselancelot_steering.F90 )
	cd $(OBJ); $(ARR) uselancelot_steering.o; \
          $(RM) uselancelot_steering.F90 uselancelot_steering.o
	$(RMOBFILE) runlancelot_steering_sif.o
	$(MVMODS)
	@printf '[ OK ]\n'

#  main program

runlancelot_sif.o: $(OBJ)/runlancelot_sif.o

$(OBJ)/runlancelot_sif.o: ../lancelot/runlancelot_sif.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlancelot_sif"
	$(CP) ../lancelot/runlancelot_sif.F90 \
          $(OBJ)/runlancelot_sif.F90
	cd $(OBJ); $(FORTRAN) -o runlancelot_sif.o $(FFLAGSS) \
           runlancelot_sif.F90
	$(RM) $(OBJ)/runlancelot_sif.F90
	@printf '[ OK ]\n'

runlancelot_steering_sif.o: $(OBJ)/runlancelot_steering_sif.o

$(OBJ)/runlancelot_steering_sif.o: ../lancelot/runlancelot_steering_sif.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "runlancelot_steering_sif"
	$(CP) ../lancelot/runlancelot_steering_sif.F90 \
          $(OBJ)/runlancelot_steering_sif.F90
	cd $(OBJ); $(FORTRAN) -o runlancelot_steering_sif.o $(FFLAGSS) \
          runlancelot_steering_sif.F90
	$(RM) $(OBJ)/runlancelot_steering_sif.F90
	@printf '[ OK ]\n'

#  main program for spec example

lancelots.o: $(OBJ)/lancelots.o

$(OBJ)/lancelots.o: ../lancelot/lancelots.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelots"
	$(CP) ../lancelot/lancelots.f90 $(OBJ)/lancelots.f90
	cd $(OBJ); $(FORTRAN) -o lancelots.o $(FFLAGSS) lancelots.f90
	$(RM) $(OBJ)/lancelots.f90
	@printf '[ OK ]\n'

lancelot_steerings.o: $(OBJ)/lancelot_steerings.o

$(OBJ)/lancelot_steerings.o: ../lancelot/lancelot_steerings.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_steerings"
	$(CP) ../lancelot/lancelot_steerings.f90 \
          $(OBJ)/lancelot_steerings.f90
	cd $(OBJ); $(FORTRAN) -o lancelot_steerings.o $(FFLAGSS) \
           lancelot_steerings.f90
	$(RM) $(OBJ)/lancelot_steerings.f90
	@printf '[ OK ]\n'

lancelot_simples.o: $(OBJ)/lancelot_simples.o

$(OBJ)/lancelot_simples.o: ../lancelot_simple/lancelot_simples.f90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_simples"
	$(CP) ../lancelot_simple/lancelot_simples.f90 \
          $(OBJ)/lancelot_simples.f90
	cd $(OBJ); $(FORTRAN) -o lancelot_simples.o $(FFLAGSS) \
           lancelot_simples.f90
	$(RM) $(OBJ)/lancelot_simples.f90
	@printf '[ OK ]\n'

#  main program for exhaustive test deck

lancelott.o: $(OBJ)/lancelott.o

$(OBJ)/lancelott.o: ../lancelot/lancelott.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelott"
	$(CP) lancelott.F90 $(OBJ)/lancelott.F90
	cd $(OBJ); $(FORTRAN) -o lancelott.o $(FFLAGSS) lancelott.F90
	$(RM) $(OBJ)/lancelott.F90
	@printf '[ OK ]\n'

lancelot_steeringt.o: $(OBJ)/lancelot_steeringt.o

$(OBJ)/lancelot_steeringt.o: ../lancelot/lancelot_steeringt.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_steeringt"
	$(CP) lancelot_steeringt.F90 $(OBJ)/lancelot_steeringt.F90
	cd $(OBJ); $(FORTRAN) -o lancelot_steeringt.o $(FFLAGSS) \
              lancelot_steeringt.F90
	$(RM) $(OBJ)/lancelot_steeringt.F90
	@printf '[ OK ]\n'

lancelot_simplet.o: $(OBJ)/lancelot_simplet.o

$(OBJ)/lancelot_simplet.o: ../lancelot_simple/lancelot_simplet.F90
	@printf ' %-9s %-15s\t\t' "Compiling" "lancelot_simplet"
	$(CP) ../lancelot_simple/lancelot_simplet.F90 \
          $(OBJ)/lancelot_simplet.F90
	cd $(OBJ); $(FORTRAN) -o lancelot_simplet.o $(FFLAGSS) \
           lancelot_simplet.F90
	$(RM) $(OBJ)/lancelot_simplet.F90
	@printf '[ OK ]\n'

#  book keeping

clean:
	@printf ' %-9s\t\t' "Cleaning"
	$(RM) $(LGS) $(LGD) $(OBJS)/runlancelot_sif.o $(OBJD)/runlancelot_sif.o
	@printf '[ OK ]\n'

cleanall:
	@printf ' %-14s\t\t' "Removing all $(PRECIS) precision object and module files"
	$(RM) -r $(OBJ)/* $(MOD)/*
	@printf '[ OK ]\n'
