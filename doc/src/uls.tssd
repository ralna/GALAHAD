*NAM ULS
*NUM 1.1.0
*COMMENT !
*XN "solution of linear equations~sparse"
*XN "sparse problems~linear equations"
*XN "solution of linear equations~symmetric"
*XN "matrices~symmetric"
*XN "matrices~sparse"
*XN "sparse problems~matrices"
*XN "Gaussian elimination"

*SUM
*N To *BH solve a sparse unsymmetric system of linear equations.*EH Given
a sparse matrix {<A>_=_"{"a SUB ij "}" SUB {m by n} } and a
vector <b>, this
subroutine solves the system {<Ax>_=_<b>} or the system {<A> SUP T <x>_=_<b>}.
The matrix <A> can be rectangular. There is an option for iterative
refinement and return of error estimates.
*N This Fortran 95 code offers additional features to the Fortran 77 code
`MA33>. The storage required for the factorization is chosen
automatically and, if there is insufficient space for the factorization,
more space is allocated and the factorization is repeated.  The Fortran 95
version also returns the number of entries in the factors and has facilites
for identifying the rows and columns that are treated specially
when the matrix is singular or rectangular.

*ATT
*TYP Real (single, double).
*REM `GALAHAD"_"ULS is a Fortran 95 encapsulation of the HSL Fortran 77 package
`MA33> that offers some additional facilities. The user interface is designed to
be equivalent to a subset of that from the more recent HSL package
`HSL"_"MA48>, so that the relevant subprograms from the two packages may be
used interchangably.
*CAL `GALAHAD"_"SMT>, `MA33>.
*LAN Fortran 95.
*DAT March 2006.
*ORI Interface by N. I. M. Gould, Rutherford Appleton Laboratory, documentation follows that of I.S. Duff and J.K. Reid, ibid.
*CON *ALL

*USE

*H 2.1 Calling sequences

*N Access to the package requires a `USE statement
*PV Single precision version
*f "      USE GALAHAD_ULS_SINGLE"

*PV Double precision version
*f "      USE GALAHAD_ULS_DOUBLE"

*P In `"GALAHAD_ULS_SINGLE">, all reals are default reals. In
`"GALAHAD_ULS_DOUBLE">, all reals are double precision reals. In both
modules, all integers are default integers.

*N There are four principal subroutines for user calls:

*IN

*O The subroutine `ULS"_"INITIALIZE must be called to initialize the
structure for the factors. It may also be called to set default values
for the components of the control structure. If non-default values are
wanted for any of the control components, the corresponding components
should be altered after the call to `ULS"_"INITIALIZE>.

*O `ULS"_"ANALYSE accepts the pattern of <A> and chooses pivots
 for Gaussian elimination using a selection criterion to preserve
 sparsity.  It will optionally find an ordering to block triangular form and
 exploit that structure. An option exists to restrict pivoting to the diagonal,
 which might reduce fill-in and operations if the matrix has a symmetric
 structure. It is possible to
 perform an analysis without generating the factors, in which case data on
 the costs of a subsequent factorization are returned to the user.
 It is also possible to request that a set of columns are pivoted on last
 in which case a subsequent factorization can avoid factorization operations
 on the earlier columns.

*O `ULS"_"SOLVE uses the factors generated by `ULS"_"ANALYSE to
  solve a system of equations {<Ax>_=_<b>}
  or {<A> SUP T <x>_=_<b>}.

*O `ULS"_"FINALIZE reallocates the arrays held inside the
  structure for the factors to have size zero. It should be called
  when all the systems involving its matrix have been solved unless
  the structure is about to be used for the factors of another matrix.

 *OUT

*N There is an auxiliary subroutine for user calls after a
successful factorization:

*IN
*O `ULS"_SPECIAL_ROWS_AND_COLS" identifies the rows and columns that
        are treated specially when the matrix is singular or rectangular.
        It is for use following a call of `ULS"_"ANALYSE>.
*OUT

*H 2.2 The derived data types

*N For each problem, the user must employ derived types defined by the
module to declare structures for holding the matrix, holding its
factors, controlling the factorization, and providing information.


*H 2.2.1 Derived data type for the matrix

*N The derived type  `SMT"_"TYPE is used to hold the matrix.
The following components are employed

*A M is an `INTEGER scalar which holds the number of rows {m} of
   the matrix <A>.
 <Restriction:> `M {GE} `1>.

*A N is an `INTEGER scalar which holds the number of columns {n}
   of the matrix <A>.
 <Restriction:> `N {GE} `1>.

*A NE is an `INTEGER scalar which holds the
 number of matrix entries.  <Restriction:> `NE {GE} `0>.

*A VAL is a `REAL  pointer array of length at least `NE>,
 the leading part of which holds the values of the entries.
 Duplicate entries are summed.

*A ROW is an `INTEGER  pointer array of length at least `NE>,
 the leading part of which holds the row indices of the entries.

*A COL is an `INTEGER  pointer array of length at least `NE>,
 the leading part of which holds the column indices of the entries.

*OUT *N The other components of the type are not used.

*H 2.2.2 Derived data type for control of the subroutines

*N The module contains a derived type called `ULS"_"CONTROL with the
following components

*A LP is an `INTEGER scalar used by the subroutines as the output
 unit for error messages.  If it is negative, these
 messages will be suppressed.  The default value is `6>.

*A WP is an `INTEGER scalar used by the subroutines as the output
 unit for warning messages.  If it is negative, these messages
 will be suppressed.  The default value is `6>.

*A MP is an `INTEGER scalar used by the subroutines as the output
 unit for diagnostic printing.  If it is negative, these messages
 will be suppressed.  The default value is `6>.

*A LDIAG is an `INTEGER scalar used by the subroutines to control
 diagnostic printing.  If `LDIAG is less than `1>, no messages will
 be output. If the value is `1>, only error messages will
 be printed.  If the value is `2>, then error and warning messages will
 be printed. If the value is `3>, scalar data and a few
 entries of array data on entry and exit from each subroutine will be
 printed.  If the value is greater than `3>, all data will be printed on
 entry and exit.  This output comes from the Fortran 77 `ULS routines
 called by `GALAHAD"_"ULS>. The default value is `2>.

*A LA is an `INTEGER scalar used by `ULS"_"ANALYSE>. `LA is set to
`FILL"_"IN"*"`NE by `ULS"_"ANALYSE>. The default for
`FILL"_"IN is `3> but, if the user knows that
there may be significant fill-in during factorization, it may be efficient
to increase this value.

*A MAXLA is an `INTEGER scalar used by `ULS"_"ANALYSE>. An error
return occurs if the real array that holds data for the factors is too
small and reallocating it to have size changed by the factor `MULTIPLIER
would make its size greater than `MAXLA>. The default value is
`HUGE(0)>.

*A MULTIPLIER is a `REAL scalar used by `ULS"_"ANALYSE when a
real or integer array that holds data for the factors is too small. The
array is reallocated with its size changed by the factor `MULTIPLIER>.
The default value is `2>.`0>.

*A REDUCE is a `REAL scalar that reduces the size of previously allocated
internal workspace arrays if they are larger than currently required
by a factor of `REDUCE or more. The default value is `2>.`0>.

*A SWITCH is an `REAL scalar used by `ULS"_"ANALYSE to
control
the switch from sparse to full matrix processing when factorizing
the diagonal blocks.  The switch is made when the ratio of
number of entries in the reduced matrix to the number that it would
have as a full matrix is greater than `SWITCH>.
A value greater than `1>.`0> is treated as `1>.`0>.
The default value is `0>.`5>.

*A U is a `REAL scalar that is used by  `ULS"_"ANALYSE>.
It holds the threshold parameter for the pivot control.
The default value is `0>.`01>.  For problems requiring greater
than average numerical care a higher value than the default would be
advisable. Values greater than `1>.`0> are treated as `1>.`0> and
less than `0>.`0 as `0>.`0>.

*A DROP is a `REAL scalar that is used by `ULS"_"ANALYSE>.
Any entry whose modulus is less than
`DROP will be dropped from the factorization.
The factorization will then
require less storage but will be inaccurate.
The default value is `0>.`0>.

*A TOLERANCE is a `REAL scalar that is used by `ULS"_"ANALYSE>.
If it is set to a positive value,
any pivot whose modulus is less than
`TOLERANCE will be treated as zero.
! If the matrix is rectangular or rank deficient,
! it is possible that
! entries with modulus less than `TOLERANCE are dropped from the factorization.
The default value is `0>.`0>.

*A CGCE is a `REAL scalar that is used by `ULS"_"SOLVE>.
It is used to
monitor the convergence of the iterative refinement.  If successive
corrections do not decrease by a factor of at least `CGCE>,
convergence is deemed to be too slow and `ULS"_"SOLVE
terminates with `SINFO%FLAG set to -`8>.
The default value is `0>.`5>.

*A PIVOTING is a `INTEGER scalar that is used to control numerical
pivoting by `ULS"_"ANALYSE>. If `PIVOTING has a positive value,
each pivot search is limited to a maximum of `PIVOTING
columns.  If `PIVOTING is set to the value `0>, a full Markowitz search
technique is used to find the best pivot.  This is usually only a
little slower, but can occasionally be very slow.  It may result in
reduced fill-in. The default value is `3>.

*A DIAGONAL@TWPIVOTING is an `LOGICAL scalar used by `ULS"_"ANALYSE to
limit pivoting to the diagonal.  It will do so if `DIAGONAL"_"PIVOTING is set
to `.TRUE.>.  Its default value is `.FALSE.>.

!*A LIMIT"_"COMPRESS is an `INTEGER scalar used by `ULS"_"ANALYSE to limit the
!number of compresses.  If this number is exceeded, `ULS"_"ANALYSE will
!refactorize the matrix with an increased allocation of storage.

*A FILL@TWIN is an `INTEGER scalar used by `ULS"_"ANALYSE to determine the
initial storage allocation for the matrix factors.  It will be set to
`FILL"_"IN times the value of `MATRIX%NE>.  The default value is `3>.

*A BTF is an `INTEGER scalar used by `ULS"_"ANALYSE to define
the minimum size of a block of the block triangular form
other than the final block.  If block triangularization is not wanted,
`BTF should be set to a value greater than or equal to
`N.  A non-positive value is regarded as the value `1>.  For further
discussion of this variable, see Section 2.6.
The default value is `1>.

*A STRUCT is an `LOGICAL scalar used by `ULS"_"ANALYSE>. If `STRUCT is
set to `.TRUE.>, the subroutine will exit immediately structural
singularity is detected.  The default value is `.FALSE.>.

*A FACTOR@TWBLOCKING is an `INTEGER scalar used by
`ULS"_"ANALYSE to determine
the block size used for the Level `3 `BLAS> within the full
factorization.  If it is set to `1>, Level 1 BLAS is used, if to `2>,
Level 2 BLAS is used.  The default value is `32>.

*A SOLVE@TWBLAS is an `INTEGER scalar used by `ULS"_"SOLVE to determine
whether Level `2 `BLAS> is used (`SOLVE@TWBLAS {GT} `1>) or not
(`SOLVE@TWBLAS {LE} `1>).  The default value is `2>.

*A MAXIT is an `INTEGER scalar used by `ULS"_"SOLVE to limit
the number of refinement iterations.  If `MAXIT is set to zero then
`ULS"_"SOLVE will not perform any error analysis or iterative refinement.
The default value is `10>.

*H 2.2.3 Derived data types for information from `ULS"_"ANALYSE

*N The module contains a derived type called `ULS"_"AINFO with the
following components

*A FLAG is an `INTEGER scalar. The value
 zero indicates that the subroutine has performed
 successfully.  For nonzero values, see Section 2.4.1.

*A MORE is an `INTEGER scalar that provides further information in the
case of an error, see Section 2.4.1.

*A OOR is an `INTEGER scalar which is set to the number of
entries with one or both indices out of range.

*A DUP is an `INTEGER scalar which is set to the number of
duplicate entries.

*A DROP is an `INTEGER scalar which is set to the number of
entries dropped from the data structure.

*A STAT is an `INTEGER scalar. In the case of the failure of an
allocate or deallocate statement, it is set to the `STAT value.

*A OPS is a `REAL  scalar which is set to the number of
 floating-point operations required by the factorization.

*A RANK is an `INTEGER scalar that gives an estimate of the rank of the
matrix.

*A STRUC@TWRANK is an `INTEGER scalar that, if `BTF is less than or equal to
`N>, holds the
structural rank of the matrix. If `BTF_{GT}_`N>, `STRUC"_"RANK is set to
min(`M>, `N>).

*A LEN@TWANALYSE is an `INTEGER scalar that gives the number
 of `REAL  and `INTEGER words required for the analysis.

*A LEN@TWFACTORIZE is an `INTEGER scalar that gives the number
 of `REAL  and `INTEGER words required for successful
 subsequent factorization assuming the same pivot sequence and set of
 dropped entries can be used.

*A NCMPA is an `INTEGER scalar that holds the number of compresses
 of the internal data structure performed by `ULS"_"ANALYSE.
 If `NCMPA is fairly large (say greater than 10), performance may be
 very poor.

*A LBLOCK is an `INTEGER scalar that holds the order of the largest
non-triangular block on the diagonal of the block triangular form.
If the matrix is rectangular, `LBLOCK will hold the number of rows.

*A SBLOCK is an `INTEGER scalar that holds the sum of the orders of all the
non-triangular blocks on the diagonal of the block triangular form.
If the matrix is rectangular, `SBLOCK will hold the number of columns.

*A TBLOCK is an `INTEGER scalar that holds the total number of entries in all
the non-triangular blocks on the diagonal of the block triangular form.

*N The module also contains a derived type called `ULS"_"FINFO with the
following components

*A FLAG is an `INTEGER scalar. The value
 zero indicates that the subroutine has performed
 successfully.  For nonzero values, see Section 2.4.2.

*A MORE is an `INTEGER scalar that provides further information in the
case of an error, see Section 2.4.2.

*A STAT is an `INTEGER scalar. In the case of the failure of an
allocate or deallocate statement, it is set to the `STAT value.

*A OPS is a `REAL  scalar which is set to the number of
 floating-point operations required by the factorization.

*A DROP is an `INTEGER scalar which is set to the number of
entries dropped from the data structure.

*A LEN@TWFACTORIZE is an `INTEGER scalar that gives the number
 of `REAL  and `INTEGER words required for successful
 subsequent factorization assuming the same pivot sequence and set of
 dropped entries can be used.

*A SIZE@TWFACTOR is an `INTEGER scalar that gives the number of
 entries in the matrix factors.

*A RANK is an `INTEGER scalar that gives an estimate of the rank of the
matrix.

*H 2.2.5 Derived data type for information from `ULS"_"SOLVE

*N The module contains a derived type called `ULS"_"SINFO with the
following components

*A FLAG is an `INTEGER scalar. The value
 zero indicates that the subroutine has performed
 successfully.  For nonzero values, see Section 2.4.3.

*A MORE is an `INTEGER scalar that provides further information in the
case of an error, see Section 2.4.3.

*A STAT is an `INTEGER scalar. In the case of the failure of an
allocate or deallocate statement, it is set to the `STAT value.

*H 2.2.6 Derived data type for the factors of a matrix

*N The module contains a derived type called `ULS"_"FACTORS with
private components.

*H 2.3 Argument lists

*N We use square brackets `[] to indicate optional arguments.

*H 2.3.1 The initialization subroutine

*N The initialization subroutine must be called for each structure used
to hold the factors. It may also be called for a structure used to
control the subroutines. Each argument is optional. A call with no
arguments has no effect.


*F "      CALL ULS_INITIALIZE([FACTORS][,CONTROL])"

*A FACTORS is optional, scalar, of intent(out) and of type
`ULS"_"FACTORS>. On exit, its pointer array components will be null.
Without such initialization, these components
are undefined and other calls are likely to fail.

*A CONTROL is optional, scalar, of intent(out) and of type
`ULS"_"CONTROL>. On exit, its components will have been
given the default values specified in Section 2.2.2.


*H 2.3.2 To analyse the sparsity pattern

*F "      CALL ULS_ANALYSE(MATRIX,FACTORS,CONTROL,AINFO,FINFO)"

*A MATRIX is scalar, of intent(in) and of type
`SMT"_"TYPE.  The user must set the components `M>, `N>, `NE>, `ROW>,
`COL>, and `VAL>, and they are not altered by the subroutine.
 <Restrictions:> {`MATRIX%M_GE_`1}, {`MATRIX%N_GE_`1}, and {`MATRIX%NE_GE_`0}.

*A FACTORS is scalar, of intent(inout) and of type
`ULS"_"FACTORS>. It must have been initialized by a call to
`ULS"_"INITIALIZE> or have been used for a previous calculation.
In the latter case, the previous data will be lost but the pointer
arrays will not be reallocated unless they are found to be too small.

*A CONTROL is scalar, of intent(in) and of type
`ULS"_"CONTROL>. Its components control the action, as explained in
Section 2.2.2.

*A AINFO is scalar, of intent(out) and of type `ULS"_"AINFO>. Its
components provide information about the execution, as explained in
Section 2.2.3.

*A FINFO is scalar, optional, of intent(out) and of type `ULS"_"FINFO>.
If present, the call to `ULS"_"ANALYSE will
compute and store the
factorization of the matrix.  Its
components provide information about the execution of the
factorization, as explained in
Section 2.2.4.

*H 2.3.4 To solve a set of equations

*F "      CALL ULS_SOLVE(MATRIX,FACTORS,RHS,X,CONTROL,SINFO
[,TRANS])"

*A MATRIX is scalar, of intent(in) and of type `SMT"_"TYPE.  It
must be unaltered since the call to `ULS"_"ANALYSE> and is
not altered by the subroutine.

*A FACTORS is scalar, of intent(in) and of type `ULS"_"FACTORS>. It
must be unaltered since the call to `ULS"_"ANALYSE> and is
not altered by the subroutine.

*A RHS is an array of shape ({n}) of intent(in), and of type `REAL>.
It must be set by the user to the vector <b>.

*A X is an array of shape ({n}) of
intent(out), and of type `REAL>.
On return it holds
the solution <x>.

*A CONTROL is scalar, of intent(in) and of type `ULS"_"CONTROL>. Its
components control the action, as explained in Section 2.2.2.

*A SINFO is scalar, of intent(out), and of type `ULS"_"SINFO>.  Its
components provide information about the execution, as explained in
Section 2.2.5.

*A TRANS is scalar, optional, of intent(in), and of type `INTEGER>. If present
{<A> SUP T <x> = <b>} is solved, otherwise the solution
is obtained for {<A> <x> = <b>}.


*H 2.3.5 The finalization subroutine

*F "      CALL ULS_FINALIZE(FACTORS,CONTROL,INFO)"

*A FACTORS is scalar, of intent(inout) and of type
`ULS"_"FACTORS>. On exit, its pointer array components will have
been deallocated.  Without such finalization, the storage occupied is
unavailable for other purposes. In particular, this is very wasteful
if the structure goes out of scope on return from a procedure.

*A CONTROL is scalar, of intent(in) and of type `ULS"_"CONTROL>. Its
components control the action, as explained in Section 2.2.2.

*A INFO is scalar, of intent(out), and of type `INTEGER>.  On return,
the value `0 indicates success. Any other value is the `STAT value of
an `ALLOCATE or `DEALLOCATE statement that has failed.


*H "2.3.7 To identify the rows and columns that are treated specially
         following a successful factorization"

*F "      CALL ULS_SPECIAL_ROWS_AND_COLS(FACTORS,RANK,ROWS,COLS,INFO)"

*A FACTORS is scalar, of intent(in) and of type `ULS"_"FACTORS>. It
must be unaltered since the call to `ULS"_"ANALYSE>> and is
not altered by the subroutine.

*A RANK is an `INTEGER variable that need not be set by the user. On
return, it holds the calculated rank of the matrix (it is the rank of the
matrix actually factorized).

*A ROWS is an `INTEGER array of length `M that need not be set by the
user. On return, it holds a permutation. The indices of the rows that
are taken into account when solving {BOLD Ax_=_BOLD b} are `ROWS({i}),
{i_LE_`RANK}.

*A COLS is an `INTEGER array of length `N that need not be set by the
user. On return, it holds a permutation. The indices of the columns that
are taken into account when solving {BOLD Ax_=_BOLD b} are `COLS({j}),
{j_LE_`RANK}.

*A INFO is an `INTEGER variable that need not be set by the user. On
return, its value is 0 if the call was successful, -1 if the allocation
of a temporary array failed, or -2 if the subsequent deallocation
failed.

*H 2.4  Error diagnostics

*H 2.4.1 When performing the analysis.

*P A successful return from the analysis phase within `ULS"_"ANALYSE
  is indicated by `AINFO%FLAG  having the value zero.  A negative value is
 associated with an error message which will  be output on unit
 `CONTROL%LP>. Possible negative values are:

*IN
*QR  `-1  Value of `MATRIX%M out of range.  `MATRIX%M {LT} `1>.
`AINFO%MORE is set to value of `MATRIX%M>.

*QR  `-2  Value of `MATRIX%N out of range.  `MATRIX%N {LT} `1>.
`AINFO%MORE is set to value of `MATRIX%N>.

*QR  `-3  Value of `MATRIX%NE out of range.  `MATRIX%NE {LT} `0>.
`AINFO%MORE is set to value of `MATRIX%NE>.

*QR  `-4  Failure of an allocate or deallocate statement. `AINFO%STAT
 is set to the `STAT value.

*QR  `-5  On a call with `STRUCT having the value `.TRUE.>,
       the matrix is structurally rank deficient.
       The structural rank is given by `STRUC"_"RANK>.

*OUT

*P A positive flag value is associated with a warning message
 which will  be output on unit `AINFO%WP>. Possible positive values are:

*IN

*QR `+1 Index (in `MATRIX%ROW or `MATRIX%COL) out of range. Action taken by
 subroutine is to ignore any such entries and continue. `AINFO%OOR
 is set to the number of such entries. Details of the first ten are optionally
 printed on unit `CONTROL%MP>.

*QR `+2 Duplicate indices.
       Action taken by subroutine is to
       sum corresponding reals.
       `AINFO%DUP is set to the number of
       duplicate entries.
       Details of the first ten are optionally printed on unit
       `CONTROL%MP>.

*QR `+3 Combination of a `+1 and a +`2 warning.

*QR `+4 The matrix is rank deficient with estimated rank `AINFO%RANK>.

*QR `+5 Combination of a `+1 and a +`4 warning.

*QR `+6 Combination of a `+2 and a +`4 warning.

*QR `+7 Combination of a `+1>, a +`2>, and a `+4 warning.

*QR `+8 Not possible to choose all pivots from diagonal (call with
 `CONTROL%DIAGONAL@TWPIVOTING equal to `.TRUE.>).

*QR `+9 to `+15  Combination of warnings that sum to this total.

*QR `+16 More space required than initial allocation.  Size of `LA used
 is given in `AINFO%MORE>.

*QR `+17 to `+31 Combination of warnings that sum to this total.

 *OUT


*H 2.4.2 When factorizing the matrix

*P A successful return from the factorization phase within `ULS"_"ANALYSE
 is indicated by `FINFO%FLAG having the value zero.  A negative value is
 associated with an error message which will  be output on unit
 `CONTROL%LP>. In this case, no solution will have been
 calculated.  Possible negative values are:


*IN
*QR  `-1  Value of `MATRIX%M differs from the `ULS"_"ANALYSE value.
`FINFO%MORE holds value of `MATRIX%M>.

*QR  `-2  Value of `MATRIX%N differs from the `ULS"_"ANALYSE value.
`FINFO%MORE holds value of `MATRIX%N>.

*QR  `-3  Value of `MATRIX%NE out of range.  `MATRIX%NE {LT} `0>.
`FINFO%MORE holds value of `MATRIX%NE>.

*QR  `-4  Failure of an allocate or deallocate statement. `FINFO%STAT
 is set to the `STAT value.

*QR  `-7 The real array that holds data for the factors
  needs to be bigger than `CONTROL%MAXLA>.

*QR  `-10 `ULS"_"FACTORIZE has been called without a prior call to
 `ULS"_"ANALYSE>.

*OUT

*P A positive flag value is associated with a warning message
 which will  be output on unit `CONTROL%MP>. In this case, a
 factorization will have been calculated.

*IN
*QR  `+4  Matrix is rank deficient.  In this case, `FINFO%RANK will be
set to the rank of the factorization.  In the subsequent solution,
all columns in the singular block will have the corresponding component in
the solution vector set to zero.

*QR `+16 More space required than initial allocation.  Size of `LA used
 is given in `FINFO%MORE>.

*QR `+20 Combination of a `+4 and a `+16 warning.

*OUT

*H 2.4.3 When using factors to solve equations

*P A successful return from `ULS"_"SOLVE is indicated by
 `SINFO%FLAG having the value zero.  A negative value is
 associated with an error message which will  be output on unit
 `CONTROL%LP>. In this case, the solution will not have been completed.
 Possible negative values are:

*IN
*QR  `-1  Value of `MATRIX%M differs from the `ULS"_"ANALYSE value.
`SINFO%MORE holds value of `MATRIX%M>.

*QR  `-2  Value of `MATRIX%N differs from the `ULS"_"ANALYSE value.
`SINFO%MORE holds value of `MATRIX%N>.

*QR  `-3  Value of `MATRIX%NE out of range.  `MATRIX%NE {LT} `0>.
`SINFO%MORE holds value of `MATRIX%NE>.

*QR `-8  Iterative refinement has not
converged.  This is an indication that the system is very
ill-conditioned. The solution may not be accurate although estimates of
the error can still be obtained by `ULS"_"SOLVE>.

*Q `-9  A problem has occurred in the calculation of matrix norms using
`MC71A/AD>.  See the documentation for this routine.  *OUT

*QR  `-10 `ULS"_"SOLVE has been called without a prior call to
 `ULS"_"ANALYSE>.

*H 2.5 Rectangular and rank deficient matrices
*P Rectangular matrices are handled by the code although no attempt is made
at prior block triangularization.  Rank deficient matrices are also factorized
and a warning flag is set (`AINFO%FLAG or `FINFO%FLAG set to `+4>).
If `CONTROL%STRUCT is set to `.TRUE>,
then an error return occurs (`AINFO%FLAG = `-5>) if block
triangularization is attempted and the matrix is structurally singular.

*P  The package identifies a square
submatrix of {BOLD A} that it considers to be nonsingular. When
solving {BOLD Ax_=_BOLD b}, equations outside this submatrix are
ignored and solution components that correspond to columns outside the
submatrix are set to zero. `ULS"_SPECIAL_ROWS_AMD_COLS" identifies the
rows and columns of this submatrix from stored integer data.

*P It should be emphasized that the primary purpose of the
package is to solve square nonsingular sets of equations. The
rank is determined from the number of pivots that are not small or zero.
There are more reliable (but much more expensive) ways of determining
numerical rank.

*H 2.6 Block upper triangular form

*MLEADING 40v
*P Many large unsymmetric matrices can be permuted to the form

*D {SET ~ @ns <PAQ>~=~ LEFT ( MATRIX{
COL{<A> SUB 11 ABOVE  ~~~ ABOVE  ~~~ ABOVE  ~~~ ABOVE  ~~~ ABOVE ~~~}
COL{<A> SUB 12 ABOVE <A> SUB 22 ABOVE  ~~~ ABOVE  ~~~ ABOVE  ~~~ ABOVE ~~~}
COL{~. ABOVE ~. ABOVE <A> SUB 33 ABOVE  ~~~ ABOVE  ~~~ ABOVE ~~~}
COL{~. ABOVE ~. ABOVE ~. ABOVE  ~. ABOVE  ~~~ ABOVE ~~~}
COL{~. ABOVE ~. ABOVE ~. ABOVE ~. ABOVE  ~. ABOVE ~~~}
COL{~. ABOVE ~. ABOVE ~. ABOVE ~. ABOVE ~. ABOVE <A> SUB ll}
} RIGHT )}

*N whereupon the system

*D {<Ax>_=_<b>}_____ (or {<A> trans <x>_=_<b>)}

*N can be solved by block back-substitution
giving a saving in storage and execution time if the matrices {<A> SUB
ii} are much smaller than {<A>}.

*N Since it is not very efficient to process a small block (for example
a {1 by 1} block), any block of size less than `CONTROL%BTF other than the
final block is merged with its successor.

*H 2.7 Badly-scaled systems
*P If the user's input matrix has entries differing widely in
magnitude, then an inaccurate solution may be obtained. In such cases,
the user is advised to first use `MC29A/AD to obtain scaling factors
for the matrix and then explicitly scale it prior to calling
this package.


*GENERAL
*COM  None
*WORK Provided automatically by the module.
*OTHER  `MA33A/AD>, `MA33C/CD>.
*OTHERMODS `GALAHAD"_"SMT"_"single/double>.
*I/O Error, warning and diagnostic messages only.  Error
 messages on unit `CONTROL%LP and warning and diagnostic messages on unit
 `CONTROL%WP and  `CONTROL%MP>, respectively.  These have default value `6>,
and printing of these messages
is suppressed if the relevant unit number is set negative.  These messages
are also suppressed if `ULS"_"CONTROL%LDIAG is less than `1>.

*REST
*N  `MATRIX%M {GE} `1>,
*n  `MATRIX%N {GE} `1>,
*n  `MATRIX%NE {GE} `0>.


*METHOD

*P A version of sparse Gaussian elimination is used.

*P The `ULS"_"ANALYSE entry first calls `MA33A/AD that
uses a sparse variant of Gaussian elimination to compute
a pivot ordering for the decomposition of {<A>} into its {<LU>}
factors. It uses pivoting to preserve sparsity in
the factors and requires
each pivot {a SUB pj } to
satisfy the stability test
 *N  *W {|a SUB pj | _GE_ u _max FROM i _ | a SUB ij |} *W
*N within the reduced matrix, where {u} is the threshold held in
`CONTROL%U>, with default value `0>.`01>.  It then computes
the numerical factors.


*P The `ULS"_"SOLVE entry uses the factors from `ULS"_"ANALYSE to solve
 systems of equations by calling `MA33C/CD.

*P A discussion of the design of the `ULS routines called by this package
is given by Duff and Reid, *I ACM Trans MAth Software {<5>}, *M 1979, pp 18-35.

*EXAMPLE

*P In the example code shown below, we decompose a matrix and use
information from this decomposition to solve a square set of linear equations.

*COMMENT ""
*N *N
*B Program *M
*SETASIS
! Simple example of use of GALAHAD_ULS
PROGRAM MAIN
   USE GALAHAD_ULS_DOUBLE
   IMPLICIT NONE
   TYPE(SMT_TYPE) MATRIX
   TYPE(ULS_CONTROL) CONTROL
   TYPE(ULS_AINFO) AINFO
   TYPE(ULS_FINFO) FINFO
   TYPE(ULS_SINFO) SINFO
   TYPE(ULS_FACTORS) FACTORS

   DOUBLE PRECISION, ALLOCATABLE :: B(:),X(:)
   DOUBLE PRECISION RES(2),ERR
   INTEGER I,INFO,FAST,M,N,NE

! Read matrix order and number of entries

      READ (5,*) M,N,NE
      MATRIX%M = M
      MATRIX%N = N
      MATRIX%NE = NE

! Allocate arrays of appropriate sizes
      ALLOCATE(MATRIX%VAL(NE), MATRIX%ROW(NE), MATRIX%COL(NE))
      ALLOCATE(B(N),X(N))

! Read matrix and right-hand side
      READ (5,*) (MATRIX%ROW(I),MATRIX%COL(I),MATRIX%VAL(I),I=1,NE)
      READ (5,*) B

! Initialize the structures
      CALL ULS_INITIALIZE(FACTORS,CONTROL)

! Analyse and factorize

      CALL ULS_ANALYSE(MATRIX,FACTORS,CONTROL,AINFO,FINFO)
      IF(AINFO%FLAG<0) THEN
         WRITE(6,'(A,I2)') &
            ' Failure of ULS_ANALYSE with AINFO%FLAG=', AINFO%FLAG
         STOP
      END IF

! Solve without iterative refinement
      CALL ULS_SOLVE(MATRIX,FACTORS,B,X,CONTROL,SINFO)
      IF(SINFO%FLAG==0) WRITE(6,'(A,/,(6ES11.3))')  &
         'Solution of set of equations without refinement is',X

! Clean up
      DEALLOCATE(MATRIX%VAL, MATRIX%ROW, MATRIX%COL)
      CALL ULS_FINALIZE(FACTORS,CONTROL,INFO)

END PROGRAM MAIN
*ENDASIS

*P Thus if, in this example, we wish to solve:

*MLEADING 32v
*D {LEFT ( MATRIX{
      COL{3.14 ABOVE 4.1 ABOVE _}
      COL{7.5 ABOVE 3.2 ABOVE 1.0}
      COL{_ ABOVE 0.3 ABOVE 4.1}}
   RIGHT ) _ <x>_=_LEFT ( MATRIX{
      COL{1.0 ABOVE 2.0 ABOVE 3.0}}
   RIGHT )}

*N followed by the system:

*D {LEFT ( MATRIX{
       COL{4.7 ABOVE 3.2 ABOVE _}
       COL{6.2 ABOVE 0.0 ABOVE 3.1}
       COL{_ ABOVE 0.31 ABOVE 0.0}}
    RIGHT ) _ <x>_=_LEFT ( MATRIX {
       COL{1.1 ABOVE 2.1 ABOVE 3.1}}
    RIGHT )}

*KEEP
*N we have as input

*SETASIS
     3     3     7
     1     1     3.14
     2     3     0.30
     3     3     4.1
     2     1     4.1
     1     2     7.5
     3     2     1.0
     2     2     3.2
     1.0      2.0          3.0
*ENDASIS
*ENDK

*KEEP
*N and the output would be

*SETASIS
Solution of first set of equations without refinement is
  4.886E-01 -7.122E-02  7.491E-01
*ENDASIS

