* EXTERNAL PACKAGES *

GALAHAD optionally uses a number of external packages. Default
vesions are provided, and the user need take no further action
unless she/he wishes to include fully functioning versions.

Some of this optional software, particularly that from HSL,
is available as source code. This may be compiled automatically
as part of the GALAHAD installation (or update) process. See
./galahad/doc/README.bashrc for more details.

The use of other external packages, particularly those that
are available as object libraries, is controlled by variables
set in the "architecture" files generically of the form

   machine.os.compiler

in the ./galahad/makefiles and ./galahad/bin/sys directories
that will have been created during the installation process.

The variables in the former are "Makefile" variables
and by default are set as

BLAS = -lgalahad_blas
LAPACK = -lgalahad_lapack
HSL = -lgalahad_hsl
SPRAL = -lgalahad_spral
METIS4 = -lgalahad_metis4
PARDISO = -lgalahad_pardiso
MKL_PARDISO = -lgalahad_mkl_pardiso
WSMP = -lgalahad_wsmp
PASTIX = -galahad_pastix
MUMPS = -galahad_mumps

These may be overridden as for eaxmple,

WSMP = -L/numerical/wsmp/wsmp-Linux64/lib/Intel -lwsmp64

Note that spaces are not critical here.

The variables in ./galahad/bin/sys are Unix Bourne/bash-shell variables and
by default are

BLAS="-lgalahad_blas"
LAPACK="-lgalahad_lapack"
HSL="-lgalahad_hsl"
SPRAL="-lgalahad_spral"
METIS4="-lgalahad_metis4"
PARDISO="-lgalahad_pardiso"
MKL_PARDISO="-lgalahad_mkl_pardiso"
WSMP="-lgalahad_wsmp"
PASTIX="-galahad_pastix"
MUMPS="-galahad_mumps"

and are now overridden for example as

WSMP="-L/numerical/wsmp/wsmp-Linux64/lib/Intel -lwsmp64"

Spaces arre critical here, and all declarations must be
enclosed in quotes "" as shown.

In addition, the GALAHAD interface scripts gal (for CUTEst), dgal (for QPLIB)
and rbgal (for Rutherford-Boeing) override the above if the user sets
and exports a variable PACKLIB (orresponding to the package "pack"), 
this will ovedrride the PACK variable set in the architecture file.
For example, when using the bash shell,

 BLASLIB="-lblas"
 export BLASLIB

will override the BLAS variable set in ./galahad/bin/sys/* when using
(sd)gal, dgal and rbgal. See the man pages for these scripts for
further details.

----
BLAS
----

 If there are compiled, library versions of the blas
 (basic linear algebra subprograms), set BLAS to a list of
 names of the object library suffix -lx, where the object library
 libx.a contains relevant blas. For instance if the blas are
 shared between object libraries libblas1.a and libblas2.a,
 BLAS should be set to "-lblas1 -lblas2", noting that those in
 libblas1.a will take precedence over those in libblas2.a.
 If the user wishes not to link blas separately, set BLAS to
 "-galahad_dummy"

------
LAPACK
------

 If there are compiled, library versions of the LAPACK library
 set LAPACK to a list of names of the object library suffix -lx,
 where the object library libx.a contains relevant lapack. For instance
 if LAPACK is shared between object libraries liblapack1.a and liblapack2.a,
 LAPACK should be set to "-llapack1 -llapack2", noting that those in
 liblapack1.a will take precedence over those in liblapack2.a.
 If the user wishes not to link lapack separately, set LAPACK to
 "-galahad_dummy"

---
HSL
---

 If you already have a compiled, library version of HSL (formerly, the
 Harwell Subroutine Library), set HSL to -lx, where the object library
 libx.a contains the relevant HSL packages. For instance if the HSL
 is in the object library libhsl.a, HSL should be set to "-lhsl".
 N.B. HSL is only optionally required but will improve performance.

-----
METIS
-----

 If there is a compiled, library version of the MeTiS (version 4) graph
 partitioning package (see http://www-users.cs.umn.edu/~karypis/metis/ )
 - you may download the source from

  http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz

 and follow the compilation instructions - set METIS4 to -lx,
 where the object library libx.a contains Metis.  For instance if MeTiS
 is contained in the object library libmetis.a, METIS4 should be set to
 "-lmetis".  If the library is in a "non-standard" place, METIS4 should
 also point to the full path to the library. For example, if libmetis.so
 is in the directory /mylibrary, METIS4 should be set to "-L/mylibrary -lmetis"
 N.B. MeTiS is only optionally required but may improve performance.
 Also be aware that the more modern version 5 of MeTiS is not compatible.

-------
PARDISO
-------

 If there is a compiled, library version of the PARDISO sparse factorization
 package (http://www.pardiso-project.org/) , set PARDISO to -lx,
 where the object library libx.so contains PARDISO.  For instance if PARDISO
 is contained in the object library libpardiso.so, PARDISO should be set to
 "-lpardiso". If the library is in a "non-standard place", PARDISO should
 also point to the full path to the library. For example, if libpardiso.so
 is in the directory /mylibrary, PARDISO should be set to
 "-L/mylibrary -lpardiso"
 N.B. PARDISO is only optionally required but may improve performance.

-----------
MKL PARDISO
-----------

 If there is a compiled, library version of the MKL version of the PARDISO
 sparse factorization package (http://www.pardiso-project.org/) , set
 MKL_PARDISO to -lx, where the object library libx.so contains PARDISO. For
 instance if PARDISO is contained in the object library libmkl_intel_lp64.a
 MKL_PARDISO should be set to "-lmkl_intel_lp64". If the library is in a
 "non-standard place", MKL_PARDISO should also point to the full path to the
 library. For example, if libmkl_intel_lp64.a is in the directory /mylibrary,
 MKL_PARDISO should be set to "-L/mylibrary -lmkl_intel_lp64"
 f a compiled version of the MKL version of PARDISO is unavailable,
 MKL_PARDISO should be set to "-lgalahad_mkl_pardiso".
 N.B. PARDISO is only optionally required but may improve performance.

----
WSMP
----

 If there is a compiled, library version of the WSMP sparse factorization
 package (http://www.wsmp-project.org/) , set WSMP to -lx,
 where the object library libx.so contains WSMP.  For instance if WSMP
 is contained in the object library libwsmp.so, wsmp should be set to
 "-lwsmp". If the library is in a "non-standard place", WSMP should
 also point to the full path to the library. For example, if libwsmp.so
 is in the directory /mylibrary, WSMP should be set to
 "-L/mylibrary -lwsmp"
 N.B. WSMP is only optionally required but may improve performance.

------
PaStiX
------

 PaStix should be installed into a suitable directory via

  git clone --recursive git@gitlab.inria.fr:solverstack/pastix.git
  cd pastix
  set PASTIX_DIR=$PWD

 To build a version for the default (gcc) compiler, make sure that
 the required dependencies are available via, for example

  sudo apt-get install cmake gcc gfortran libhwloc-dev libscotch-dev \
    libopenblas-dev liblapacke-dev

 on linux or

  brew install lapack hwloc metis $PASTIX_DIR/tools/homebrew/scotch5.rb

 on OSX, [TODO: check OSX]

 check the optional install flags on

  https://solverstack.gitlabpages.inria.fr/pastix/

 and then issue the commands

   mkdir gnu
   cd gnu
   cmake .. -DCMAKE_INSTALL_PREFIX=${PASTIX_DIR} -DPASTIX_INT64=[ON|OFF] \
          -DPASTIX_ORDERING_SCOTCH=[ON|OFF] \
          -DPASTIX_ORDERING_METIS=[ON|OFF]
   make install

 with [ON|OFF] chosen as required.

 For a non-default compiler, e.g., icc,

   mkdir intel
   cd intel
   cmake .. -DCMAKE_INSTALL_PREFIX=${PASTIX_DIR} -DPASTIX_INT64=[ON|OFF] \
          -DPASTIX_ORDERING_SCOTCH=[ON|OFF] \
          -DPASTIX_ORDERING_METIS=[ON|OFF] \
          -DCMAKE_C_COMPILER=icc \
          -DCMAKE_CXX_COMPILER=icc \
          -DCMAKE_Fortran_COMPILER=ifort
   make install

 More details are available from

  https://solverstack.gitlabpages.inria.fr/pastix/md_docs_doxygen_chapters_Pastix_Install.html

 To use this in GALAHAD, replace the variable PASTIX by

   MY_PASTIX_DIR = $(PASTIX_DIR)/[compiled location]
   PASTIX = -L $(MY_PASTIX_DIR)/lib \
    -L /usr/lib/x86_64-linux-gnu \
    -L /usr/lib/x86_64-linux-gnu/openblas-pthread \
    -L $(MY_PASTIX_DIR) \
    -L $(MY_PASTIX_DIR)/wrappers/fortran90 \
    -L $(MY_PASTIX_DIR)/kernels \
    -L $(MY_PASTIX_DIR)/spm/wrappers/fortran90 \
    -L $(MY_PASTIX_DIR)/spm/src \
    -lpastixf -lpastix -lpastix_kernels -lspmf -lspm -lhwloc \
    -llapacke -lopenblas -lscotch -lscotcherrexit -lpthread -lz -lm -lrt

 where [compiled location] is the subdirectory of PASTIX_DIR that you
 build the version relevant to your compiler (e.g. gnu or intel above).

 [TODO: describe OSX variant]

 N.B. PaStiX is only optionally required but may improve performance.

-----
MUMPS
-----

 Mumps is availble as a binary download package for many variants of
 Linux. Beware that you will need at least version 5.5.1, as earlier
 versions are incompatible.

 Mumps may also be downloaded and compiled from source, see

  https://graal.ens-lyon.fr/MUMPS/index.php?page=dwnld

 and, once downloaded and unpacked, follow the instructions in the
 INSTALL file.

 To use this in GALAHAD, replace the variables MUMPS and MUMPSINCLUDE by

  MUMPSINCLUDE = [mumps include directory]
  MUMPS = -I /usr/lib/x86_64-linux-gnu/openmpi/include \
   -I /usr/lib/x86_64-linux-gnu/openmpi/lib \
   -I $(MUMPSINCLUDE) -ldmumps -lmumps_common -L /usr/lib -lmetis \
   -L /usr/lib -lesmumps -lscotch -lscotcherr \
   -lscalapack-openmpi -llapack -lblas -lpthread \
   -L /usr/lib/x86_64-linux-gnu/openmpi/lib

  where [mumps include directory] contains the mumps C header files,
  typically /usr/include on Linux systems.

 N.B. MUMPS is only optionally required but may improve performance.

Nick Gould
For GALAHAD productions
2023-05-17
